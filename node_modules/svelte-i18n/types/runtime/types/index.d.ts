import type { Formats, FormatXMLElementFn } from 'intl-messageformat';
export interface LocaleDictionary {
    [key: string]: LocaleDictionary | string | Array<string | LocaleDictionary> | null;
}
export declare type LocalesDictionary = {
    [key: string]: LocaleDictionary;
};
export declare type InterpolationValues = Record<string, string | number | boolean | Date | FormatXMLElementFn<unknown> | null | undefined> | undefined;
export interface MessageObject {
    id: string;
    locale?: string;
    format?: string;
    default?: string;
    values?: InterpolationValues;
}
export declare type MessageFormatter = (id: string | MessageObject, options?: Omit<MessageObject, 'id'>) => string;
export declare type TimeFormatter = (d: Date | number, options?: IntlFormatterOptions<Intl.DateTimeFormatOptions>) => string;
export declare type DateFormatter = (d: Date | number, options?: IntlFormatterOptions<Intl.DateTimeFormatOptions>) => string;
export declare type NumberFormatter = (d: number, options?: IntlFormatterOptions<Intl.NumberFormatOptions>) => string;
export declare type JSONGetter = <T>(id: string, locale?: string | null) => T;
declare type IntlFormatterOptions<T> = T & {
    format?: string;
    locale?: string;
};
export interface MemoizedIntlFormatter<T, U> {
    (options: IntlFormatterOptions<U>): T;
}
export interface MemoizedIntlFormatterOptional<T, U> {
    (options?: IntlFormatterOptions<U>): T;
}
export interface MessagesLoader {
    (): Promise<any>;
}
export interface ConfigureOptions {
    fallbackLocale: string;
    initialLocale?: string | null;
    formats: Formats;
    loadingDelay: number;
    warnOnMissingMessages: boolean;
    ignoreTag: boolean;
}
export declare type ConfigureOptionsInit = Pick<ConfigureOptions, 'fallbackLocale'> & Partial<Omit<ConfigureOptions, 'fallbackLocale'>>;
export {};
