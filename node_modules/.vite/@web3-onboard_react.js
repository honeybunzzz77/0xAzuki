import {
  init
} from "./chunk-4PB6HZ4E.js";
import "./chunk-SA62SW7S.js";
import "./chunk-QMB77UJZ.js";
import "./chunk-AOTIW23S.js";
import "./chunk-NYT6S7VH.js";
import "./chunk-ZOYOG4LU.js";
import "./chunk-TRWCPFR4.js";
import "./chunk-7SH6SCUR.js";
import {
  require_react
} from "./chunk-72JHHTPV.js";
import "./chunk-ZLFRZDIC.js";
import "./chunk-PDRUHE3M.js";
import "./chunk-WAO7O4Z6.js";
import {
  __spreadProps,
  __spreadValues,
  __toModule,
  init_buffer,
  init_virtual_process_polyfill
} from "./chunk-QYANIK43.js";

// dep:@web3-onboard_react
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/react/dist/index.js
init_virtual_process_polyfill();
init_buffer();
var import_react = __toModule(require_react());
var web3Onboard = null;
var init2 = (options) => {
  web3Onboard = init(options);
  return web3Onboard;
};
var useConnectWallet = () => {
  if (!web3Onboard)
    throw new Error("Must initialize before using hooks.");
  const [wallet, setConnectedWallet] = (0, import_react.useState)(() => web3Onboard.state.get().wallets[0] || null);
  const [connecting, setConnecting] = (0, import_react.useState)(false);
  (0, import_react.useEffect)(() => {
    const subscription = web3Onboard.state.select("wallets").subscribe((wallets) => setConnectedWallet(wallets[0] || null));
    return () => subscription.unsubscribe();
  }, [wallet]);
  const connect = (0, import_react.useCallback)(async (options) => {
    setConnecting(true);
    const [connectedWallet] = await web3Onboard.connectWallet(options);
    setConnecting(false);
    setConnectedWallet(connectedWallet || null);
  }, []);
  const disconnect = (0, import_react.useCallback)(async ({ label }) => {
    setConnecting(true);
    await web3Onboard.disconnectWallet({ label });
    setConnectedWallet(null);
    setConnecting(false);
  }, []);
  return [{ wallet, connecting }, connect, disconnect];
};
var useSetChain = (walletLabel) => {
  if (!web3Onboard)
    throw new Error("Must initialize before using hooks.");
  const { state, setChain } = web3Onboard;
  const [settingChain, setInProgress] = (0, import_react.useState)(false);
  const [connectedChain, setConnectedChain] = (0, import_react.useState)(() => {
    const initialWallets = web3Onboard.state.get().wallets;
    if (initialWallets.length === 0)
      return null;
    return (initialWallets.find(({ label }) => label === walletLabel) || initialWallets[0]).chains[0] || null;
  });
  const chains = (0, import_react.useMemo)(() => state.get().chains, []);
  (0, import_react.useEffect)(() => {
    const subscription = state.select("wallets").subscribe((wallets) => {
      const wallet = wallets.find(({ label }) => label === walletLabel) || wallets[0];
      wallet && setConnectedChain(wallet.chains[0]);
    });
    return () => subscription.unsubscribe();
  }, []);
  const set = (0, import_react.useCallback)(async (options) => {
    setInProgress(true);
    await setChain(__spreadProps(__spreadValues({}, options), { wallet: walletLabel }));
    setInProgress(false);
  }, []);
  return [{ chains, connectedChain, settingChain }, set];
};
var useWallets = () => {
  if (!web3Onboard)
    throw new Error("Must initialize before using hooks.");
  const [wallets, setConnectedWallets] = (0, import_react.useState)(() => web3Onboard.state.get().wallets);
  (0, import_react.useEffect)(() => {
    const wallets$ = web3Onboard.state.select("wallets");
    const subscription = wallets$.subscribe(setConnectedWallets);
    return () => subscription.unsubscribe();
  }, []);
  return wallets;
};
export {
  init2 as init,
  useConnectWallet,
  useSetChain,
  useWallets,
  web3Onboard
};
//# sourceMappingURL=@web3-onboard_react.js.map
