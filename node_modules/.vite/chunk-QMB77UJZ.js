import {
  __commonJS,
  __toModule,
  init_buffer,
  init_virtual_process_polyfill
} from "./chunk-QYANIK43.js";

// node_modules/joi/dist/joi-browser.min.js
var require_joi_browser_min = __commonJS({
  "node_modules/joi/dist/joi-browser.min.js"(exports, module) {
    init_virtual_process_polyfill();
    init_buffer();
    !function(e, t) {
      typeof exports == "object" && typeof module == "object" ? module.exports = t() : typeof define == "function" && define.amd ? define([], t) : typeof exports == "object" ? exports.joi = t() : e.joi = t();
    }(self, function() {
      return e = { 1238: (e2) => {
        "use strict";
        e2.exports = { version: "17.6.0" };
      }, 7629: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(9474), o = r(1687), i = r(8652), l = r(8160), c = r(3292), u = r(6354), f = r(8901), m = r(9708), h = r(6914), d = r(2294), p = r(6133), g = r(1152), y = r(8863), b = r(2036), v = { Base: class {
          constructor(e3) {
            this.type = e3, this.$_root = null, this._definition = {}, this._reset();
          }
          _reset() {
            this._ids = new d.Ids(), this._preferences = null, this._refs = new p.Manager(), this._cache = null, this._valids = null, this._invalids = null, this._flags = {}, this._rules = [], this._singleRules = new Map(), this.$_terms = {}, this.$_temp = { ruleset: null, whens: {} };
          }
          describe() {
            return s(typeof m.describe == "function", "Manifest functionality disabled"), m.describe(this);
          }
          allow(...e3) {
            return l.verifyFlat(e3, "allow"), this._values(e3, "_valids");
          }
          alter(e3) {
            s(e3 && typeof e3 == "object" && !Array.isArray(e3), "Invalid targets argument"), s(!this._inRuleset(), "Cannot set alterations inside a ruleset");
            const t3 = this.clone();
            t3.$_terms.alterations = t3.$_terms.alterations || [];
            for (const r2 in e3) {
              const n2 = e3[r2];
              s(typeof n2 == "function", "Alteration adjuster for", r2, "must be a function"), t3.$_terms.alterations.push({ target: r2, adjuster: n2 });
            }
            return t3.$_temp.ruleset = false, t3;
          }
          artifact(e3) {
            return s(e3 !== void 0, "Artifact cannot be undefined"), s(!this._cache, "Cannot set an artifact with a rule cache"), this.$_setFlag("artifact", e3);
          }
          cast(e3) {
            return s(e3 === false || typeof e3 == "string", "Invalid to value"), s(e3 === false || this._definition.cast[e3], "Type", this.type, "does not support casting to", e3), this.$_setFlag("cast", e3 === false ? void 0 : e3);
          }
          default(e3, t3) {
            return this._default("default", e3, t3);
          }
          description(e3) {
            return s(e3 && typeof e3 == "string", "Description must be a non-empty string"), this.$_setFlag("description", e3);
          }
          empty(e3) {
            const t3 = this.clone();
            return e3 !== void 0 && (e3 = t3.$_compile(e3, { override: false })), t3.$_setFlag("empty", e3, { clone: false });
          }
          error(e3) {
            return s(e3, "Missing error"), s(e3 instanceof Error || typeof e3 == "function", "Must provide a valid Error object or a function"), this.$_setFlag("error", e3);
          }
          example(e3, t3 = {}) {
            return s(e3 !== void 0, "Missing example"), l.assertOptions(t3, ["override"]), this._inner("examples", e3, { single: true, override: t3.override });
          }
          external(e3, t3) {
            return typeof e3 == "object" && (s(!t3, "Cannot combine options with description"), t3 = e3.description, e3 = e3.method), s(typeof e3 == "function", "Method must be a function"), s(t3 === void 0 || t3 && typeof t3 == "string", "Description must be a non-empty string"), this._inner("externals", { method: e3, description: t3 }, { single: true });
          }
          failover(e3, t3) {
            return this._default("failover", e3, t3);
          }
          forbidden() {
            return this.presence("forbidden");
          }
          id(e3) {
            return e3 ? (s(typeof e3 == "string", "id must be a non-empty string"), s(/^[^\.]+$/.test(e3), "id cannot contain period character"), this.$_setFlag("id", e3)) : this.$_setFlag("id", void 0);
          }
          invalid(...e3) {
            return this._values(e3, "_invalids");
          }
          label(e3) {
            return s(e3 && typeof e3 == "string", "Label name must be a non-empty string"), this.$_setFlag("label", e3);
          }
          meta(e3) {
            return s(e3 !== void 0, "Meta cannot be undefined"), this._inner("metas", e3, { single: true });
          }
          note(...e3) {
            s(e3.length, "Missing notes");
            for (const t3 of e3)
              s(t3 && typeof t3 == "string", "Notes must be non-empty strings");
            return this._inner("notes", e3);
          }
          only(e3 = true) {
            return s(typeof e3 == "boolean", "Invalid mode:", e3), this.$_setFlag("only", e3);
          }
          optional() {
            return this.presence("optional");
          }
          prefs(e3) {
            s(e3, "Missing preferences"), s(e3.context === void 0, "Cannot override context"), s(e3.externals === void 0, "Cannot override externals"), s(e3.warnings === void 0, "Cannot override warnings"), s(e3.debug === void 0, "Cannot override debug"), l.checkPreferences(e3);
            const t3 = this.clone();
            return t3._preferences = l.preferences(t3._preferences, e3), t3;
          }
          presence(e3) {
            return s(["optional", "required", "forbidden"].includes(e3), "Unknown presence mode", e3), this.$_setFlag("presence", e3);
          }
          raw(e3 = true) {
            return this.$_setFlag("result", e3 ? "raw" : void 0);
          }
          result(e3) {
            return s(["raw", "strip"].includes(e3), "Unknown result mode", e3), this.$_setFlag("result", e3);
          }
          required() {
            return this.presence("required");
          }
          strict(e3) {
            const t3 = this.clone(), r2 = e3 !== void 0 && !e3;
            return t3._preferences = l.preferences(t3._preferences, { convert: r2 }), t3;
          }
          strip(e3 = true) {
            return this.$_setFlag("result", e3 ? "strip" : void 0);
          }
          tag(...e3) {
            s(e3.length, "Missing tags");
            for (const t3 of e3)
              s(t3 && typeof t3 == "string", "Tags must be non-empty strings");
            return this._inner("tags", e3);
          }
          unit(e3) {
            return s(e3 && typeof e3 == "string", "Unit name must be a non-empty string"), this.$_setFlag("unit", e3);
          }
          valid(...e3) {
            l.verifyFlat(e3, "valid");
            const t3 = this.allow(...e3);
            return t3.$_setFlag("only", !!t3._valids, { clone: false }), t3;
          }
          when(e3, t3) {
            const r2 = this.clone();
            r2.$_terms.whens || (r2.$_terms.whens = []);
            const n2 = c.when(r2, e3, t3);
            if (!["any", "link"].includes(r2.type)) {
              const e4 = n2.is ? [n2] : n2.switch;
              for (const t4 of e4)
                s(!t4.then || t4.then.type === "any" || t4.then.type === r2.type, "Cannot combine", r2.type, "with", t4.then && t4.then.type), s(!t4.otherwise || t4.otherwise.type === "any" || t4.otherwise.type === r2.type, "Cannot combine", r2.type, "with", t4.otherwise && t4.otherwise.type);
            }
            return r2.$_terms.whens.push(n2), r2.$_mutateRebuild();
          }
          cache(e3) {
            s(!this._inRuleset(), "Cannot set caching inside a ruleset"), s(!this._cache, "Cannot override schema cache"), s(this._flags.artifact === void 0, "Cannot cache a rule with an artifact");
            const t3 = this.clone();
            return t3._cache = e3 || i.provider.provision(), t3.$_temp.ruleset = false, t3;
          }
          clone() {
            const e3 = Object.create(Object.getPrototypeOf(this));
            return this._assign(e3);
          }
          concat(e3) {
            s(l.isSchema(e3), "Invalid schema object"), s(this.type === "any" || e3.type === "any" || e3.type === this.type, "Cannot merge type", this.type, "with another type:", e3.type), s(!this._inRuleset(), "Cannot concatenate onto a schema with open ruleset"), s(!e3._inRuleset(), "Cannot concatenate a schema with open ruleset");
            let t3 = this.clone();
            if (this.type === "any" && e3.type !== "any") {
              const r2 = e3.clone();
              for (const e4 of Object.keys(t3))
                e4 !== "type" && (r2[e4] = t3[e4]);
              t3 = r2;
            }
            t3._ids.concat(e3._ids), t3._refs.register(e3, p.toSibling), t3._preferences = t3._preferences ? l.preferences(t3._preferences, e3._preferences) : e3._preferences, t3._valids = b.merge(t3._valids, e3._valids, e3._invalids), t3._invalids = b.merge(t3._invalids, e3._invalids, e3._valids);
            for (const r2 of e3._singleRules.keys())
              t3._singleRules.has(r2) && (t3._rules = t3._rules.filter((e4) => e4.keep || e4.name !== r2), t3._singleRules.delete(r2));
            for (const r2 of e3._rules)
              e3._definition.rules[r2.method].multi || t3._singleRules.set(r2.name, r2), t3._rules.push(r2);
            if (t3._flags.empty && e3._flags.empty) {
              t3._flags.empty = t3._flags.empty.concat(e3._flags.empty);
              const r2 = Object.assign({}, e3._flags);
              delete r2.empty, o(t3._flags, r2);
            } else if (e3._flags.empty) {
              t3._flags.empty = e3._flags.empty;
              const r2 = Object.assign({}, e3._flags);
              delete r2.empty, o(t3._flags, r2);
            } else
              o(t3._flags, e3._flags);
            for (const r2 in e3.$_terms) {
              const s2 = e3.$_terms[r2];
              s2 ? t3.$_terms[r2] ? t3.$_terms[r2] = t3.$_terms[r2].concat(s2) : t3.$_terms[r2] = s2.slice() : t3.$_terms[r2] || (t3.$_terms[r2] = s2);
            }
            return this.$_root._tracer && this.$_root._tracer._combine(t3, [this, e3]), t3.$_mutateRebuild();
          }
          extend(e3) {
            return s(!e3.base, "Cannot extend type with another base"), f.type(this, e3);
          }
          extract(e3) {
            return e3 = Array.isArray(e3) ? e3 : e3.split("."), this._ids.reach(e3);
          }
          fork(e3, t3) {
            s(!this._inRuleset(), "Cannot fork inside a ruleset");
            let r2 = this;
            for (let s2 of [].concat(e3))
              s2 = Array.isArray(s2) ? s2 : s2.split("."), r2 = r2._ids.fork(s2, t3, r2);
            return r2.$_temp.ruleset = false, r2;
          }
          rule(e3) {
            const t3 = this._definition;
            l.assertOptions(e3, Object.keys(t3.modifiers)), s(this.$_temp.ruleset !== false, "Cannot apply rules to empty ruleset or the last rule added does not support rule properties");
            const r2 = this.$_temp.ruleset === null ? this._rules.length - 1 : this.$_temp.ruleset;
            s(r2 >= 0 && r2 < this._rules.length, "Cannot apply rules to empty ruleset");
            const a2 = this.clone();
            for (let o2 = r2; o2 < a2._rules.length; ++o2) {
              const r3 = a2._rules[o2], i2 = n(r3);
              for (const n2 in e3)
                t3.modifiers[n2](i2, e3[n2]), s(i2.name === r3.name, "Cannot change rule name");
              a2._rules[o2] = i2, a2._singleRules.get(i2.name) === r3 && a2._singleRules.set(i2.name, i2);
            }
            return a2.$_temp.ruleset = false, a2.$_mutateRebuild();
          }
          get ruleset() {
            s(!this._inRuleset(), "Cannot start a new ruleset without closing the previous one");
            const e3 = this.clone();
            return e3.$_temp.ruleset = e3._rules.length, e3;
          }
          get $() {
            return this.ruleset;
          }
          tailor(e3) {
            e3 = [].concat(e3), s(!this._inRuleset(), "Cannot tailor inside a ruleset");
            let t3 = this;
            if (this.$_terms.alterations)
              for (const { target: r2, adjuster: n2 } of this.$_terms.alterations)
                e3.includes(r2) && (t3 = n2(t3), s(l.isSchema(t3), "Alteration adjuster for", r2, "failed to return a schema object"));
            return t3 = t3.$_modify({ each: (t4) => t4.tailor(e3), ref: false }), t3.$_temp.ruleset = false, t3.$_mutateRebuild();
          }
          tracer() {
            return g.location ? g.location(this) : this;
          }
          validate(e3, t3) {
            return y.entry(e3, this, t3);
          }
          validateAsync(e3, t3) {
            return y.entryAsync(e3, this, t3);
          }
          $_addRule(e3) {
            typeof e3 == "string" && (e3 = { name: e3 }), s(e3 && typeof e3 == "object", "Invalid options"), s(e3.name && typeof e3.name == "string", "Invalid rule name");
            for (const t4 in e3)
              s(t4[0] !== "_", "Cannot set private rule properties");
            const t3 = Object.assign({}, e3);
            t3._resolve = [], t3.method = t3.method || t3.name;
            const r2 = this._definition.rules[t3.method], n2 = t3.args;
            s(r2, "Unknown rule", t3.method);
            const a2 = this.clone();
            if (n2) {
              s(Object.keys(n2).length === 1 || Object.keys(n2).length === this._definition.rules[t3.name].args.length, "Invalid rule definition for", this.type, t3.name);
              for (const e4 in n2) {
                let o2 = n2[e4];
                if (o2 !== void 0) {
                  if (r2.argsByName) {
                    const i2 = r2.argsByName.get(e4);
                    if (i2.ref && l.isResolvable(o2))
                      t3._resolve.push(e4), a2.$_mutateRegister(o2);
                    else if (i2.normalize && (o2 = i2.normalize(o2), n2[e4] = o2), i2.assert) {
                      const t4 = l.validateArg(o2, e4, i2);
                      s(!t4, t4, "or reference");
                    }
                  }
                  n2[e4] = o2;
                } else
                  delete n2[e4];
              }
            }
            return r2.multi || (a2._ruleRemove(t3.name, { clone: false }), a2._singleRules.set(t3.name, t3)), a2.$_temp.ruleset === false && (a2.$_temp.ruleset = null), r2.priority ? a2._rules.unshift(t3) : a2._rules.push(t3), a2;
          }
          $_compile(e3, t3) {
            return c.schema(this.$_root, e3, t3);
          }
          $_createError(e3, t3, r2, s2, n2, a2 = {}) {
            const o2 = a2.flags !== false ? this._flags : {}, i2 = a2.messages ? h.merge(this._definition.messages, a2.messages) : this._definition.messages;
            return new u.Report(e3, t3, r2, o2, i2, s2, n2);
          }
          $_getFlag(e3) {
            return this._flags[e3];
          }
          $_getRule(e3) {
            return this._singleRules.get(e3);
          }
          $_mapLabels(e3) {
            return e3 = Array.isArray(e3) ? e3 : e3.split("."), this._ids.labels(e3);
          }
          $_match(e3, t3, r2, s2) {
            (r2 = Object.assign({}, r2)).abortEarly = true, r2._externals = false, t3.snapshot();
            const n2 = !y.validate(e3, this, t3, r2, s2).errors;
            return t3.restore(), n2;
          }
          $_modify(e3) {
            return l.assertOptions(e3, ["each", "once", "ref", "schema"]), d.schema(this, e3) || this;
          }
          $_mutateRebuild() {
            return s(!this._inRuleset(), "Cannot add this rule inside a ruleset"), this._refs.reset(), this._ids.reset(), this.$_modify({ each: (e3, { source: t3, name: r2, path: s2, key: n2 }) => {
              const a2 = this._definition[t3][r2] && this._definition[t3][r2].register;
              a2 !== false && this.$_mutateRegister(e3, { family: a2, key: n2 });
            } }), this._definition.rebuild && this._definition.rebuild(this), this.$_temp.ruleset = false, this;
          }
          $_mutateRegister(e3, { family: t3, key: r2 } = {}) {
            this._refs.register(e3, t3), this._ids.register(e3, { key: r2 });
          }
          $_property(e3) {
            return this._definition.properties[e3];
          }
          $_reach(e3) {
            return this._ids.reach(e3);
          }
          $_rootReferences() {
            return this._refs.roots();
          }
          $_setFlag(e3, t3, r2 = {}) {
            s(e3[0] === "_" || !this._inRuleset(), "Cannot set flag inside a ruleset");
            const n2 = this._definition.flags[e3] || {};
            if (a(t3, n2.default) && (t3 = void 0), a(t3, this._flags[e3]))
              return this;
            const o2 = r2.clone !== false ? this.clone() : this;
            return t3 !== void 0 ? (o2._flags[e3] = t3, o2.$_mutateRegister(t3)) : delete o2._flags[e3], e3[0] !== "_" && (o2.$_temp.ruleset = false), o2;
          }
          $_parent(e3, ...t3) {
            return this[e3][l.symbols.parent].call(this, ...t3);
          }
          $_validate(e3, t3, r2) {
            return y.validate(e3, this, t3, r2);
          }
          _assign(e3) {
            e3.type = this.type, e3.$_root = this.$_root, e3.$_temp = Object.assign({}, this.$_temp), e3.$_temp.whens = {}, e3._ids = this._ids.clone(), e3._preferences = this._preferences, e3._valids = this._valids && this._valids.clone(), e3._invalids = this._invalids && this._invalids.clone(), e3._rules = this._rules.slice(), e3._singleRules = n(this._singleRules, { shallow: true }), e3._refs = this._refs.clone(), e3._flags = Object.assign({}, this._flags), e3._cache = null, e3.$_terms = {};
            for (const t3 in this.$_terms)
              e3.$_terms[t3] = this.$_terms[t3] ? this.$_terms[t3].slice() : null;
            e3.$_super = {};
            for (const t3 in this.$_super)
              e3.$_super[t3] = this._super[t3].bind(e3);
            return e3;
          }
          _bare() {
            const e3 = this.clone();
            e3._reset();
            const t3 = e3._definition.terms;
            for (const r2 in t3) {
              const s2 = t3[r2];
              e3.$_terms[r2] = s2.init;
            }
            return e3.$_mutateRebuild();
          }
          _default(e3, t3, r2 = {}) {
            return l.assertOptions(r2, "literal"), s(t3 !== void 0, "Missing", e3, "value"), s(typeof t3 == "function" || !r2.literal, "Only function value supports literal option"), typeof t3 == "function" && r2.literal && (t3 = { [l.symbols.literal]: true, literal: t3 }), this.$_setFlag(e3, t3);
          }
          _generate(e3, t3, r2) {
            if (!this.$_terms.whens)
              return { schema: this };
            const s2 = [], n2 = [];
            for (let a3 = 0; a3 < this.$_terms.whens.length; ++a3) {
              const o3 = this.$_terms.whens[a3];
              if (o3.concat) {
                s2.push(o3.concat), n2.push("".concat(a3, ".concat"));
                continue;
              }
              const i2 = o3.ref ? o3.ref.resolve(e3, t3, r2) : e3, l2 = o3.is ? [o3] : o3.switch, c2 = n2.length;
              for (let c3 = 0; c3 < l2.length; ++c3) {
                const { is: u2, then: f2, otherwise: m2 } = l2[c3], h2 = "".concat(a3).concat(o3.switch ? "." + c3 : "");
                if (u2.$_match(i2, t3.nest(u2, "".concat(h2, ".is")), r2)) {
                  if (f2) {
                    const a4 = t3.localize([...t3.path, "".concat(h2, ".then")], t3.ancestors, t3.schemas), { schema: o4, id: i3 } = f2._generate(e3, a4, r2);
                    s2.push(o4), n2.push("".concat(h2, ".then").concat(i3 ? "(".concat(i3, ")") : ""));
                    break;
                  }
                } else if (m2) {
                  const a4 = t3.localize([...t3.path, "".concat(h2, ".otherwise")], t3.ancestors, t3.schemas), { schema: o4, id: i3 } = m2._generate(e3, a4, r2);
                  s2.push(o4), n2.push("".concat(h2, ".otherwise").concat(i3 ? "(".concat(i3, ")") : ""));
                  break;
                }
              }
              if (o3.break && n2.length > c2)
                break;
            }
            const a2 = n2.join(", ");
            if (t3.mainstay.tracer.debug(t3, "rule", "when", a2), !a2)
              return { schema: this };
            if (!t3.mainstay.tracer.active && this.$_temp.whens[a2])
              return { schema: this.$_temp.whens[a2], id: a2 };
            let o2 = this;
            this._definition.generate && (o2 = this._definition.generate(this, e3, t3, r2));
            for (const e4 of s2)
              o2 = o2.concat(e4);
            return this.$_root._tracer && this.$_root._tracer._combine(o2, [this, ...s2]), this.$_temp.whens[a2] = o2, { schema: o2, id: a2 };
          }
          _inner(e3, t3, r2 = {}) {
            s(!this._inRuleset(), "Cannot set ".concat(e3, " inside a ruleset"));
            const n2 = this.clone();
            return n2.$_terms[e3] && !r2.override || (n2.$_terms[e3] = []), r2.single ? n2.$_terms[e3].push(t3) : n2.$_terms[e3].push(...t3), n2.$_temp.ruleset = false, n2;
          }
          _inRuleset() {
            return this.$_temp.ruleset !== null && this.$_temp.ruleset !== false;
          }
          _ruleRemove(e3, t3 = {}) {
            if (!this._singleRules.has(e3))
              return this;
            const r2 = t3.clone !== false ? this.clone() : this;
            r2._singleRules.delete(e3);
            const s2 = [];
            for (let t4 = 0; t4 < r2._rules.length; ++t4) {
              const n2 = r2._rules[t4];
              n2.name !== e3 || n2.keep ? s2.push(n2) : r2._inRuleset() && t4 < r2.$_temp.ruleset && --r2.$_temp.ruleset;
            }
            return r2._rules = s2, r2;
          }
          _values(e3, t3) {
            l.verifyFlat(e3, t3.slice(1, -1));
            const r2 = this.clone(), n2 = e3[0] === l.symbols.override;
            if (n2 && (e3 = e3.slice(1)), !r2[t3] && e3.length ? r2[t3] = new b() : n2 && (r2[t3] = e3.length ? new b() : null, r2.$_mutateRebuild()), !r2[t3])
              return r2;
            n2 && r2[t3].override();
            for (const n3 of e3) {
              s(n3 !== void 0, "Cannot call allow/valid/invalid with undefined"), s(n3 !== l.symbols.override, "Override must be the first value");
              const e4 = t3 === "_invalids" ? "_valids" : "_invalids";
              r2[e4] && (r2[e4].remove(n3), r2[e4].length || (s(t3 === "_valids" || !r2._flags.only, "Setting invalid value", n3, "leaves schema rejecting all values due to previous valid rule"), r2[e4] = null)), r2[t3].add(n3, r2._refs);
            }
            return r2;
          }
        } };
        v.Base.prototype[l.symbols.any] = { version: l.version, compile: c.compile, root: "$_root" }, v.Base.prototype.isImmutable = true, v.Base.prototype.deny = v.Base.prototype.invalid, v.Base.prototype.disallow = v.Base.prototype.invalid, v.Base.prototype.equal = v.Base.prototype.valid, v.Base.prototype.exist = v.Base.prototype.required, v.Base.prototype.not = v.Base.prototype.invalid, v.Base.prototype.options = v.Base.prototype.prefs, v.Base.prototype.preferences = v.Base.prototype.prefs, e2.exports = new v.Base();
      }, 8652: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(8160), o = { max: 1e3, supported: new Set(["undefined", "boolean", "number", "string"]) };
        t2.provider = { provision: (e3) => new o.Cache(e3) }, o.Cache = class {
          constructor(e3 = {}) {
            a.assertOptions(e3, ["max"]), s(e3.max === void 0 || e3.max && e3.max > 0 && isFinite(e3.max), "Invalid max cache size"), this._max = e3.max || o.max, this._map = new Map(), this._list = new o.List();
          }
          get length() {
            return this._map.size;
          }
          set(e3, t3) {
            if (e3 !== null && !o.supported.has(typeof e3))
              return;
            let r2 = this._map.get(e3);
            if (r2)
              return r2.value = t3, void this._list.first(r2);
            r2 = this._list.unshift({ key: e3, value: t3 }), this._map.set(e3, r2), this._compact();
          }
          get(e3) {
            const t3 = this._map.get(e3);
            if (t3)
              return this._list.first(t3), n(t3.value);
          }
          _compact() {
            if (this._map.size > this._max) {
              const e3 = this._list.pop();
              this._map.delete(e3.key);
            }
          }
        }, o.List = class {
          constructor() {
            this.tail = null, this.head = null;
          }
          unshift(e3) {
            return e3.next = null, e3.prev = this.head, this.head && (this.head.next = e3), this.head = e3, this.tail || (this.tail = e3), e3;
          }
          first(e3) {
            e3 !== this.head && (this._remove(e3), this.unshift(e3));
          }
          pop() {
            return this._remove(this.tail);
          }
          _remove(e3) {
            const { next: t3, prev: r2 } = e3;
            return t3.prev = r2, r2 && (r2.next = t3), e3 === this.tail && (this.tail = t3), e3.prev = null, e3.next = null, e3;
          }
        };
      }, 8160: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(7916), a = r(1238);
        let o, i;
        const l = { isoDate: /^(?:[-+]\d{2})?(?:\d{4}(?!\d{2}\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\1(?:[12]\d|0[1-9]|3[01]))?|W(?:[0-4]\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\d|[12]\d{2}|3(?:[0-5]\d|6[1-6])))(?![T]$|[T][\d]+Z$)(?:[T\s](?:(?:(?:[01]\d|2[0-3])(?:(:?)[0-5]\d)?|24\:?00)(?:[.,]\d+(?!:))?)(?:\2[0-5]\d(?:[.,]\d+)?)?(?:[Z]|(?:[+-])(?:[01]\d|2[0-3])(?::?[0-5]\d)?)?)?)?$/ };
        t2.version = a.version, t2.defaults = { abortEarly: true, allowUnknown: false, artifacts: false, cache: true, context: null, convert: true, dateFormat: "iso", errors: { escapeHtml: false, label: "path", language: null, render: true, stack: false, wrap: { label: '"', array: "[]" } }, externals: true, messages: {}, nonEnumerables: false, noDefaults: false, presence: "optional", skipFunctions: false, stripUnknown: false, warnings: false }, t2.symbols = { any: Symbol.for("@hapi/joi/schema"), arraySingle: Symbol("arraySingle"), deepDefault: Symbol("deepDefault"), errors: Symbol("errors"), literal: Symbol("literal"), override: Symbol("override"), parent: Symbol("parent"), prefs: Symbol("prefs"), ref: Symbol("ref"), template: Symbol("template"), values: Symbol("values") }, t2.assertOptions = function(e3, t3, r2 = "Options") {
          s(e3 && typeof e3 == "object" && !Array.isArray(e3), "Options must be of type object");
          const n2 = Object.keys(e3).filter((e4) => !t3.includes(e4));
          s(n2.length === 0, "".concat(r2, " contain unknown keys: ").concat(n2));
        }, t2.checkPreferences = function(e3) {
          i = i || r(3378);
          const t3 = i.preferences.validate(e3);
          if (t3.error)
            throw new n([t3.error.details[0].message]);
        }, t2.compare = function(e3, t3, r2) {
          switch (r2) {
            case "=":
              return e3 === t3;
            case ">":
              return e3 > t3;
            case "<":
              return e3 < t3;
            case ">=":
              return e3 >= t3;
            case "<=":
              return e3 <= t3;
          }
        }, t2.default = function(e3, t3) {
          return e3 === void 0 ? t3 : e3;
        }, t2.isIsoDate = function(e3) {
          return l.isoDate.test(e3);
        }, t2.isNumber = function(e3) {
          return typeof e3 == "number" && !isNaN(e3);
        }, t2.isResolvable = function(e3) {
          return !!e3 && (e3[t2.symbols.ref] || e3[t2.symbols.template]);
        }, t2.isSchema = function(e3, r2 = {}) {
          const n2 = e3 && e3[t2.symbols.any];
          return !!n2 && (s(r2.legacy || n2.version === t2.version, "Cannot mix different versions of joi schemas"), true);
        }, t2.isValues = function(e3) {
          return e3[t2.symbols.values];
        }, t2.limit = function(e3) {
          return Number.isSafeInteger(e3) && e3 >= 0;
        }, t2.preferences = function(e3, s2) {
          o = o || r(6914), e3 = e3 || {}, s2 = s2 || {};
          const n2 = Object.assign({}, e3, s2);
          return s2.errors && e3.errors && (n2.errors = Object.assign({}, e3.errors, s2.errors), n2.errors.wrap = Object.assign({}, e3.errors.wrap, s2.errors.wrap)), s2.messages && (n2.messages = o.compile(s2.messages, e3.messages)), delete n2[t2.symbols.prefs], n2;
        }, t2.tryWithPath = function(e3, t3, r2 = {}) {
          try {
            return e3();
          } catch (e4) {
            throw e4.path !== void 0 ? e4.path = t3 + "." + e4.path : e4.path = t3, r2.append && (e4.message = "".concat(e4.message, " (").concat(e4.path, ")")), e4;
          }
        }, t2.validateArg = function(e3, r2, { assert: s2, message: n2 }) {
          if (t2.isSchema(s2)) {
            const t3 = s2.validate(e3);
            if (!t3.error)
              return;
            return t3.error.message;
          }
          if (!s2(e3))
            return r2 ? "".concat(r2, " ").concat(n2) : n2;
        }, t2.verifyFlat = function(e3, t3) {
          for (const r2 of e3)
            s(!Array.isArray(r2), "Method no longer accepts array arguments:", t3);
        };
      }, 3292: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8160), a = r(6133), o = {};
        t2.schema = function(e3, t3, r2 = {}) {
          n.assertOptions(r2, ["appendPath", "override"]);
          try {
            return o.schema(e3, t3, r2);
          } catch (e4) {
            throw r2.appendPath && e4.path !== void 0 && (e4.message = "".concat(e4.message, " (").concat(e4.path, ")")), e4;
          }
        }, o.schema = function(e3, t3, r2) {
          s(t3 !== void 0, "Invalid undefined schema"), Array.isArray(t3) && (s(t3.length, "Invalid empty array schema"), t3.length === 1 && (t3 = t3[0]));
          const a2 = (t4, ...s2) => r2.override !== false ? t4.valid(e3.override, ...s2) : t4.valid(...s2);
          if (o.simple(t3))
            return a2(e3, t3);
          if (typeof t3 == "function")
            return e3.custom(t3);
          if (s(typeof t3 == "object", "Invalid schema content:", typeof t3), n.isResolvable(t3))
            return a2(e3, t3);
          if (n.isSchema(t3))
            return t3;
          if (Array.isArray(t3)) {
            for (const r3 of t3)
              if (!o.simple(r3))
                return e3.alternatives().try(...t3);
            return a2(e3, ...t3);
          }
          return t3 instanceof RegExp ? e3.string().regex(t3) : t3 instanceof Date ? a2(e3.date(), t3) : (s(Object.getPrototypeOf(t3) === Object.getPrototypeOf({}), "Schema can only contain plain objects"), e3.object().keys(t3));
        }, t2.ref = function(e3, t3) {
          return a.isRef(e3) ? e3 : a.create(e3, t3);
        }, t2.compile = function(e3, r2, a2 = {}) {
          n.assertOptions(a2, ["legacy"]);
          const i = r2 && r2[n.symbols.any];
          if (i)
            return s(a2.legacy || i.version === n.version, "Cannot mix different versions of joi schemas:", i.version, n.version), r2;
          if (typeof r2 != "object" || !a2.legacy)
            return t2.schema(e3, r2, { appendPath: true });
          const l = o.walk(r2);
          return l ? l.compile(l.root, r2) : t2.schema(e3, r2, { appendPath: true });
        }, o.walk = function(e3) {
          if (typeof e3 != "object")
            return null;
          if (Array.isArray(e3)) {
            for (const t4 of e3) {
              const e4 = o.walk(t4);
              if (e4)
                return e4;
            }
            return null;
          }
          const t3 = e3[n.symbols.any];
          if (t3)
            return { root: e3[t3.root], compile: t3.compile };
          s(Object.getPrototypeOf(e3) === Object.getPrototypeOf({}), "Schema can only contain plain objects");
          for (const t4 in e3) {
            const r2 = o.walk(e3[t4]);
            if (r2)
              return r2;
          }
          return null;
        }, o.simple = function(e3) {
          return e3 === null || ["boolean", "string", "number"].includes(typeof e3);
        }, t2.when = function(e3, r2, i) {
          if (i === void 0 && (s(r2 && typeof r2 == "object", "Missing options"), i = r2, r2 = a.create(".")), Array.isArray(i) && (i = { switch: i }), n.assertOptions(i, ["is", "not", "then", "otherwise", "switch", "break"]), n.isSchema(r2))
            return s(i.is === void 0, '"is" can not be used with a schema condition'), s(i.not === void 0, '"not" can not be used with a schema condition'), s(i.switch === void 0, '"switch" can not be used with a schema condition'), o.condition(e3, { is: r2, then: i.then, otherwise: i.otherwise, break: i.break });
          if (s(a.isRef(r2) || typeof r2 == "string", "Invalid condition:", r2), s(i.not === void 0 || i.is === void 0, 'Cannot combine "is" with "not"'), i.switch === void 0) {
            let l2 = i;
            i.not !== void 0 && (l2 = { is: i.not, then: i.otherwise, otherwise: i.then, break: i.break });
            let c = l2.is !== void 0 ? e3.$_compile(l2.is) : e3.$_root.invalid(null, false, 0, "").required();
            return s(l2.then !== void 0 || l2.otherwise !== void 0, 'options must have at least one of "then", "otherwise", or "switch"'), s(l2.break === void 0 || l2.then === void 0 || l2.otherwise === void 0, "Cannot specify then, otherwise, and break all together"), i.is === void 0 || a.isRef(i.is) || n.isSchema(i.is) || (c = c.required()), o.condition(e3, { ref: t2.ref(r2), is: c, then: l2.then, otherwise: l2.otherwise, break: l2.break });
          }
          s(Array.isArray(i.switch), '"switch" must be an array'), s(i.is === void 0, 'Cannot combine "switch" with "is"'), s(i.not === void 0, 'Cannot combine "switch" with "not"'), s(i.then === void 0, 'Cannot combine "switch" with "then"');
          const l = { ref: t2.ref(r2), switch: [], break: i.break };
          for (let t3 = 0; t3 < i.switch.length; ++t3) {
            const r3 = i.switch[t3], o2 = t3 === i.switch.length - 1;
            n.assertOptions(r3, o2 ? ["is", "then", "otherwise"] : ["is", "then"]), s(r3.is !== void 0, 'Switch statement missing "is"'), s(r3.then !== void 0, 'Switch statement missing "then"');
            const c = { is: e3.$_compile(r3.is), then: e3.$_compile(r3.then) };
            if (a.isRef(r3.is) || n.isSchema(r3.is) || (c.is = c.is.required()), o2) {
              s(i.otherwise === void 0 || r3.otherwise === void 0, 'Cannot specify "otherwise" inside and outside a "switch"');
              const t4 = i.otherwise !== void 0 ? i.otherwise : r3.otherwise;
              t4 !== void 0 && (s(l.break === void 0, "Cannot specify both otherwise and break"), c.otherwise = e3.$_compile(t4));
            }
            l.switch.push(c);
          }
          return l;
        }, o.condition = function(e3, t3) {
          for (const r2 of ["then", "otherwise"])
            t3[r2] === void 0 ? delete t3[r2] : t3[r2] = e3.$_compile(t3[r2]);
          return t3;
        };
      }, 6354: (e2, t2, r) => {
        "use strict";
        const s = r(5688), n = r(8160), a = r(3328);
        t2.Report = class {
          constructor(e3, r2, s2, n2, a2, o, i) {
            if (this.code = e3, this.flags = n2, this.messages = a2, this.path = o.path, this.prefs = i, this.state = o, this.value = r2, this.message = null, this.template = null, this.local = s2 || {}, this.local.label = t2.label(this.flags, this.state, this.prefs, this.messages), this.value === void 0 || this.local.hasOwnProperty("value") || (this.local.value = this.value), this.path.length) {
              const e4 = this.path[this.path.length - 1];
              typeof e4 != "object" && (this.local.key = e4);
            }
          }
          _setTemplate(e3) {
            if (this.template = e3, !this.flags.label && this.path.length === 0) {
              const e4 = this._template(this.template, "root");
              e4 && (this.local.label = e4);
            }
          }
          toString() {
            if (this.message)
              return this.message;
            const e3 = this.code;
            if (!this.prefs.errors.render)
              return this.code;
            const t3 = this._template(this.template) || this._template(this.prefs.messages) || this._template(this.messages);
            return t3 === void 0 ? 'Error code "'.concat(e3, '" is not defined, your custom type is missing the correct messages definition') : (this.message = t3.render(this.value, this.state, this.prefs, this.local, { errors: this.prefs.errors, messages: [this.prefs.messages, this.messages] }), this.prefs.errors.label || (this.message = this.message.replace(/^"" /, "").trim()), this.message);
          }
          _template(e3, r2) {
            return t2.template(this.value, e3, r2 || this.code, this.state, this.prefs);
          }
        }, t2.path = function(e3) {
          let t3 = "";
          for (const r2 of e3)
            typeof r2 != "object" && (typeof r2 == "string" ? (t3 && (t3 += "."), t3 += r2) : t3 += "[".concat(r2, "]"));
          return t3;
        }, t2.template = function(e3, t3, r2, s2, o) {
          if (!t3)
            return;
          if (a.isTemplate(t3))
            return r2 !== "root" ? t3 : null;
          let i = o.errors.language;
          if (n.isResolvable(i) && (i = i.resolve(e3, s2, o)), i && t3[i]) {
            if (t3[i][r2] !== void 0)
              return t3[i][r2];
            if (t3[i]["*"] !== void 0)
              return t3[i]["*"];
          }
          return t3[r2] ? t3[r2] : t3["*"];
        }, t2.label = function(e3, r2, s2, n2) {
          if (e3.label)
            return e3.label;
          if (!s2.errors.label)
            return "";
          let a2 = r2.path;
          s2.errors.label === "key" && r2.path.length > 1 && (a2 = r2.path.slice(-1));
          return t2.path(a2) || t2.template(null, s2.messages, "root", r2, s2) || n2 && t2.template(null, n2, "root", r2, s2) || "value";
        }, t2.process = function(e3, r2, s2) {
          if (!e3)
            return null;
          const { override: n2, message: a2, details: o } = t2.details(e3);
          if (n2)
            return n2;
          if (s2.errors.stack)
            return new t2.ValidationError(a2, o, r2);
          const i = Error.stackTraceLimit;
          Error.stackTraceLimit = 0;
          const l = new t2.ValidationError(a2, o, r2);
          return Error.stackTraceLimit = i, l;
        }, t2.details = function(e3, t3 = {}) {
          let r2 = [];
          const s2 = [];
          for (const n2 of e3) {
            if (n2 instanceof Error) {
              if (t3.override !== false)
                return { override: n2 };
              const e5 = n2.toString();
              r2.push(e5), s2.push({ message: e5, type: "override", context: { error: n2 } });
              continue;
            }
            const e4 = n2.toString();
            r2.push(e4), s2.push({ message: e4, path: n2.path.filter((e5) => typeof e5 != "object"), type: n2.code, context: n2.local });
          }
          return r2.length > 1 && (r2 = [...new Set(r2)]), { message: r2.join(". "), details: s2 };
        }, t2.ValidationError = class extends Error {
          constructor(e3, t3, r2) {
            super(e3), this._original = r2, this.details = t3;
          }
          static isError(e3) {
            return e3 instanceof t2.ValidationError;
          }
        }, t2.ValidationError.prototype.isJoi = true, t2.ValidationError.prototype.name = "ValidationError", t2.ValidationError.prototype.annotate = s.error;
      }, 8901: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(8160), o = r(6914), i = {};
        t2.type = function(e3, t3) {
          const r2 = Object.getPrototypeOf(e3), l = n(r2), c = e3._assign(Object.create(l)), u = Object.assign({}, t3);
          delete u.base, l._definition = u;
          const f = r2._definition || {};
          u.messages = o.merge(f.messages, u.messages), u.properties = Object.assign({}, f.properties, u.properties), c.type = u.type, u.flags = Object.assign({}, f.flags, u.flags);
          const m = Object.assign({}, f.terms);
          if (u.terms)
            for (const e4 in u.terms) {
              const t4 = u.terms[e4];
              s(c.$_terms[e4] === void 0, "Invalid term override for", u.type, e4), c.$_terms[e4] = t4.init, m[e4] = t4;
            }
          u.terms = m, u.args || (u.args = f.args), u.prepare = i.prepare(u.prepare, f.prepare), u.coerce && (typeof u.coerce == "function" && (u.coerce = { method: u.coerce }), u.coerce.from && !Array.isArray(u.coerce.from) && (u.coerce = { method: u.coerce.method, from: [].concat(u.coerce.from) })), u.coerce = i.coerce(u.coerce, f.coerce), u.validate = i.validate(u.validate, f.validate);
          const h = Object.assign({}, f.rules);
          if (u.rules)
            for (const e4 in u.rules) {
              const t4 = u.rules[e4];
              s(typeof t4 == "object", "Invalid rule definition for", u.type, e4);
              let r3 = t4.method;
              if (r3 === void 0 && (r3 = function() {
                return this.$_addRule(e4);
              }), r3 && (s(!l[e4], "Rule conflict in", u.type, e4), l[e4] = r3), s(!h[e4], "Rule conflict in", u.type, e4), h[e4] = t4, t4.alias) {
                const e5 = [].concat(t4.alias);
                for (const r4 of e5)
                  l[r4] = t4.method;
              }
              t4.args && (t4.argsByName = new Map(), t4.args = t4.args.map((e5) => (typeof e5 == "string" && (e5 = { name: e5 }), s(!t4.argsByName.has(e5.name), "Duplicated argument name", e5.name), a.isSchema(e5.assert) && (e5.assert = e5.assert.strict().label(e5.name)), t4.argsByName.set(e5.name, e5), e5)));
            }
          u.rules = h;
          const d = Object.assign({}, f.modifiers);
          if (u.modifiers)
            for (const e4 in u.modifiers) {
              s(!l[e4], "Rule conflict in", u.type, e4);
              const t4 = u.modifiers[e4];
              s(typeof t4 == "function", "Invalid modifier definition for", u.type, e4);
              const r3 = function(t5) {
                return this.rule({ [e4]: t5 });
              };
              l[e4] = r3, d[e4] = t4;
            }
          if (u.modifiers = d, u.overrides) {
            l._super = r2, c.$_super = {};
            for (const e4 in u.overrides)
              s(r2[e4], "Cannot override missing", e4), u.overrides[e4][a.symbols.parent] = r2[e4], c.$_super[e4] = r2[e4].bind(c);
            Object.assign(l, u.overrides);
          }
          u.cast = Object.assign({}, f.cast, u.cast);
          const p = Object.assign({}, f.manifest, u.manifest);
          return p.build = i.build(u.manifest && u.manifest.build, f.manifest && f.manifest.build), u.manifest = p, u.rebuild = i.rebuild(u.rebuild, f.rebuild), c;
        }, i.build = function(e3, t3) {
          return e3 && t3 ? function(r2, s2) {
            return t3(e3(r2, s2), s2);
          } : e3 || t3;
        }, i.coerce = function(e3, t3) {
          return e3 && t3 ? { from: e3.from && t3.from ? [...new Set([...e3.from, ...t3.from])] : null, method(r2, s2) {
            let n2;
            if ((!t3.from || t3.from.includes(typeof r2)) && (n2 = t3.method(r2, s2), n2)) {
              if (n2.errors || n2.value === void 0)
                return n2;
              r2 = n2.value;
            }
            if (!e3.from || e3.from.includes(typeof r2)) {
              const t4 = e3.method(r2, s2);
              if (t4)
                return t4;
            }
            return n2;
          } } : e3 || t3;
        }, i.prepare = function(e3, t3) {
          return e3 && t3 ? function(r2, s2) {
            const n2 = e3(r2, s2);
            if (n2) {
              if (n2.errors || n2.value === void 0)
                return n2;
              r2 = n2.value;
            }
            return t3(r2, s2) || n2;
          } : e3 || t3;
        }, i.rebuild = function(e3, t3) {
          return e3 && t3 ? function(r2) {
            t3(r2), e3(r2);
          } : e3 || t3;
        }, i.validate = function(e3, t3) {
          return e3 && t3 ? function(r2, s2) {
            const n2 = t3(r2, s2);
            if (n2) {
              if (n2.errors && (!Array.isArray(n2.errors) || n2.errors.length))
                return n2;
              r2 = n2.value;
            }
            return e3(r2, s2) || n2;
          } : e3 || t3;
        };
      }, 5107: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(8652), o = r(8160), i = r(3292), l = r(6354), c = r(8901), u = r(9708), f = r(6133), m = r(3328), h = r(1152);
        let d;
        const p = { types: { alternatives: r(4946), any: r(8068), array: r(546), boolean: r(4937), date: r(7500), function: r(390), link: r(8785), number: r(3832), object: r(8966), string: r(7417), symbol: r(8826) }, aliases: { alt: "alternatives", bool: "boolean", func: "function" }, root: function() {
          const e3 = { _types: new Set(Object.keys(p.types)) };
          for (const t3 of e3._types)
            e3[t3] = function(...e4) {
              return s(!e4.length || ["alternatives", "link", "object"].includes(t3), "The", t3, "type does not allow arguments"), p.generate(this, p.types[t3], e4);
            };
          for (const t3 of ["allow", "custom", "disallow", "equal", "exist", "forbidden", "invalid", "not", "only", "optional", "options", "prefs", "preferences", "required", "strip", "valid", "when"])
            e3[t3] = function(...e4) {
              return this.any()[t3](...e4);
            };
          Object.assign(e3, p.methods);
          for (const t3 in p.aliases) {
            const r2 = p.aliases[t3];
            e3[t3] = e3[r2];
          }
          return e3.x = e3.expression, h.setup && h.setup(e3), e3;
        } };
        p.methods = { ValidationError: l.ValidationError, version: o.version, cache: a.provider, assert(e3, t3, ...r2) {
          p.assert(e3, t3, true, r2);
        }, attempt: (e3, t3, ...r2) => p.assert(e3, t3, false, r2), build(e3) {
          return s(typeof u.build == "function", "Manifest functionality disabled"), u.build(this, e3);
        }, checkPreferences(e3) {
          o.checkPreferences(e3);
        }, compile(e3, t3) {
          return i.compile(this, e3, t3);
        }, defaults(e3) {
          s(typeof e3 == "function", "modifier must be a function");
          const t3 = Object.assign({}, this);
          for (const r2 of t3._types) {
            const n2 = e3(t3[r2]());
            s(o.isSchema(n2), "modifier must return a valid schema object"), t3[r2] = function(...e4) {
              return p.generate(this, n2, e4);
            };
          }
          return t3;
        }, expression: (...e3) => new m(...e3), extend(...e3) {
          o.verifyFlat(e3, "extend"), d = d || r(3378), s(e3.length, "You need to provide at least one extension"), this.assert(e3, d.extensions);
          const t3 = Object.assign({}, this);
          t3._types = new Set(t3._types);
          for (let r2 of e3) {
            typeof r2 == "function" && (r2 = r2(t3)), this.assert(r2, d.extension);
            const e4 = p.expandExtension(r2, t3);
            for (const r3 of e4) {
              s(t3[r3.type] === void 0 || t3._types.has(r3.type), "Cannot override name", r3.type);
              const e5 = r3.base || this.any(), n2 = c.type(e5, r3);
              t3._types.add(r3.type), t3[r3.type] = function(...e6) {
                return p.generate(this, n2, e6);
              };
            }
          }
          return t3;
        }, isError: l.ValidationError.isError, isExpression: m.isTemplate, isRef: f.isRef, isSchema: o.isSchema, in: (...e3) => f.in(...e3), override: o.symbols.override, ref: (...e3) => f.create(...e3), types() {
          const e3 = {};
          for (const t3 of this._types)
            e3[t3] = this[t3]();
          for (const t3 in p.aliases)
            e3[t3] = this[t3]();
          return e3;
        } }, p.assert = function(e3, t3, r2, s2) {
          const a2 = s2[0] instanceof Error || typeof s2[0] == "string" ? s2[0] : null, i2 = a2 ? s2[1] : s2[0], c2 = t3.validate(e3, o.preferences({ errors: { stack: true } }, i2 || {}));
          let u2 = c2.error;
          if (!u2)
            return c2.value;
          if (a2 instanceof Error)
            throw a2;
          const f2 = r2 && typeof u2.annotate == "function" ? u2.annotate() : u2.message;
          throw u2 instanceof l.ValidationError == 0 && (u2 = n(u2)), u2.message = a2 ? "".concat(a2, " ").concat(f2) : f2, u2;
        }, p.generate = function(e3, t3, r2) {
          return s(e3, "Must be invoked on a Joi instance."), t3.$_root = e3, t3._definition.args && r2.length ? t3._definition.args(t3, ...r2) : t3;
        }, p.expandExtension = function(e3, t3) {
          if (typeof e3.type == "string")
            return [e3];
          const r2 = [];
          for (const s2 of t3._types)
            if (e3.type.test(s2)) {
              const n2 = Object.assign({}, e3);
              n2.type = s2, n2.base = t3[s2](), r2.push(n2);
            }
          return r2;
        }, e2.exports = p.root();
      }, 6914: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(3328);
        t2.compile = function(e3, t3) {
          if (typeof e3 == "string")
            return s(!t3, "Cannot set single message string"), new a(e3);
          if (a.isTemplate(e3))
            return s(!t3, "Cannot set single message template"), e3;
          s(typeof e3 == "object" && !Array.isArray(e3), "Invalid message options"), t3 = t3 ? n(t3) : {};
          for (let r2 in e3) {
            const n2 = e3[r2];
            if (r2 === "root" || a.isTemplate(n2)) {
              t3[r2] = n2;
              continue;
            }
            if (typeof n2 == "string") {
              t3[r2] = new a(n2);
              continue;
            }
            s(typeof n2 == "object" && !Array.isArray(n2), "Invalid message for", r2);
            const o = r2;
            for (r2 in t3[o] = t3[o] || {}, n2) {
              const e4 = n2[r2];
              r2 === "root" || a.isTemplate(e4) ? t3[o][r2] = e4 : (s(typeof e4 == "string", "Invalid message for", r2, "in", o), t3[o][r2] = new a(e4));
            }
          }
          return t3;
        }, t2.decompile = function(e3) {
          const t3 = {};
          for (let r2 in e3) {
            const s2 = e3[r2];
            if (r2 === "root") {
              t3.root = s2;
              continue;
            }
            if (a.isTemplate(s2)) {
              t3[r2] = s2.describe({ compact: true });
              continue;
            }
            const n2 = r2;
            for (r2 in t3[n2] = {}, s2) {
              const e4 = s2[r2];
              r2 !== "root" ? t3[n2][r2] = e4.describe({ compact: true }) : t3[n2].root = e4;
            }
          }
          return t3;
        }, t2.merge = function(e3, r2) {
          if (!e3)
            return t2.compile(r2);
          if (!r2)
            return e3;
          if (typeof r2 == "string")
            return new a(r2);
          if (a.isTemplate(r2))
            return r2;
          const o = n(e3);
          for (let e4 in r2) {
            const t3 = r2[e4];
            if (e4 === "root" || a.isTemplate(t3)) {
              o[e4] = t3;
              continue;
            }
            if (typeof t3 == "string") {
              o[e4] = new a(t3);
              continue;
            }
            s(typeof t3 == "object" && !Array.isArray(t3), "Invalid message for", e4);
            const n2 = e4;
            for (e4 in o[n2] = o[n2] || {}, t3) {
              const r3 = t3[e4];
              e4 === "root" || a.isTemplate(r3) ? o[n2][e4] = r3 : (s(typeof r3 == "string", "Invalid message for", e4, "in", n2), o[n2][e4] = new a(r3));
            }
          }
          return o;
        };
      }, 2294: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(8160), l = r(6133), c = {};
        t2.Ids = c.Ids = class {
          constructor() {
            this._byId = new Map(), this._byKey = new Map(), this._schemaChain = false;
          }
          clone() {
            const e3 = new c.Ids();
            return e3._byId = new Map(this._byId), e3._byKey = new Map(this._byKey), e3._schemaChain = this._schemaChain, e3;
          }
          concat(e3) {
            e3._schemaChain && (this._schemaChain = true);
            for (const [t3, r2] of e3._byId.entries())
              o(!this._byKey.has(t3), "Schema id conflicts with existing key:", t3), this._byId.set(t3, r2);
            for (const [t3, r2] of e3._byKey.entries())
              o(!this._byId.has(t3), "Schema key conflicts with existing id:", t3), this._byKey.set(t3, r2);
          }
          fork(e3, t3, r2) {
            const s2 = this._collect(e3);
            s2.push({ schema: r2 });
            const n2 = s2.shift();
            let a2 = { id: n2.id, schema: t3(n2.schema) };
            o(i.isSchema(a2.schema), "adjuster function failed to return a joi schema type");
            for (const e4 of s2)
              a2 = { id: e4.id, schema: c.fork(e4.schema, a2.id, a2.schema) };
            return a2.schema;
          }
          labels(e3, t3 = []) {
            const r2 = e3[0], s2 = this._get(r2);
            if (!s2)
              return [...t3, ...e3].join(".");
            const n2 = e3.slice(1);
            return t3 = [...t3, s2.schema._flags.label || r2], n2.length ? s2.schema._ids.labels(n2, t3) : t3.join(".");
          }
          reach(e3, t3 = []) {
            const r2 = e3[0], s2 = this._get(r2);
            o(s2, "Schema does not contain path", [...t3, ...e3].join("."));
            const n2 = e3.slice(1);
            return n2.length ? s2.schema._ids.reach(n2, [...t3, r2]) : s2.schema;
          }
          register(e3, { key: t3 } = {}) {
            if (!e3 || !i.isSchema(e3))
              return;
            (e3.$_property("schemaChain") || e3._ids._schemaChain) && (this._schemaChain = true);
            const r2 = e3._flags.id;
            if (r2) {
              const t4 = this._byId.get(r2);
              o(!t4 || t4.schema === e3, "Cannot add different schemas with the same id:", r2), o(!this._byKey.has(r2), "Schema id conflicts with existing key:", r2), this._byId.set(r2, { schema: e3, id: r2 });
            }
            t3 && (o(!this._byKey.has(t3), "Schema already contains key:", t3), o(!this._byId.has(t3), "Schema key conflicts with existing id:", t3), this._byKey.set(t3, { schema: e3, id: t3 }));
          }
          reset() {
            this._byId = new Map(), this._byKey = new Map(), this._schemaChain = false;
          }
          _collect(e3, t3 = [], r2 = []) {
            const s2 = e3[0], n2 = this._get(s2);
            o(n2, "Schema does not contain path", [...t3, ...e3].join(".")), r2 = [n2, ...r2];
            const a2 = e3.slice(1);
            return a2.length ? n2.schema._ids._collect(a2, [...t3, s2], r2) : r2;
          }
          _get(e3) {
            return this._byId.get(e3) || this._byKey.get(e3);
          }
        }, c.fork = function(e3, r2, s2) {
          const n2 = t2.schema(e3, { each: (e4, { key: t3 }) => {
            if (r2 === (e4._flags.id || t3))
              return s2;
          }, ref: false });
          return n2 ? n2.$_mutateRebuild() : e3;
        }, t2.schema = function(e3, t3) {
          let r2;
          for (const s2 in e3._flags) {
            if (s2[0] === "_")
              continue;
            const n2 = c.scan(e3._flags[s2], { source: "flags", name: s2 }, t3);
            n2 !== void 0 && (r2 = r2 || e3.clone(), r2._flags[s2] = n2);
          }
          for (let s2 = 0; s2 < e3._rules.length; ++s2) {
            const n2 = e3._rules[s2], a2 = c.scan(n2.args, { source: "rules", name: n2.name }, t3);
            if (a2 !== void 0) {
              r2 = r2 || e3.clone();
              const t4 = Object.assign({}, n2);
              t4.args = a2, r2._rules[s2] = t4, r2._singleRules.get(n2.name) === n2 && r2._singleRules.set(n2.name, t4);
            }
          }
          for (const s2 in e3.$_terms) {
            if (s2[0] === "_")
              continue;
            const n2 = c.scan(e3.$_terms[s2], { source: "terms", name: s2 }, t3);
            n2 !== void 0 && (r2 = r2 || e3.clone(), r2.$_terms[s2] = n2);
          }
          return r2;
        }, c.scan = function(e3, t3, r2, s2, a2) {
          const o2 = s2 || [];
          if (e3 === null || typeof e3 != "object")
            return;
          let u;
          if (Array.isArray(e3)) {
            for (let s3 = 0; s3 < e3.length; ++s3) {
              const n2 = t3.source === "terms" && t3.name === "keys" && e3[s3].key, a3 = c.scan(e3[s3], t3, r2, [s3, ...o2], n2);
              a3 !== void 0 && (u = u || e3.slice(), u[s3] = a3);
            }
            return u;
          }
          if (r2.schema !== false && i.isSchema(e3) || r2.ref !== false && l.isRef(e3)) {
            const s3 = r2.each(e3, n(n({}, t3), {}, { path: o2, key: a2 }));
            if (s3 === e3)
              return;
            return s3;
          }
          for (const s3 in e3) {
            if (s3[0] === "_")
              continue;
            const n2 = c.scan(e3[s3], t3, r2, [s3, ...o2], a2);
            n2 !== void 0 && (u = u || Object.assign({}, e3), u[s3] = n2);
          }
          return u;
        };
      }, 6133: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(8571), l = r(9621), c = r(8160);
        let u;
        const f = { symbol: Symbol("ref"), defaults: { adjust: null, in: false, iterables: null, map: null, separator: ".", type: "value" } };
        t2.create = function(e3, t3 = {}) {
          o(typeof e3 == "string", "Invalid reference key:", e3), c.assertOptions(t3, ["adjust", "ancestor", "in", "iterables", "map", "prefix", "render", "separator"]), o(!t3.prefix || typeof t3.prefix == "object", "options.prefix must be of type object");
          const r2 = Object.assign({}, f.defaults, t3);
          delete r2.prefix;
          const s2 = r2.separator, n2 = f.context(e3, s2, t3.prefix);
          if (r2.type = n2.type, e3 = n2.key, r2.type === "value")
            if (n2.root && (o(!s2 || e3[0] !== s2, "Cannot specify relative path with root prefix"), r2.ancestor = "root", e3 || (e3 = null)), s2 && s2 === e3)
              e3 = null, r2.ancestor = 0;
            else if (r2.ancestor !== void 0)
              o(!s2 || !e3 || e3[0] !== s2, "Cannot combine prefix with ancestor option");
            else {
              const [t4, n3] = f.ancestor(e3, s2);
              n3 && (e3 = e3.slice(n3)) === "" && (e3 = null), r2.ancestor = t4;
            }
          return r2.path = s2 ? e3 === null ? [] : e3.split(s2) : [e3], new f.Ref(r2);
        }, t2.in = function(e3, r2 = {}) {
          return t2.create(e3, n(n({}, r2), {}, { in: true }));
        }, t2.isRef = function(e3) {
          return !!e3 && !!e3[c.symbols.ref];
        }, f.Ref = class {
          constructor(e3) {
            o(typeof e3 == "object", "Invalid reference construction"), c.assertOptions(e3, ["adjust", "ancestor", "in", "iterables", "map", "path", "render", "separator", "type", "depth", "key", "root", "display"]), o([false, void 0].includes(e3.separator) || typeof e3.separator == "string" && e3.separator.length === 1, "Invalid separator"), o(!e3.adjust || typeof e3.adjust == "function", "options.adjust must be a function"), o(!e3.map || Array.isArray(e3.map), "options.map must be an array"), o(!e3.map || !e3.adjust, "Cannot set both map and adjust options"), Object.assign(this, f.defaults, e3), o(this.type === "value" || this.ancestor === void 0, "Non-value references cannot reference ancestors"), Array.isArray(this.map) && (this.map = new Map(this.map)), this.depth = this.path.length, this.key = this.path.length ? this.path.join(this.separator) : null, this.root = this.path[0], this.updateDisplay();
          }
          resolve(e3, t3, r2, s2, n2 = {}) {
            return o(!this.in || n2.in, "Invalid in() reference usage"), this.type === "global" ? this._resolve(r2.context, t3, n2) : this.type === "local" ? this._resolve(s2, t3, n2) : this.ancestor ? this.ancestor === "root" ? this._resolve(t3.ancestors[t3.ancestors.length - 1], t3, n2) : (o(this.ancestor <= t3.ancestors.length, "Invalid reference exceeds the schema root:", this.display), this._resolve(t3.ancestors[this.ancestor - 1], t3, n2)) : this._resolve(e3, t3, n2);
          }
          _resolve(e3, t3, r2) {
            let s2;
            if (this.type === "value" && t3.mainstay.shadow && r2.shadow !== false && (s2 = t3.mainstay.shadow.get(this.absolute(t3))), s2 === void 0 && (s2 = l(e3, this.path, { iterables: this.iterables, functions: true })), this.adjust && (s2 = this.adjust(s2)), this.map) {
              const e4 = this.map.get(s2);
              e4 !== void 0 && (s2 = e4);
            }
            return t3.mainstay && t3.mainstay.tracer.resolve(t3, this, s2), s2;
          }
          toString() {
            return this.display;
          }
          absolute(e3) {
            return [...e3.path.slice(0, -this.ancestor), ...this.path];
          }
          clone() {
            return new f.Ref(this);
          }
          describe() {
            const e3 = { path: this.path };
            this.type !== "value" && (e3.type = this.type), this.separator !== "." && (e3.separator = this.separator), this.type === "value" && this.ancestor !== 1 && (e3.ancestor = this.ancestor), this.map && (e3.map = [...this.map]);
            for (const t3 of ["adjust", "iterables", "render"])
              this[t3] !== null && this[t3] !== void 0 && (e3[t3] = this[t3]);
            return this.in !== false && (e3.in = true), { ref: e3 };
          }
          updateDisplay() {
            const e3 = this.key !== null ? this.key : "";
            if (this.type !== "value")
              return void (this.display = "ref:".concat(this.type, ":").concat(e3));
            if (!this.separator)
              return void (this.display = "ref:".concat(e3));
            if (!this.ancestor)
              return void (this.display = "ref:".concat(this.separator).concat(e3));
            if (this.ancestor === "root")
              return void (this.display = "ref:root:".concat(e3));
            if (this.ancestor === 1)
              return void (this.display = "ref:".concat(e3 || ".."));
            const t3 = new Array(this.ancestor + 1).fill(this.separator).join("");
            this.display = "ref:".concat(t3).concat(e3 || "");
          }
        }, f.Ref.prototype[c.symbols.ref] = true, t2.build = function(e3) {
          return (e3 = Object.assign({}, f.defaults, e3)).type === "value" && e3.ancestor === void 0 && (e3.ancestor = 1), new f.Ref(e3);
        }, f.context = function(e3, t3, r2 = {}) {
          if (e3 = e3.trim(), r2) {
            const s2 = r2.global === void 0 ? "$" : r2.global;
            if (s2 !== t3 && e3.startsWith(s2))
              return { key: e3.slice(s2.length), type: "global" };
            const n2 = r2.local === void 0 ? "#" : r2.local;
            if (n2 !== t3 && e3.startsWith(n2))
              return { key: e3.slice(n2.length), type: "local" };
            const a2 = r2.root === void 0 ? "/" : r2.root;
            if (a2 !== t3 && e3.startsWith(a2))
              return { key: e3.slice(a2.length), type: "value", root: true };
          }
          return { key: e3, type: "value" };
        }, f.ancestor = function(e3, t3) {
          if (!t3)
            return [1, 0];
          if (e3[0] !== t3)
            return [1, 0];
          if (e3[1] !== t3)
            return [0, 1];
          let r2 = 2;
          for (; e3[r2] === t3; )
            ++r2;
          return [r2 - 1, r2];
        }, t2.toSibling = 0, t2.toParent = 1, t2.Manager = class {
          constructor() {
            this.refs = [];
          }
          register(e3, s2) {
            if (e3)
              if (s2 = s2 === void 0 ? t2.toParent : s2, Array.isArray(e3))
                for (const t3 of e3)
                  this.register(t3, s2);
              else if (c.isSchema(e3))
                for (const t3 of e3._refs.refs)
                  t3.ancestor - s2 >= 0 && this.refs.push({ ancestor: t3.ancestor - s2, root: t3.root });
              else
                t2.isRef(e3) && e3.type === "value" && e3.ancestor - s2 >= 0 && this.refs.push({ ancestor: e3.ancestor - s2, root: e3.root }), u = u || r(3328), u.isTemplate(e3) && this.register(e3.refs(), s2);
          }
          get length() {
            return this.refs.length;
          }
          clone() {
            const e3 = new t2.Manager();
            return e3.refs = i(this.refs), e3;
          }
          reset() {
            this.refs = [];
          }
          roots() {
            return this.refs.filter((e3) => !e3.ancestor).map((e3) => e3.root);
          }
        };
      }, 3378: (e2, t2, r) => {
        "use strict";
        const s = r(5107), n = {};
        n.wrap = s.string().min(1).max(2).allow(false), t2.preferences = s.object({ allowUnknown: s.boolean(), abortEarly: s.boolean(), artifacts: s.boolean(), cache: s.boolean(), context: s.object(), convert: s.boolean(), dateFormat: s.valid("date", "iso", "string", "time", "utc"), debug: s.boolean(), errors: { escapeHtml: s.boolean(), label: s.valid("path", "key", false), language: [s.string(), s.object().ref()], render: s.boolean(), stack: s.boolean(), wrap: { label: n.wrap, array: n.wrap, string: n.wrap } }, externals: s.boolean(), messages: s.object(), noDefaults: s.boolean(), nonEnumerables: s.boolean(), presence: s.valid("required", "optional", "forbidden"), skipFunctions: s.boolean(), stripUnknown: s.object({ arrays: s.boolean(), objects: s.boolean() }).or("arrays", "objects").allow(true, false), warnings: s.boolean() }).strict(), n.nameRx = /^[a-zA-Z0-9]\w*$/, n.rule = s.object({ alias: s.array().items(s.string().pattern(n.nameRx)).single(), args: s.array().items(s.string(), s.object({ name: s.string().pattern(n.nameRx).required(), ref: s.boolean(), assert: s.alternatives([s.function(), s.object().schema()]).conditional("ref", { is: true, then: s.required() }), normalize: s.function(), message: s.string().when("assert", { is: s.function(), then: s.required() }) })), convert: s.boolean(), manifest: s.boolean(), method: s.function().allow(false), multi: s.boolean(), validate: s.function() }), t2.extension = s.object({ type: s.alternatives([s.string(), s.object().regex()]).required(), args: s.function(), cast: s.object().pattern(n.nameRx, s.object({ from: s.function().maxArity(1).required(), to: s.function().minArity(1).maxArity(2).required() })), base: s.object().schema().when("type", { is: s.object().regex(), then: s.forbidden() }), coerce: [s.function().maxArity(3), s.object({ method: s.function().maxArity(3).required(), from: s.array().items(s.string()).single() })], flags: s.object().pattern(n.nameRx, s.object({ setter: s.string(), default: s.any() })), manifest: { build: s.function().arity(2) }, messages: [s.object(), s.string()], modifiers: s.object().pattern(n.nameRx, s.function().minArity(1).maxArity(2)), overrides: s.object().pattern(n.nameRx, s.function()), prepare: s.function().maxArity(3), rebuild: s.function().arity(1), rules: s.object().pattern(n.nameRx, n.rule), terms: s.object().pattern(n.nameRx, s.object({ init: s.array().allow(null).required(), manifest: s.object().pattern(/.+/, [s.valid("schema", "single"), s.object({ mapped: s.object({ from: s.string().required(), to: s.string().required() }).required() })]) })), validate: s.function().maxArity(3) }).strict(), t2.extensions = s.array().items(s.object(), s.function().arity(1)).strict(), n.desc = { buffer: s.object({ buffer: s.string() }), func: s.object({ function: s.function().required(), options: { literal: true } }), override: s.object({ override: true }), ref: s.object({ ref: s.object({ type: s.valid("value", "global", "local"), path: s.array().required(), separator: s.string().length(1).allow(false), ancestor: s.number().min(0).integer().allow("root"), map: s.array().items(s.array().length(2)).min(1), adjust: s.function(), iterables: s.boolean(), in: s.boolean(), render: s.boolean() }).required() }), regex: s.object({ regex: s.string().min(3) }), special: s.object({ special: s.valid("deep").required() }), template: s.object({ template: s.string().required(), options: s.object() }), value: s.object({ value: s.alternatives([s.object(), s.array()]).required() }) }, n.desc.entity = s.alternatives([s.array().items(s.link("...")), s.boolean(), s.function(), s.number(), s.string(), n.desc.buffer, n.desc.func, n.desc.ref, n.desc.regex, n.desc.special, n.desc.template, n.desc.value, s.link("/")]), n.desc.values = s.array().items(null, s.boolean(), s.function(), s.number().allow(1 / 0, -1 / 0), s.string().allow(""), s.symbol(), n.desc.buffer, n.desc.func, n.desc.override, n.desc.ref, n.desc.regex, n.desc.template, n.desc.value), n.desc.messages = s.object().pattern(/.+/, [s.string(), n.desc.template, s.object().pattern(/.+/, [s.string(), n.desc.template])]), t2.description = s.object({ type: s.string().required(), flags: s.object({ cast: s.string(), default: s.any(), description: s.string(), empty: s.link("/"), failover: n.desc.entity, id: s.string(), label: s.string(), only: true, presence: ["optional", "required", "forbidden"], result: ["raw", "strip"], strip: s.boolean(), unit: s.string() }).unknown(), preferences: { allowUnknown: s.boolean(), abortEarly: s.boolean(), artifacts: s.boolean(), cache: s.boolean(), convert: s.boolean(), dateFormat: ["date", "iso", "string", "time", "utc"], errors: { escapeHtml: s.boolean(), label: ["path", "key"], language: [s.string(), n.desc.ref], wrap: { label: n.wrap, array: n.wrap } }, externals: s.boolean(), messages: n.desc.messages, noDefaults: s.boolean(), nonEnumerables: s.boolean(), presence: ["required", "optional", "forbidden"], skipFunctions: s.boolean(), stripUnknown: s.object({ arrays: s.boolean(), objects: s.boolean() }).or("arrays", "objects").allow(true, false), warnings: s.boolean() }, allow: n.desc.values, invalid: n.desc.values, rules: s.array().min(1).items({ name: s.string().required(), args: s.object().min(1), keep: s.boolean(), message: [s.string(), n.desc.messages], warn: s.boolean() }), keys: s.object().pattern(/.*/, s.link("/")), link: n.desc.ref }).pattern(/^[a-z]\w*$/, s.any());
      }, 493: (e2, t2, r) => {
        "use strict";
        const s = r(8571), n = r(9621), a = r(8160), o = { value: Symbol("value") };
        e2.exports = o.State = class {
          constructor(e3, t3, r2) {
            this.path = e3, this.ancestors = t3, this.mainstay = r2.mainstay, this.schemas = r2.schemas, this.debug = null;
          }
          localize(e3, t3 = null, r2 = null) {
            const s2 = new o.State(e3, t3, this);
            return r2 && s2.schemas && (s2.schemas = [o.schemas(r2), ...s2.schemas]), s2;
          }
          nest(e3, t3) {
            const r2 = new o.State(this.path, this.ancestors, this);
            return r2.schemas = r2.schemas && [o.schemas(e3), ...r2.schemas], r2.debug = t3, r2;
          }
          shadow(e3, t3) {
            this.mainstay.shadow = this.mainstay.shadow || new o.Shadow(), this.mainstay.shadow.set(this.path, e3, t3);
          }
          snapshot() {
            this.mainstay.shadow && (this._snapshot = s(this.mainstay.shadow.node(this.path)));
          }
          restore() {
            this.mainstay.shadow && (this.mainstay.shadow.override(this.path, this._snapshot), this._snapshot = void 0);
          }
        }, o.schemas = function(e3) {
          return a.isSchema(e3) ? { schema: e3 } : e3;
        }, o.Shadow = class {
          constructor() {
            this._values = null;
          }
          set(e3, t3, r2) {
            if (!e3.length)
              return;
            if (r2 === "strip" && typeof e3[e3.length - 1] == "number")
              return;
            this._values = this._values || new Map();
            let s2 = this._values;
            for (let t4 = 0; t4 < e3.length; ++t4) {
              const r3 = e3[t4];
              let n2 = s2.get(r3);
              n2 || (n2 = new Map(), s2.set(r3, n2)), s2 = n2;
            }
            s2[o.value] = t3;
          }
          get(e3) {
            const t3 = this.node(e3);
            if (t3)
              return t3[o.value];
          }
          node(e3) {
            if (this._values)
              return n(this._values, e3, { iterables: true });
          }
          override(e3, t3) {
            if (!this._values)
              return;
            const r2 = e3.slice(0, -1), s2 = e3[e3.length - 1], a2 = n(this._values, r2, { iterables: true });
            t3 ? a2.set(s2, t3) : a2 && a2.delete(s2);
          }
        };
      }, 3328: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(8571), l = r(5277), c = r(1447), u = r(8160), f = r(6354), m = r(6133), h = { symbol: Symbol("template"), opens: new Array(1e3).join("\0"), closes: new Array(1e3).join(""), dateFormat: { date: Date.prototype.toDateString, iso: Date.prototype.toISOString, string: Date.prototype.toString, time: Date.prototype.toTimeString, utc: Date.prototype.toUTCString } };
        e2.exports = h.Template = class {
          constructor(e3, t3) {
            o(typeof e3 == "string", "Template source must be a string"), o(!e3.includes("\0") && !e3.includes(""), "Template source cannot contain reserved control characters"), this.source = e3, this.rendered = e3, this._template = null, this._settings = i(t3), this._parse();
          }
          _parse() {
            if (!this.source.includes("{"))
              return;
            const e3 = h.encode(this.source), t3 = h.split(e3);
            let r2 = false;
            const s2 = [], n2 = t3.shift();
            n2 && s2.push(n2);
            for (const e4 of t3) {
              const t4 = e4[0] !== "{", n3 = t4 ? "}" : "}}", a2 = e4.indexOf(n3);
              if (a2 === -1 || e4[1] === "{") {
                s2.push("{".concat(h.decode(e4)));
                continue;
              }
              let o2 = e4.slice(t4 ? 0 : 1, a2);
              const i2 = o2[0] === ":";
              i2 && (o2 = o2.slice(1));
              const l2 = this._ref(h.decode(o2), { raw: t4, wrapped: i2 });
              s2.push(l2), typeof l2 != "string" && (r2 = true);
              const c2 = e4.slice(a2 + n3.length);
              c2 && s2.push(h.decode(c2));
            }
            r2 ? this._template = s2 : this.rendered = s2.join("");
          }
          static date(e3, t3) {
            return h.dateFormat[t3.dateFormat].call(e3);
          }
          describe(e3 = {}) {
            if (!this._settings && e3.compact)
              return this.source;
            const t3 = { template: this.source };
            return this._settings && (t3.options = this._settings), t3;
          }
          static build(e3) {
            return new h.Template(e3.template, e3.options);
          }
          isDynamic() {
            return !!this._template;
          }
          static isTemplate(e3) {
            return !!e3 && !!e3[u.symbols.template];
          }
          refs() {
            if (!this._template)
              return;
            const e3 = [];
            for (const t3 of this._template)
              typeof t3 != "string" && e3.push(...t3.refs);
            return e3;
          }
          resolve(e3, t3, r2, s2) {
            return this._template && this._template.length === 1 ? this._part(this._template[0], e3, t3, r2, s2, {}) : this.render(e3, t3, r2, s2);
          }
          _part(e3, ...t3) {
            return e3.ref ? e3.ref.resolve(...t3) : e3.formula.evaluate(t3);
          }
          render(e3, t3, r2, s2, n2 = {}) {
            if (!this.isDynamic())
              return this.rendered;
            const a2 = [];
            for (const o2 of this._template)
              if (typeof o2 == "string")
                a2.push(o2);
              else {
                const i2 = this._part(o2, e3, t3, r2, s2, n2), c2 = h.stringify(i2, e3, t3, r2, s2, n2);
                if (c2 !== void 0) {
                  const e4 = o2.raw || (n2.errors && n2.errors.escapeHtml) === false ? c2 : l(c2);
                  a2.push(h.wrap(e4, o2.wrapped && r2.errors.wrap.label));
                }
              }
            return a2.join("");
          }
          _ref(e3, { raw: t3, wrapped: r2 }) {
            const s2 = [], n2 = (e4) => {
              const t4 = m.create(e4, this._settings);
              return s2.push(t4), (e5) => t4.resolve(...e5);
            };
            try {
              var a2 = new c.Parser(e3, { reference: n2, functions: h.functions, constants: h.constants });
            } catch (t4) {
              throw t4.message = 'Invalid template variable "'.concat(e3, '" fails due to: ').concat(t4.message), t4;
            }
            if (a2.single) {
              if (a2.single.type === "reference") {
                const e4 = s2[0];
                return { ref: e4, raw: t3, refs: s2, wrapped: r2 || e4.type === "local" && e4.key === "label" };
              }
              return h.stringify(a2.single.value);
            }
            return { formula: a2, raw: t3, refs: s2 };
          }
          toString() {
            return this.source;
          }
        }, h.Template.prototype[u.symbols.template] = true, h.Template.prototype.isImmutable = true, h.encode = function(e3) {
          return e3.replace(/\\(\{+)/g, (e4, t3) => h.opens.slice(0, t3.length)).replace(/\\(\}+)/g, (e4, t3) => h.closes.slice(0, t3.length));
        }, h.decode = function(e3) {
          return e3.replace(/\u0000/g, "{").replace(/\u0001/g, "}");
        }, h.split = function(e3) {
          const t3 = [];
          let r2 = "";
          for (let s2 = 0; s2 < e3.length; ++s2) {
            const n2 = e3[s2];
            if (n2 === "{") {
              let n3 = "";
              for (; s2 + 1 < e3.length && e3[s2 + 1] === "{"; )
                n3 += "{", ++s2;
              t3.push(r2), r2 = n3;
            } else
              r2 += n2;
          }
          return t3.push(r2), t3;
        }, h.wrap = function(e3, t3) {
          return t3 ? t3.length === 1 ? "".concat(t3).concat(e3).concat(t3) : "".concat(t3[0]).concat(e3).concat(t3[1]) : e3;
        }, h.stringify = function(e3, t3, r2, s2, a2, o2 = {}) {
          const i2 = typeof e3, l2 = s2 && s2.errors && s2.errors.wrap || {};
          let c2 = false;
          if (m.isRef(e3) && e3.render && (c2 = e3.in, e3 = e3.resolve(t3, r2, s2, a2, n({ in: e3.in }, o2))), e3 === null)
            return "null";
          if (i2 === "string")
            return h.wrap(e3, o2.arrayItems && l2.string);
          if (i2 === "number" || i2 === "function" || i2 === "symbol")
            return e3.toString();
          if (i2 !== "object")
            return JSON.stringify(e3);
          if (e3 instanceof Date)
            return h.Template.date(e3, s2);
          if (e3 instanceof Map) {
            const t4 = [];
            for (const [r3, s3] of e3.entries())
              t4.push("".concat(r3.toString(), " -> ").concat(s3.toString()));
            e3 = t4;
          }
          if (!Array.isArray(e3))
            return e3.toString();
          const u2 = [];
          for (const i3 of e3)
            u2.push(h.stringify(i3, t3, r2, s2, a2, n({ arrayItems: true }, o2)));
          return h.wrap(u2.join(", "), !c2 && l2.array);
        }, h.constants = { true: true, false: false, null: null, second: 1e3, minute: 6e4, hour: 36e5, day: 864e5 }, h.functions = { if: (e3, t3, r2) => e3 ? t3 : r2, length: (e3) => typeof e3 == "string" ? e3.length : e3 && typeof e3 == "object" ? Array.isArray(e3) ? e3.length : Object.keys(e3).length : null, msg(e3) {
          const [t3, r2, s2, n2, a2] = this, o2 = a2.messages;
          if (!o2)
            return "";
          const i2 = f.template(t3, o2[0], e3, r2, s2) || f.template(t3, o2[1], e3, r2, s2);
          return i2 ? i2.render(t3, r2, s2, n2, a2) : "";
        }, number: (e3) => typeof e3 == "number" ? e3 : typeof e3 == "string" ? parseFloat(e3) : typeof e3 == "boolean" ? e3 ? 1 : 0 : e3 instanceof Date ? e3.getTime() : null };
      }, 4946: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(1687), a = r(8068), o = r(8160), i = r(3292), l = r(6354), c = r(6133), u = {};
        e2.exports = a.extend({ type: "alternatives", flags: { match: { default: "any" } }, terms: { matches: { init: [], register: c.toSibling } }, args: (e3, ...t3) => t3.length === 1 && Array.isArray(t3[0]) ? e3.try(...t3[0]) : e3.try(...t3), validate(e3, t3) {
          const { schema: r2, error: s2, state: a2, prefs: o2 } = t3;
          if (r2._flags.match) {
            const t4 = [], i3 = [];
            for (let s3 = 0; s3 < r2.$_terms.matches.length; ++s3) {
              const n2 = r2.$_terms.matches[s3], l2 = a2.nest(n2.schema, "match.".concat(s3));
              l2.snapshot();
              const c3 = n2.schema.$_validate(e3, l2, o2);
              c3.errors ? (i3.push(c3.errors), l2.restore()) : t4.push(c3.value);
            }
            if (t4.length === 0)
              return { errors: s2("alternatives.any", { details: i3.map((e4) => l.details(e4, { override: false })) }) };
            if (r2._flags.match === "one")
              return t4.length === 1 ? { value: t4[0] } : { errors: s2("alternatives.one") };
            if (t4.length !== r2.$_terms.matches.length)
              return { errors: s2("alternatives.all", { details: i3.map((e4) => l.details(e4, { override: false })) }) };
            const c2 = (e4) => e4.$_terms.matches.some((e5) => e5.schema.type === "object" || e5.schema.type === "alternatives" && c2(e5.schema));
            return c2(r2) ? { value: t4.reduce((e4, t5) => n(e4, t5, { mergeArrays: false })) } : { value: t4[t4.length - 1] };
          }
          const i2 = [];
          for (let t4 = 0; t4 < r2.$_terms.matches.length; ++t4) {
            const s3 = r2.$_terms.matches[t4];
            if (s3.schema) {
              const r3 = a2.nest(s3.schema, "match.".concat(t4));
              r3.snapshot();
              const n3 = s3.schema.$_validate(e3, r3, o2);
              if (!n3.errors)
                return n3;
              r3.restore(), i2.push({ schema: s3.schema, reports: n3.errors });
              continue;
            }
            const n2 = s3.ref ? s3.ref.resolve(e3, a2, o2) : e3, l2 = s3.is ? [s3] : s3.switch;
            for (let r3 = 0; r3 < l2.length; ++r3) {
              const i3 = l2[r3], { is: c2, then: u2, otherwise: f } = i3, m = "match.".concat(t4).concat(s3.switch ? "." + r3 : "");
              if (c2.$_match(n2, a2.nest(c2, "".concat(m, ".is")), o2)) {
                if (u2)
                  return u2.$_validate(e3, a2.nest(u2, "".concat(m, ".then")), o2);
              } else if (f)
                return f.$_validate(e3, a2.nest(f, "".concat(m, ".otherwise")), o2);
            }
          }
          return u.errors(i2, t3);
        }, rules: { conditional: { method(e3, t3) {
          s(!this._flags._endedSwitch, "Unreachable condition"), s(!this._flags.match, "Cannot combine match mode", this._flags.match, "with conditional rule"), s(t3.break === void 0, "Cannot use break option with alternatives conditional");
          const r2 = this.clone(), n2 = i.when(r2, e3, t3), a2 = n2.is ? [n2] : n2.switch;
          for (const e4 of a2)
            if (e4.then && e4.otherwise) {
              r2.$_setFlag("_endedSwitch", true, { clone: false });
              break;
            }
          return r2.$_terms.matches.push(n2), r2.$_mutateRebuild();
        } }, match: { method(e3) {
          if (s(["any", "one", "all"].includes(e3), "Invalid alternatives match mode", e3), e3 !== "any")
            for (const t3 of this.$_terms.matches)
              s(t3.schema, "Cannot combine match mode", e3, "with conditional rules");
          return this.$_setFlag("match", e3);
        } }, try: { method(...e3) {
          s(e3.length, "Missing alternative schemas"), o.verifyFlat(e3, "try"), s(!this._flags._endedSwitch, "Unreachable condition");
          const t3 = this.clone();
          for (const r2 of e3)
            t3.$_terms.matches.push({ schema: t3.$_compile(r2) });
          return t3.$_mutateRebuild();
        } } }, overrides: { label(e3) {
          return this.$_parent("label", e3).$_modify({ each: (t3, r2) => r2.path[0] !== "is" ? t3.label(e3) : void 0, ref: false });
        } }, rebuild(e3) {
          e3.$_modify({ each: (t3) => {
            o.isSchema(t3) && t3.type === "array" && e3.$_setFlag("_arrayItems", true, { clone: false });
          } });
        }, manifest: { build(e3, t3) {
          if (t3.matches)
            for (const r2 of t3.matches) {
              const { schema: t4, ref: s2, is: n2, not: a2, then: o2, otherwise: i2 } = r2;
              e3 = t4 ? e3.try(t4) : s2 ? e3.conditional(s2, { is: n2, then: o2, not: a2, otherwise: i2, switch: r2.switch }) : e3.conditional(n2, { then: o2, otherwise: i2 });
            }
          return e3;
        } }, messages: { "alternatives.all": "{{#label}} does not match all of the required types", "alternatives.any": "{{#label}} does not match any of the allowed types", "alternatives.match": "{{#label}} does not match any of the allowed types", "alternatives.one": "{{#label}} matches more than one allowed type", "alternatives.types": "{{#label}} must be one of {{#types}}" } }), u.errors = function(e3, { error: t3, state: r2 }) {
          if (!e3.length)
            return { errors: t3("alternatives.any") };
          if (e3.length === 1)
            return { errors: e3[0].reports };
          const s2 = new Set(), n2 = [];
          for (const { reports: a2, schema: o2 } of e3) {
            if (a2.length > 1)
              return u.unmatched(e3, t3);
            const i2 = a2[0];
            if (i2 instanceof l.Report == 0)
              return u.unmatched(e3, t3);
            if (i2.state.path.length !== r2.path.length) {
              n2.push({ type: o2.type, report: i2 });
              continue;
            }
            if (i2.code === "any.only") {
              for (const e4 of i2.local.valids)
                s2.add(e4);
              continue;
            }
            const [c2, f] = i2.code.split(".");
            f === "base" ? s2.add(c2) : n2.push({ type: o2.type, report: i2 });
          }
          return n2.length ? n2.length === 1 ? { errors: n2[0].report } : u.unmatched(e3, t3) : { errors: t3("alternatives.types", { types: [...s2] }) };
        }, u.unmatched = function(e3, t3) {
          const r2 = [];
          for (const t4 of e3)
            r2.push(...t4.reports);
          return { errors: t3("alternatives.match", l.details(r2, { override: false })) };
        };
      }, 8068: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(7629), a = r(8160), o = r(6914);
        e2.exports = n.extend({ type: "any", flags: { only: { default: false } }, terms: { alterations: { init: null }, examples: { init: null }, externals: { init: null }, metas: { init: [] }, notes: { init: [] }, shared: { init: null }, tags: { init: [] }, whens: { init: null } }, rules: { custom: { method(e3, t3) {
          return s(typeof e3 == "function", "Method must be a function"), s(t3 === void 0 || t3 && typeof t3 == "string", "Description must be a non-empty string"), this.$_addRule({ name: "custom", args: { method: e3, description: t3 } });
        }, validate(e3, t3, { method: r2 }) {
          try {
            return r2(e3, t3);
          } catch (e4) {
            return t3.error("any.custom", { error: e4 });
          }
        }, args: ["method", "description"], multi: true }, messages: { method(e3) {
          return this.prefs({ messages: e3 });
        } }, shared: { method(e3) {
          s(a.isSchema(e3) && e3._flags.id, "Schema must be a schema with an id");
          const t3 = this.clone();
          return t3.$_terms.shared = t3.$_terms.shared || [], t3.$_terms.shared.push(e3), t3.$_mutateRegister(e3), t3;
        } }, warning: { method(e3, t3) {
          return s(e3 && typeof e3 == "string", "Invalid warning code"), this.$_addRule({ name: "warning", args: { code: e3, local: t3 }, warn: true });
        }, validate: (e3, t3, { code: r2, local: s2 }) => t3.error(r2, s2), args: ["code", "local"], multi: true } }, modifiers: { keep(e3, t3 = true) {
          e3.keep = t3;
        }, message(e3, t3) {
          e3.message = o.compile(t3);
        }, warn(e3, t3 = true) {
          e3.warn = t3;
        } }, manifest: { build(e3, t3) {
          for (const r2 in t3) {
            const s2 = t3[r2];
            if (["examples", "externals", "metas", "notes", "tags"].includes(r2))
              for (const t4 of s2)
                e3 = e3[r2.slice(0, -1)](t4);
            else if (r2 !== "alterations")
              if (r2 !== "whens") {
                if (r2 === "shared")
                  for (const t4 of s2)
                    e3 = e3.shared(t4);
              } else
                for (const t4 of s2) {
                  const { ref: r3, is: s3, not: n2, then: a2, otherwise: o2, concat: i } = t4;
                  e3 = i ? e3.concat(i) : r3 ? e3.when(r3, { is: s3, not: n2, then: a2, otherwise: o2, switch: t4.switch, break: t4.break }) : e3.when(s3, { then: a2, otherwise: o2, break: t4.break });
                }
            else {
              const t4 = {};
              for (const { target: e4, adjuster: r3 } of s2)
                t4[e4] = r3;
              e3 = e3.alter(t4);
            }
          }
          return e3;
        } }, messages: { "any.custom": "{{#label}} failed custom validation because {{#error.message}}", "any.default": "{{#label}} threw an error when running default method", "any.failover": "{{#label}} threw an error when running failover method", "any.invalid": "{{#label}} contains an invalid value", "any.only": '{{#label}} must be {if(#valids.length == 1, "", "one of ")}{{#valids}}', "any.ref": "{{#label}} {{#arg}} references {{:#ref}} which {{#reason}}", "any.required": "{{#label}} is required", "any.unknown": "{{#label}} is not allowed" } });
      }, 546: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(9474), a = r(9621), o = r(8068), i = r(8160), l = r(3292), c = {};
        e2.exports = o.extend({ type: "array", flags: { single: { default: false }, sparse: { default: false } }, terms: { items: { init: [], manifest: "schema" }, ordered: { init: [], manifest: "schema" }, _exclusions: { init: [] }, _inclusions: { init: [] }, _requireds: { init: [] } }, coerce: { from: "object", method(e3, { schema: t3, state: r2, prefs: s2 }) {
          if (!Array.isArray(e3))
            return;
          const n2 = t3.$_getRule("sort");
          return n2 ? c.sort(t3, e3, n2.args.options, r2, s2) : void 0;
        } }, validate(e3, { schema: t3, error: r2 }) {
          if (!Array.isArray(e3)) {
            if (t3._flags.single) {
              const t4 = [e3];
              return t4[i.symbols.arraySingle] = true, { value: t4 };
            }
            return { errors: r2("array.base") };
          }
          if (t3.$_getRule("items") || t3.$_terms.externals)
            return { value: e3.slice() };
        }, rules: { has: { method(e3) {
          e3 = this.$_compile(e3, { appendPath: true });
          const t3 = this.$_addRule({ name: "has", args: { schema: e3 } });
          return t3.$_mutateRegister(e3), t3;
        }, validate(e3, { state: t3, prefs: r2, error: s2 }, { schema: n2 }) {
          const a2 = [e3, ...t3.ancestors];
          for (let s3 = 0; s3 < e3.length; ++s3) {
            const o3 = t3.localize([...t3.path, s3], a2, n2);
            if (n2.$_match(e3[s3], o3, r2))
              return e3;
          }
          const o2 = n2._flags.label;
          return o2 ? s2("array.hasKnown", { patternLabel: o2 }) : s2("array.hasUnknown", null);
        }, multi: true }, items: { method(...e3) {
          i.verifyFlat(e3, "items");
          const t3 = this.$_addRule("items");
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const s2 = i.tryWithPath(() => this.$_compile(e3[r2]), r2, { append: true });
            t3.$_terms.items.push(s2);
          }
          return t3.$_mutateRebuild();
        }, validate(e3, { schema: t3, error: r2, state: s2, prefs: n2, errorsArray: a2 }) {
          const o2 = t3.$_terms._requireds.slice(), l2 = t3.$_terms.ordered.slice(), u = [...t3.$_terms._inclusions, ...o2], f = !e3[i.symbols.arraySingle];
          delete e3[i.symbols.arraySingle];
          const m = a2();
          let h = e3.length;
          for (let a3 = 0; a3 < h; ++a3) {
            const i2 = e3[a3];
            let d = false, p = false;
            const g = f ? a3 : new Number(a3), y = [...s2.path, g];
            if (!t3._flags.sparse && i2 === void 0) {
              if (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), n2.abortEarly)
                return m;
              l2.shift();
              continue;
            }
            const b = [e3, ...s2.ancestors];
            for (const e4 of t3.$_terms._exclusions)
              if (e4.$_match(i2, s2.localize(y, b, e4), n2, { presence: "ignore" })) {
                if (m.push(r2("array.excludes", { pos: a3, value: i2 }, s2.localize(y))), n2.abortEarly)
                  return m;
                d = true, l2.shift();
                break;
              }
            if (d)
              continue;
            if (t3.$_terms.ordered.length) {
              if (l2.length) {
                const o3 = l2.shift(), u2 = o3.$_validate(i2, s2.localize(y, b, o3), n2);
                if (u2.errors) {
                  if (m.push(...u2.errors), n2.abortEarly)
                    return m;
                } else if (o3._flags.result === "strip")
                  c.fastSplice(e3, a3), --a3, --h;
                else {
                  if (!t3._flags.sparse && u2.value === void 0) {
                    if (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), n2.abortEarly)
                      return m;
                    continue;
                  }
                  e3[a3] = u2.value;
                }
                continue;
              }
              if (!t3.$_terms.items.length) {
                if (m.push(r2("array.orderedLength", { pos: a3, limit: t3.$_terms.ordered.length })), n2.abortEarly)
                  return m;
                break;
              }
            }
            const v = [];
            let _ = o2.length;
            for (let l3 = 0; l3 < _; ++l3) {
              const u2 = s2.localize(y, b, o2[l3]);
              u2.snapshot();
              const f2 = o2[l3].$_validate(i2, u2, n2);
              if (v[l3] = f2, !f2.errors) {
                if (e3[a3] = f2.value, p = true, c.fastSplice(o2, l3), --l3, --_, !t3._flags.sparse && f2.value === void 0 && (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), n2.abortEarly))
                  return m;
                break;
              }
              u2.restore();
            }
            if (p)
              continue;
            const w = n2.stripUnknown && !!n2.stripUnknown.arrays || false;
            _ = u.length;
            for (const l3 of u) {
              let u2;
              const f2 = o2.indexOf(l3);
              if (f2 !== -1)
                u2 = v[f2];
              else {
                const o3 = s2.localize(y, b, l3);
                if (o3.snapshot(), u2 = l3.$_validate(i2, o3, n2), !u2.errors) {
                  l3._flags.result === "strip" ? (c.fastSplice(e3, a3), --a3, --h) : t3._flags.sparse || u2.value !== void 0 ? e3[a3] = u2.value : (m.push(r2("array.sparse", { key: g, path: y, pos: a3, value: void 0 }, s2.localize(y))), d = true), p = true;
                  break;
                }
                o3.restore();
              }
              if (_ === 1) {
                if (w) {
                  c.fastSplice(e3, a3), --a3, --h, p = true;
                  break;
                }
                if (m.push(...u2.errors), n2.abortEarly)
                  return m;
                d = true;
                break;
              }
            }
            if (!d && (t3.$_terms._inclusions.length || t3.$_terms._requireds.length) && !p) {
              if (w) {
                c.fastSplice(e3, a3), --a3, --h;
                continue;
              }
              if (m.push(r2("array.includes", { pos: a3, value: i2 }, s2.localize(y))), n2.abortEarly)
                return m;
            }
          }
          return o2.length && c.fillMissedErrors(t3, m, o2, e3, s2, n2), l2.length && (c.fillOrderedErrors(t3, m, l2, e3, s2, n2), m.length || c.fillDefault(l2, e3, s2, n2)), m.length ? m : e3;
        }, priority: true, manifest: false }, length: { method(e3) {
          return this.$_addRule({ name: "length", args: { limit: e3 }, operator: "=" });
        }, validate: (e3, t3, { limit: r2 }, { name: s2, operator: n2, args: a2 }) => i.compare(e3.length, r2, n2) ? e3 : t3.error("array." + s2, { limit: a2.limit, value: e3 }), args: [{ name: "limit", ref: true, assert: i.limit, message: "must be a positive integer" }] }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "length", args: { limit: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "length", args: { limit: e3 }, operator: ">=" });
        } }, ordered: { method(...e3) {
          i.verifyFlat(e3, "ordered");
          const t3 = this.$_addRule("items");
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const s2 = i.tryWithPath(() => this.$_compile(e3[r2]), r2, { append: true });
            c.validateSingle(s2, t3), t3.$_mutateRegister(s2), t3.$_terms.ordered.push(s2);
          }
          return t3.$_mutateRebuild();
        } }, single: { method(e3) {
          const t3 = e3 === void 0 || !!e3;
          return s(!t3 || !this._flags._arrayItems, "Cannot specify single rule when array has array items"), this.$_setFlag("single", t3);
        } }, sort: { method(e3 = {}) {
          i.assertOptions(e3, ["by", "order"]);
          const t3 = { order: e3.order || "ascending" };
          return e3.by && (t3.by = l.ref(e3.by, { ancestor: 0 }), s(!t3.by.ancestor, "Cannot sort by ancestor")), this.$_addRule({ name: "sort", args: { options: t3 } });
        }, validate(e3, { error: t3, state: r2, prefs: s2, schema: n2 }, { options: a2 }) {
          const { value: o2, errors: i2 } = c.sort(n2, e3, a2, r2, s2);
          if (i2)
            return i2;
          for (let r3 = 0; r3 < e3.length; ++r3)
            if (e3[r3] !== o2[r3])
              return t3("array.sort", { order: a2.order, by: a2.by ? a2.by.key : "value" });
          return e3;
        }, convert: true }, sparse: { method(e3) {
          const t3 = e3 === void 0 || !!e3;
          return this._flags.sparse === t3 ? this : (t3 ? this.clone() : this.$_addRule("items")).$_setFlag("sparse", t3, { clone: false });
        } }, unique: { method(e3, t3 = {}) {
          s(!e3 || typeof e3 == "function" || typeof e3 == "string", "comparator must be a function or a string"), i.assertOptions(t3, ["ignoreUndefined", "separator"]);
          const r2 = { name: "unique", args: { options: t3, comparator: e3 } };
          if (e3)
            if (typeof e3 == "string") {
              const s2 = i.default(t3.separator, ".");
              r2.path = s2 ? e3.split(s2) : [e3];
            } else
              r2.comparator = e3;
          return this.$_addRule(r2);
        }, validate(e3, { state: t3, error: r2, schema: o2 }, { comparator: i2, options: l2 }, { comparator: c2, path: u }) {
          const f = { string: Object.create(null), number: Object.create(null), undefined: Object.create(null), boolean: Object.create(null), object: new Map(), function: new Map(), custom: new Map() }, m = c2 || n, h = l2.ignoreUndefined;
          for (let n2 = 0; n2 < e3.length; ++n2) {
            const o3 = u ? a(e3[n2], u) : e3[n2], l3 = c2 ? f.custom : f[typeof o3];
            if (s(l3, "Failed to find unique map container for type", typeof o3), l3 instanceof Map) {
              const s2 = l3.entries();
              let a2;
              for (; !(a2 = s2.next()).done; )
                if (m(a2.value[0], o3)) {
                  const s3 = t3.localize([...t3.path, n2], [e3, ...t3.ancestors]), o4 = { pos: n2, value: e3[n2], dupePos: a2.value[1], dupeValue: e3[a2.value[1]] };
                  return u && (o4.path = i2), r2("array.unique", o4, s3);
                }
              l3.set(o3, n2);
            } else {
              if ((!h || o3 !== void 0) && l3[o3] !== void 0) {
                const s2 = { pos: n2, value: e3[n2], dupePos: l3[o3], dupeValue: e3[l3[o3]] };
                return u && (s2.path = i2), r2("array.unique", s2, t3.localize([...t3.path, n2], [e3, ...t3.ancestors]));
              }
              l3[o3] = n2;
            }
          }
          return e3;
        }, args: ["comparator", "options"], multi: true } }, cast: { set: { from: Array.isArray, to: (e3, t3) => new Set(e3) } }, rebuild(e3) {
          e3.$_terms._inclusions = [], e3.$_terms._exclusions = [], e3.$_terms._requireds = [];
          for (const t3 of e3.$_terms.items)
            c.validateSingle(t3, e3), t3._flags.presence === "required" ? e3.$_terms._requireds.push(t3) : t3._flags.presence === "forbidden" ? e3.$_terms._exclusions.push(t3) : e3.$_terms._inclusions.push(t3);
          for (const t3 of e3.$_terms.ordered)
            c.validateSingle(t3, e3);
        }, manifest: { build: (e3, t3) => (t3.items && (e3 = e3.items(...t3.items)), t3.ordered && (e3 = e3.ordered(...t3.ordered)), e3) }, messages: { "array.base": "{{#label}} must be an array", "array.excludes": "{{#label}} contains an excluded value", "array.hasKnown": "{{#label}} does not contain at least one required match for type {:#patternLabel}", "array.hasUnknown": "{{#label}} does not contain at least one required match", "array.includes": "{{#label}} does not match any of the allowed types", "array.includesRequiredBoth": "{{#label}} does not contain {{#knownMisses}} and {{#unknownMisses}} other required value(s)", "array.includesRequiredKnowns": "{{#label}} does not contain {{#knownMisses}}", "array.includesRequiredUnknowns": "{{#label}} does not contain {{#unknownMisses}} required value(s)", "array.length": "{{#label}} must contain {{#limit}} items", "array.max": "{{#label}} must contain less than or equal to {{#limit}} items", "array.min": "{{#label}} must contain at least {{#limit}} items", "array.orderedLength": "{{#label}} must contain at most {{#limit}} items", "array.sort": "{{#label}} must be sorted in {#order} order by {{#by}}", "array.sort.mismatching": "{{#label}} cannot be sorted due to mismatching types", "array.sort.unsupported": "{{#label}} cannot be sorted due to unsupported type {#type}", "array.sparse": "{{#label}} must not be a sparse array item", "array.unique": "{{#label}} contains a duplicate value" } }), c.fillMissedErrors = function(e3, t3, r2, s2, n2, a2) {
          const o2 = [];
          let i2 = 0;
          for (const e4 of r2) {
            const t4 = e4._flags.label;
            t4 ? o2.push(t4) : ++i2;
          }
          o2.length ? i2 ? t3.push(e3.$_createError("array.includesRequiredBoth", s2, { knownMisses: o2, unknownMisses: i2 }, n2, a2)) : t3.push(e3.$_createError("array.includesRequiredKnowns", s2, { knownMisses: o2 }, n2, a2)) : t3.push(e3.$_createError("array.includesRequiredUnknowns", s2, { unknownMisses: i2 }, n2, a2));
        }, c.fillOrderedErrors = function(e3, t3, r2, s2, n2, a2) {
          const o2 = [];
          for (const e4 of r2)
            e4._flags.presence === "required" && o2.push(e4);
          o2.length && c.fillMissedErrors(e3, t3, o2, s2, n2, a2);
        }, c.fillDefault = function(e3, t3, r2, s2) {
          const n2 = [];
          let a2 = true;
          for (let o2 = e3.length - 1; o2 >= 0; --o2) {
            const i2 = e3[o2], l2 = [t3, ...r2.ancestors], c2 = i2.$_validate(void 0, r2.localize(r2.path, l2, i2), s2).value;
            if (a2) {
              if (c2 === void 0)
                continue;
              a2 = false;
            }
            n2.unshift(c2);
          }
          n2.length && t3.push(...n2);
        }, c.fastSplice = function(e3, t3) {
          let r2 = t3;
          for (; r2 < e3.length; )
            e3[r2++] = e3[r2];
          --e3.length;
        }, c.validateSingle = function(e3, t3) {
          (e3.type === "array" || e3._flags._arrayItems) && (s(!t3._flags.single, "Cannot specify array item with single rule enabled"), t3.$_setFlag("_arrayItems", true, { clone: false }));
        }, c.sort = function(e3, t3, r2, s2, n2) {
          const a2 = r2.order === "ascending" ? 1 : -1, o2 = -1 * a2, i2 = a2, l2 = (l3, u) => {
            let f = c.compare(l3, u, o2, i2);
            if (f !== null)
              return f;
            if (r2.by && (l3 = r2.by.resolve(l3, s2, n2), u = r2.by.resolve(u, s2, n2)), f = c.compare(l3, u, o2, i2), f !== null)
              return f;
            const m = typeof l3;
            if (m !== typeof u)
              throw e3.$_createError("array.sort.mismatching", t3, null, s2, n2);
            if (m !== "number" && m !== "string")
              throw e3.$_createError("array.sort.unsupported", t3, { type: m }, s2, n2);
            return m === "number" ? (l3 - u) * a2 : l3 < u ? o2 : i2;
          };
          try {
            return { value: t3.slice().sort(l2) };
          } catch (e4) {
            return { errors: e4 };
          }
        }, c.compare = function(e3, t3, r2, s2) {
          return e3 === t3 ? 0 : e3 === void 0 ? 1 : t3 === void 0 ? -1 : e3 === null ? s2 : t3 === null ? r2 : null;
        };
      }, 4937: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = r(2036), i = { isBool: function(e3) {
          return typeof e3 == "boolean";
        } };
        e2.exports = n.extend({ type: "boolean", flags: { sensitive: { default: false } }, terms: { falsy: { init: null, manifest: "values" }, truthy: { init: null, manifest: "values" } }, coerce(e3, { schema: t3 }) {
          if (typeof e3 != "boolean") {
            if (typeof e3 == "string") {
              const r2 = t3._flags.sensitive ? e3 : e3.toLowerCase();
              e3 = r2 === "true" || r2 !== "false" && e3;
            }
            return typeof e3 != "boolean" && (e3 = t3.$_terms.truthy && t3.$_terms.truthy.has(e3, null, null, !t3._flags.sensitive) || (!t3.$_terms.falsy || !t3.$_terms.falsy.has(e3, null, null, !t3._flags.sensitive)) && e3), { value: e3 };
          }
        }, validate(e3, { error: t3 }) {
          if (typeof e3 != "boolean")
            return { value: e3, errors: t3("boolean.base") };
        }, rules: { truthy: { method(...e3) {
          a.verifyFlat(e3, "truthy");
          const t3 = this.clone();
          t3.$_terms.truthy = t3.$_terms.truthy || new o();
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const n2 = e3[r2];
            s(n2 !== void 0, "Cannot call truthy with undefined"), t3.$_terms.truthy.add(n2);
          }
          return t3;
        } }, falsy: { method(...e3) {
          a.verifyFlat(e3, "falsy");
          const t3 = this.clone();
          t3.$_terms.falsy = t3.$_terms.falsy || new o();
          for (let r2 = 0; r2 < e3.length; ++r2) {
            const n2 = e3[r2];
            s(n2 !== void 0, "Cannot call falsy with undefined"), t3.$_terms.falsy.add(n2);
          }
          return t3;
        } }, sensitive: { method(e3 = true) {
          return this.$_setFlag("sensitive", e3);
        } } }, cast: { number: { from: i.isBool, to: (e3, t3) => e3 ? 1 : 0 }, string: { from: i.isBool, to: (e3, t3) => e3 ? "true" : "false" } }, manifest: { build: (e3, t3) => (t3.truthy && (e3 = e3.truthy(...t3.truthy)), t3.falsy && (e3 = e3.falsy(...t3.falsy)), e3) }, messages: { "boolean.base": "{{#label}} must be a boolean" } });
      }, 7500: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = r(3328), i = { isDate: function(e3) {
          return e3 instanceof Date;
        } };
        e2.exports = n.extend({ type: "date", coerce: { from: ["number", "string"], method: (e3, { schema: t3 }) => ({ value: i.parse(e3, t3._flags.format) || e3 }) }, validate(e3, { schema: t3, error: r2, prefs: s2 }) {
          if (e3 instanceof Date && !isNaN(e3.getTime()))
            return;
          const n2 = t3._flags.format;
          return s2.convert && n2 && typeof e3 == "string" ? { value: e3, errors: r2("date.format", { format: n2 }) } : { value: e3, errors: r2("date.base") };
        }, rules: { compare: { method: false, validate(e3, t3, { date: r2 }, { name: s2, operator: n2, args: o2 }) {
          const i2 = r2 === "now" ? Date.now() : r2.getTime();
          return a.compare(e3.getTime(), i2, n2) ? e3 : t3.error("date." + s2, { limit: o2.date, value: e3 });
        }, args: [{ name: "date", ref: true, normalize: (e3) => e3 === "now" ? e3 : i.parse(e3), assert: (e3) => e3 !== null, message: "must have a valid date format" }] }, format: { method(e3) {
          return s(["iso", "javascript", "unix"].includes(e3), "Unknown date format", e3), this.$_setFlag("format", e3);
        } }, greater: { method(e3) {
          return this.$_addRule({ name: "greater", method: "compare", args: { date: e3 }, operator: ">" });
        } }, iso: { method() {
          return this.format("iso");
        } }, less: { method(e3) {
          return this.$_addRule({ name: "less", method: "compare", args: { date: e3 }, operator: "<" });
        } }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "compare", args: { date: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "compare", args: { date: e3 }, operator: ">=" });
        } }, timestamp: { method(e3 = "javascript") {
          return s(["javascript", "unix"].includes(e3), '"type" must be one of "javascript, unix"'), this.format(e3);
        } } }, cast: { number: { from: i.isDate, to: (e3, t3) => e3.getTime() }, string: { from: i.isDate, to: (e3, { prefs: t3 }) => o.date(e3, t3) } }, messages: { "date.base": "{{#label}} must be a valid date", "date.format": '{{#label}} must be in {msg("date.format." + #format) || #format} format', "date.greater": "{{#label}} must be greater than {{:#limit}}", "date.less": "{{#label}} must be less than {{:#limit}}", "date.max": "{{#label}} must be less than or equal to {{:#limit}}", "date.min": "{{#label}} must be greater than or equal to {{:#limit}}", "date.format.iso": "ISO 8601 date", "date.format.javascript": "timestamp or number of milliseconds", "date.format.unix": "timestamp or number of seconds" } }), i.parse = function(e3, t3) {
          if (e3 instanceof Date)
            return e3;
          if (typeof e3 != "string" && (isNaN(e3) || !isFinite(e3)))
            return null;
          if (/^\s*$/.test(e3))
            return null;
          if (t3 === "iso")
            return a.isIsoDate(e3) ? i.date(e3.toString()) : null;
          const r2 = e3;
          if (typeof e3 == "string" && /^[+-]?\d+(\.\d+)?$/.test(e3) && (e3 = parseFloat(e3)), t3) {
            if (t3 === "javascript")
              return i.date(1 * e3);
            if (t3 === "unix")
              return i.date(1e3 * e3);
            if (typeof r2 == "string")
              return null;
          }
          return i.date(e3);
        }, i.date = function(e3) {
          const t3 = new Date(e3);
          return isNaN(t3.getTime()) ? null : t3;
        };
      }, 390: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(7824);
        e2.exports = n.extend({ type: "function", properties: { typeof: "function" }, rules: { arity: { method(e3) {
          return s(Number.isSafeInteger(e3) && e3 >= 0, "n must be a positive integer"), this.$_addRule({ name: "arity", args: { n: e3 } });
        }, validate: (e3, t3, { n: r2 }) => e3.length === r2 ? e3 : t3.error("function.arity", { n: r2 }) }, class: { method() {
          return this.$_addRule("class");
        }, validate: (e3, t3) => /^\s*class\s/.test(e3.toString()) ? e3 : t3.error("function.class", { value: e3 }) }, minArity: { method(e3) {
          return s(Number.isSafeInteger(e3) && e3 > 0, "n must be a strict positive integer"), this.$_addRule({ name: "minArity", args: { n: e3 } });
        }, validate: (e3, t3, { n: r2 }) => e3.length >= r2 ? e3 : t3.error("function.minArity", { n: r2 }) }, maxArity: { method(e3) {
          return s(Number.isSafeInteger(e3) && e3 >= 0, "n must be a positive integer"), this.$_addRule({ name: "maxArity", args: { n: e3 } });
        }, validate: (e3, t3, { n: r2 }) => e3.length <= r2 ? e3 : t3.error("function.maxArity", { n: r2 }) } }, messages: { "function.arity": "{{#label}} must have an arity of {{#n}}", "function.class": "{{#label}} must be a class", "function.maxArity": "{{#label}} must have an arity lesser or equal to {{#n}}", "function.minArity": "{{#label}} must have an arity greater or equal to {{#n}}" } });
      }, 7824: (e2, t2, r) => {
        "use strict";
        const s = r(978), n = r(375), a = r(8571), o = r(3652), i = r(8068), l = r(8160), c = r(3292), u = r(6354), f = r(6133), m = r(3328), h = { renameDefaults: { alias: false, multiple: false, override: false } };
        e2.exports = i.extend({ type: "_keys", properties: { typeof: "object" }, flags: { unknown: { default: false } }, terms: { dependencies: { init: null }, keys: { init: null, manifest: { mapped: { from: "schema", to: "key" } } }, patterns: { init: null }, renames: { init: null } }, args: (e3, t3) => e3.keys(t3), validate(e3, { schema: t3, error: r2, state: s2, prefs: n2 }) {
          if (!e3 || typeof e3 !== t3.$_property("typeof") || Array.isArray(e3))
            return { value: e3, errors: r2("object.base", { type: t3.$_property("typeof") }) };
          if (!(t3.$_terms.renames || t3.$_terms.dependencies || t3.$_terms.keys || t3.$_terms.patterns || t3.$_terms.externals))
            return;
          e3 = h.clone(e3, n2);
          const a2 = [];
          if (t3.$_terms.renames && !h.rename(t3, e3, s2, n2, a2))
            return { value: e3, errors: a2 };
          if (!t3.$_terms.keys && !t3.$_terms.patterns && !t3.$_terms.dependencies)
            return { value: e3, errors: a2 };
          const o2 = new Set(Object.keys(e3));
          if (t3.$_terms.keys) {
            const r3 = [e3, ...s2.ancestors];
            for (const i2 of t3.$_terms.keys) {
              const t4 = i2.key, l2 = e3[t4];
              o2.delete(t4);
              const c2 = s2.localize([...s2.path, t4], r3, i2), u2 = i2.schema.$_validate(l2, c2, n2);
              if (u2.errors) {
                if (n2.abortEarly)
                  return { value: e3, errors: u2.errors };
                u2.value !== void 0 && (e3[t4] = u2.value), a2.push(...u2.errors);
              } else
                i2.schema._flags.result === "strip" || u2.value === void 0 && l2 !== void 0 ? delete e3[t4] : u2.value !== void 0 && (e3[t4] = u2.value);
            }
          }
          if (o2.size || t3._flags._hasPatternMatch) {
            const r3 = h.unknown(t3, e3, o2, a2, s2, n2);
            if (r3)
              return r3;
          }
          if (t3.$_terms.dependencies)
            for (const r3 of t3.$_terms.dependencies) {
              if (r3.key && r3.key.resolve(e3, s2, n2, null, { shadow: false }) === void 0)
                continue;
              const o3 = h.dependencies[r3.rel](t3, r3, e3, s2, n2);
              if (o3) {
                const r4 = t3.$_createError(o3.code, e3, o3.context, s2, n2);
                if (n2.abortEarly)
                  return { value: e3, errors: r4 };
                a2.push(r4);
              }
            }
          return { value: e3, errors: a2 };
        }, rules: { and: { method(...e3) {
          return l.verifyFlat(e3, "and"), h.dependency(this, "and", null, e3);
        } }, append: { method(e3) {
          return e3 == null || Object.keys(e3).length === 0 ? this : this.keys(e3);
        } }, assert: { method(e3, t3, r2) {
          m.isTemplate(e3) || (e3 = c.ref(e3)), n(r2 === void 0 || typeof r2 == "string", "Message must be a string"), t3 = this.$_compile(t3, { appendPath: true });
          const s2 = this.$_addRule({ name: "assert", args: { subject: e3, schema: t3, message: r2 } });
          return s2.$_mutateRegister(e3), s2.$_mutateRegister(t3), s2;
        }, validate(e3, { error: t3, prefs: r2, state: s2 }, { subject: n2, schema: a2, message: o2 }) {
          const i2 = n2.resolve(e3, s2, r2), l2 = f.isRef(n2) ? n2.absolute(s2) : [];
          return a2.$_match(i2, s2.localize(l2, [e3, ...s2.ancestors], a2), r2) ? e3 : t3("object.assert", { subject: n2, message: o2 });
        }, args: ["subject", "schema", "message"], multi: true }, instance: { method(e3, t3) {
          return n(typeof e3 == "function", "constructor must be a function"), t3 = t3 || e3.name, this.$_addRule({ name: "instance", args: { constructor: e3, name: t3 } });
        }, validate: (e3, t3, { constructor: r2, name: s2 }) => e3 instanceof r2 ? e3 : t3.error("object.instance", { type: s2, value: e3 }), args: ["constructor", "name"] }, keys: { method(e3) {
          n(e3 === void 0 || typeof e3 == "object", "Object schema must be a valid object"), n(!l.isSchema(e3), "Object schema cannot be a joi schema");
          const t3 = this.clone();
          if (e3)
            if (Object.keys(e3).length) {
              t3.$_terms.keys = t3.$_terms.keys ? t3.$_terms.keys.filter((t4) => !e3.hasOwnProperty(t4.key)) : new h.Keys();
              for (const r2 in e3)
                l.tryWithPath(() => t3.$_terms.keys.push({ key: r2, schema: this.$_compile(e3[r2]) }), r2);
            } else
              t3.$_terms.keys = new h.Keys();
          else
            t3.$_terms.keys = null;
          return t3.$_mutateRebuild();
        } }, length: { method(e3) {
          return this.$_addRule({ name: "length", args: { limit: e3 }, operator: "=" });
        }, validate: (e3, t3, { limit: r2 }, { name: s2, operator: n2, args: a2 }) => l.compare(Object.keys(e3).length, r2, n2) ? e3 : t3.error("object." + s2, { limit: a2.limit, value: e3 }), args: [{ name: "limit", ref: true, assert: l.limit, message: "must be a positive integer" }] }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "length", args: { limit: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "length", args: { limit: e3 }, operator: ">=" });
        } }, nand: { method(...e3) {
          return l.verifyFlat(e3, "nand"), h.dependency(this, "nand", null, e3);
        } }, or: { method(...e3) {
          return l.verifyFlat(e3, "or"), h.dependency(this, "or", null, e3);
        } }, oxor: { method(...e3) {
          return h.dependency(this, "oxor", null, e3);
        } }, pattern: { method(e3, t3, r2 = {}) {
          const s2 = e3 instanceof RegExp;
          s2 || (e3 = this.$_compile(e3, { appendPath: true })), n(t3 !== void 0, "Invalid rule"), l.assertOptions(r2, ["fallthrough", "matches"]), s2 && n(!e3.flags.includes("g") && !e3.flags.includes("y"), "pattern should not use global or sticky mode"), t3 = this.$_compile(t3, { appendPath: true });
          const a2 = this.clone();
          a2.$_terms.patterns = a2.$_terms.patterns || [];
          const o2 = { [s2 ? "regex" : "schema"]: e3, rule: t3 };
          return r2.matches && (o2.matches = this.$_compile(r2.matches), o2.matches.type !== "array" && (o2.matches = o2.matches.$_root.array().items(o2.matches)), a2.$_mutateRegister(o2.matches), a2.$_setFlag("_hasPatternMatch", true, { clone: false })), r2.fallthrough && (o2.fallthrough = true), a2.$_terms.patterns.push(o2), a2.$_mutateRegister(t3), a2;
        } }, ref: { method() {
          return this.$_addRule("ref");
        }, validate: (e3, t3) => f.isRef(e3) ? e3 : t3.error("object.refType", { value: e3 }) }, regex: { method() {
          return this.$_addRule("regex");
        }, validate: (e3, t3) => e3 instanceof RegExp ? e3 : t3.error("object.regex", { value: e3 }) }, rename: { method(e3, t3, r2 = {}) {
          n(typeof e3 == "string" || e3 instanceof RegExp, "Rename missing the from argument"), n(typeof t3 == "string" || t3 instanceof m, "Invalid rename to argument"), n(t3 !== e3, "Cannot rename key to same name:", e3), l.assertOptions(r2, ["alias", "ignoreUndefined", "override", "multiple"]);
          const a2 = this.clone();
          a2.$_terms.renames = a2.$_terms.renames || [];
          for (const t4 of a2.$_terms.renames)
            n(t4.from !== e3, "Cannot rename the same key multiple times");
          return t3 instanceof m && a2.$_mutateRegister(t3), a2.$_terms.renames.push({ from: e3, to: t3, options: s(h.renameDefaults, r2) }), a2;
        } }, schema: { method(e3 = "any") {
          return this.$_addRule({ name: "schema", args: { type: e3 } });
        }, validate: (e3, t3, { type: r2 }) => !l.isSchema(e3) || r2 !== "any" && e3.type !== r2 ? t3.error("object.schema", { type: r2 }) : e3 }, unknown: { method(e3) {
          return this.$_setFlag("unknown", e3 !== false);
        } }, with: { method(e3, t3, r2 = {}) {
          return h.dependency(this, "with", e3, t3, r2);
        } }, without: { method(e3, t3, r2 = {}) {
          return h.dependency(this, "without", e3, t3, r2);
        } }, xor: { method(...e3) {
          return l.verifyFlat(e3, "xor"), h.dependency(this, "xor", null, e3);
        } } }, overrides: { default(e3, t3) {
          return e3 === void 0 && (e3 = l.symbols.deepDefault), this.$_parent("default", e3, t3);
        } }, rebuild(e3) {
          if (e3.$_terms.keys) {
            const t3 = new o.Sorter();
            for (const r2 of e3.$_terms.keys)
              l.tryWithPath(() => t3.add(r2, { after: r2.schema.$_rootReferences(), group: r2.key }), r2.key);
            e3.$_terms.keys = new h.Keys(...t3.nodes);
          }
        }, manifest: { build(e3, t3) {
          if (t3.keys && (e3 = e3.keys(t3.keys)), t3.dependencies)
            for (const { rel: r2, key: s2 = null, peers: n2, options: a2 } of t3.dependencies)
              e3 = h.dependency(e3, r2, s2, n2, a2);
          if (t3.patterns)
            for (const { regex: r2, schema: s2, rule: n2, fallthrough: a2, matches: o2 } of t3.patterns)
              e3 = e3.pattern(r2 || s2, n2, { fallthrough: a2, matches: o2 });
          if (t3.renames)
            for (const { from: r2, to: s2, options: n2 } of t3.renames)
              e3 = e3.rename(r2, s2, n2);
          return e3;
        } }, messages: { "object.and": "{{#label}} contains {{#presentWithLabels}} without its required peers {{#missingWithLabels}}", "object.assert": '{{#label}} is invalid because {if(#subject.key, `"` + #subject.key + `" failed to ` + (#message || "pass the assertion test"), #message || "the assertion failed")}', "object.base": "{{#label}} must be of type {{#type}}", "object.instance": "{{#label}} must be an instance of {{:#type}}", "object.length": '{{#label}} must have {{#limit}} key{if(#limit == 1, "", "s")}', "object.max": '{{#label}} must have less than or equal to {{#limit}} key{if(#limit == 1, "", "s")}', "object.min": '{{#label}} must have at least {{#limit}} key{if(#limit == 1, "", "s")}', "object.missing": "{{#label}} must contain at least one of {{#peersWithLabels}}", "object.nand": "{{:#mainWithLabel}} must not exist simultaneously with {{#peersWithLabels}}", "object.oxor": "{{#label}} contains a conflict between optional exclusive peers {{#peersWithLabels}}", "object.pattern.match": "{{#label}} keys failed to match pattern requirements", "object.refType": "{{#label}} must be a Joi reference", "object.regex": "{{#label}} must be a RegExp object", "object.rename.multiple": "{{#label}} cannot rename {{:#from}} because multiple renames are disabled and another key was already renamed to {{:#to}}", "object.rename.override": "{{#label}} cannot rename {{:#from}} because override is disabled and target {{:#to}} exists", "object.schema": "{{#label}} must be a Joi schema of {{#type}} type", "object.unknown": "{{#label}} is not allowed", "object.with": "{{:#mainWithLabel}} missing required peer {{:#peerWithLabel}}", "object.without": "{{:#mainWithLabel}} conflict with forbidden peer {{:#peerWithLabel}}", "object.xor": "{{#label}} contains a conflict between exclusive peers {{#peersWithLabels}}" } }), h.clone = function(e3, t3) {
          if (typeof e3 == "object") {
            if (t3.nonEnumerables)
              return a(e3, { shallow: true });
            const r3 = Object.create(Object.getPrototypeOf(e3));
            return Object.assign(r3, e3), r3;
          }
          const r2 = function(...t4) {
            return e3.apply(this, t4);
          };
          return r2.prototype = a(e3.prototype), Object.defineProperty(r2, "name", { value: e3.name, writable: false }), Object.defineProperty(r2, "length", { value: e3.length, writable: false }), Object.assign(r2, e3), r2;
        }, h.dependency = function(e3, t3, r2, s2, a2) {
          n(r2 === null || typeof r2 == "string", t3, "key must be a strings"), a2 || (a2 = s2.length > 1 && typeof s2[s2.length - 1] == "object" ? s2.pop() : {}), l.assertOptions(a2, ["separator"]), s2 = [].concat(s2);
          const o2 = l.default(a2.separator, "."), i2 = [];
          for (const e4 of s2)
            n(typeof e4 == "string", t3, "peers must be strings"), i2.push(c.ref(e4, { separator: o2, ancestor: 0, prefix: false }));
          r2 !== null && (r2 = c.ref(r2, { separator: o2, ancestor: 0, prefix: false }));
          const u2 = e3.clone();
          return u2.$_terms.dependencies = u2.$_terms.dependencies || [], u2.$_terms.dependencies.push(new h.Dependency(t3, r2, i2, s2)), u2;
        }, h.dependencies = { and(e3, t3, r2, s2, n2) {
          const a2 = [], o2 = [], i2 = t3.peers.length;
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) === void 0 ? a2.push(e4.key) : o2.push(e4.key);
          if (a2.length !== i2 && o2.length !== i2)
            return { code: "object.and", context: { present: o2, presentWithLabels: h.keysToLabels(e3, o2), missing: a2, missingWithLabels: h.keysToLabels(e3, a2) } };
        }, nand(e3, t3, r2, s2, n2) {
          const a2 = [];
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0 && a2.push(e4.key);
          if (a2.length !== t3.peers.length)
            return;
          const o2 = t3.paths[0], i2 = t3.paths.slice(1);
          return { code: "object.nand", context: { main: o2, mainWithLabel: h.keysToLabels(e3, o2), peers: i2, peersWithLabels: h.keysToLabels(e3, i2) } };
        }, or(e3, t3, r2, s2, n2) {
          for (const e4 of t3.peers)
            if (e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0)
              return;
          return { code: "object.missing", context: { peers: t3.paths, peersWithLabels: h.keysToLabels(e3, t3.paths) } };
        }, oxor(e3, t3, r2, s2, n2) {
          const a2 = [];
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0 && a2.push(e4.key);
          if (!a2.length || a2.length === 1)
            return;
          const o2 = { peers: t3.paths, peersWithLabels: h.keysToLabels(e3, t3.paths) };
          return o2.present = a2, o2.presentWithLabels = h.keysToLabels(e3, a2), { code: "object.oxor", context: o2 };
        }, with(e3, t3, r2, s2, n2) {
          for (const a2 of t3.peers)
            if (a2.resolve(r2, s2, n2, null, { shadow: false }) === void 0)
              return { code: "object.with", context: { main: t3.key.key, mainWithLabel: h.keysToLabels(e3, t3.key.key), peer: a2.key, peerWithLabel: h.keysToLabels(e3, a2.key) } };
        }, without(e3, t3, r2, s2, n2) {
          for (const a2 of t3.peers)
            if (a2.resolve(r2, s2, n2, null, { shadow: false }) !== void 0)
              return { code: "object.without", context: { main: t3.key.key, mainWithLabel: h.keysToLabels(e3, t3.key.key), peer: a2.key, peerWithLabel: h.keysToLabels(e3, a2.key) } };
        }, xor(e3, t3, r2, s2, n2) {
          const a2 = [];
          for (const e4 of t3.peers)
            e4.resolve(r2, s2, n2, null, { shadow: false }) !== void 0 && a2.push(e4.key);
          if (a2.length === 1)
            return;
          const o2 = { peers: t3.paths, peersWithLabels: h.keysToLabels(e3, t3.paths) };
          return a2.length === 0 ? { code: "object.missing", context: o2 } : (o2.present = a2, o2.presentWithLabels = h.keysToLabels(e3, a2), { code: "object.xor", context: o2 });
        } }, h.keysToLabels = function(e3, t3) {
          return Array.isArray(t3) ? t3.map((t4) => e3.$_mapLabels(t4)) : e3.$_mapLabels(t3);
        }, h.rename = function(e3, t3, r2, s2, n2) {
          const a2 = {};
          for (const o2 of e3.$_terms.renames) {
            const i2 = [], l2 = typeof o2.from != "string";
            if (l2)
              for (const e4 in t3) {
                if (t3[e4] === void 0 && o2.options.ignoreUndefined)
                  continue;
                if (e4 === o2.to)
                  continue;
                const r3 = o2.from.exec(e4);
                r3 && i2.push({ from: e4, to: o2.to, match: r3 });
              }
            else
              !Object.prototype.hasOwnProperty.call(t3, o2.from) || t3[o2.from] === void 0 && o2.options.ignoreUndefined || i2.push(o2);
            for (const c2 of i2) {
              const i3 = c2.from;
              let u2 = c2.to;
              if (u2 instanceof m && (u2 = u2.render(t3, r2, s2, c2.match)), i3 !== u2) {
                if (!o2.options.multiple && a2[u2] && (n2.push(e3.$_createError("object.rename.multiple", t3, { from: i3, to: u2, pattern: l2 }, r2, s2)), s2.abortEarly))
                  return false;
                if (Object.prototype.hasOwnProperty.call(t3, u2) && !o2.options.override && !a2[u2] && (n2.push(e3.$_createError("object.rename.override", t3, { from: i3, to: u2, pattern: l2 }, r2, s2)), s2.abortEarly))
                  return false;
                t3[i3] === void 0 ? delete t3[u2] : t3[u2] = t3[i3], a2[u2] = true, o2.options.alias || delete t3[i3];
              }
            }
          }
          return true;
        }, h.unknown = function(e3, t3, r2, s2, n2, a2) {
          if (e3.$_terms.patterns) {
            let o2 = false;
            const i2 = e3.$_terms.patterns.map((e4) => {
              if (e4.matches)
                return o2 = true, [];
            }), l2 = [t3, ...n2.ancestors];
            for (const o3 of r2) {
              const c2 = t3[o3], u2 = [...n2.path, o3];
              for (let f2 = 0; f2 < e3.$_terms.patterns.length; ++f2) {
                const m2 = e3.$_terms.patterns[f2];
                if (m2.regex) {
                  const e4 = m2.regex.test(o3);
                  if (n2.mainstay.tracer.debug(n2, "rule", "pattern.".concat(f2), e4 ? "pass" : "error"), !e4)
                    continue;
                } else if (!m2.schema.$_match(o3, n2.nest(m2.schema, "pattern.".concat(f2)), a2))
                  continue;
                r2.delete(o3);
                const h2 = n2.localize(u2, l2, { schema: m2.rule, key: o3 }), d = m2.rule.$_validate(c2, h2, a2);
                if (d.errors) {
                  if (a2.abortEarly)
                    return { value: t3, errors: d.errors };
                  s2.push(...d.errors);
                }
                if (m2.matches && i2[f2].push(o3), t3[o3] = d.value, !m2.fallthrough)
                  break;
              }
            }
            if (o2)
              for (let r3 = 0; r3 < i2.length; ++r3) {
                const o3 = i2[r3];
                if (!o3)
                  continue;
                const c2 = e3.$_terms.patterns[r3].matches, f2 = n2.localize(n2.path, l2, c2), m2 = c2.$_validate(o3, f2, a2);
                if (m2.errors) {
                  const r4 = u.details(m2.errors, { override: false });
                  r4.matches = o3;
                  const i3 = e3.$_createError("object.pattern.match", t3, r4, n2, a2);
                  if (a2.abortEarly)
                    return { value: t3, errors: i3 };
                  s2.push(i3);
                }
              }
          }
          if (r2.size && (e3.$_terms.keys || e3.$_terms.patterns)) {
            if (a2.stripUnknown && !e3._flags.unknown || a2.skipFunctions) {
              const e4 = !(!a2.stripUnknown || a2.stripUnknown !== true && !a2.stripUnknown.objects);
              for (const s3 of r2)
                e4 ? (delete t3[s3], r2.delete(s3)) : typeof t3[s3] == "function" && r2.delete(s3);
            }
            if (!l.default(e3._flags.unknown, a2.allowUnknown))
              for (const o2 of r2) {
                const r3 = n2.localize([...n2.path, o2], []), i2 = e3.$_createError("object.unknown", t3[o2], { child: o2 }, r3, a2, { flags: false });
                if (a2.abortEarly)
                  return { value: t3, errors: i2 };
                s2.push(i2);
              }
          }
        }, h.Dependency = class {
          constructor(e3, t3, r2, s2) {
            this.rel = e3, this.key = t3, this.peers = r2, this.paths = s2;
          }
          describe() {
            const e3 = { rel: this.rel, peers: this.paths };
            return this.key !== null && (e3.key = this.key.key), this.peers[0].separator !== "." && (e3.options = { separator: this.peers[0].separator }), e3;
          }
        }, h.Keys = class extends Array {
          concat(e3) {
            const t3 = this.slice(), r2 = new Map();
            for (let e4 = 0; e4 < t3.length; ++e4)
              r2.set(t3[e4].key, e4);
            for (const s2 of e3) {
              const e4 = s2.key, n2 = r2.get(e4);
              n2 !== void 0 ? t3[n2] = { key: e4, schema: t3[n2].schema.concat(s2.schema) } : t3.push(s2);
            }
            return t3;
          }
        };
      }, 8785: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = r(3292), i = r(6354), l = {};
        e2.exports = n.extend({ type: "link", properties: { schemaChain: true }, terms: { link: { init: null, manifest: "single", register: false } }, args: (e3, t3) => e3.ref(t3), validate(e3, { schema: t3, state: r2, prefs: n2 }) {
          s(t3.$_terms.link, "Uninitialized link schema");
          const a2 = l.generate(t3, e3, r2, n2), o2 = t3.$_terms.link[0].ref;
          return a2.$_validate(e3, r2.nest(a2, "link:".concat(o2.display, ":").concat(a2.type)), n2);
        }, generate: (e3, t3, r2, s2) => l.generate(e3, t3, r2, s2), rules: { ref: { method(e3) {
          s(!this.$_terms.link, "Cannot reinitialize schema"), e3 = o.ref(e3), s(e3.type === "value" || e3.type === "local", "Invalid reference type:", e3.type), s(e3.type === "local" || e3.ancestor === "root" || e3.ancestor > 0, "Link cannot reference itself");
          const t3 = this.clone();
          return t3.$_terms.link = [{ ref: e3 }], t3;
        } }, relative: { method(e3 = true) {
          return this.$_setFlag("relative", e3);
        } } }, overrides: { concat(e3) {
          s(this.$_terms.link, "Uninitialized link schema"), s(a.isSchema(e3), "Invalid schema object"), s(e3.type !== "link", "Cannot merge type link with another link");
          const t3 = this.clone();
          return t3.$_terms.whens || (t3.$_terms.whens = []), t3.$_terms.whens.push({ concat: e3 }), t3.$_mutateRebuild();
        } }, manifest: { build: (e3, t3) => (s(t3.link, "Invalid link description missing link"), e3.ref(t3.link)) } }), l.generate = function(e3, t3, r2, s2) {
          let n2 = r2.mainstay.links.get(e3);
          if (n2)
            return n2._generate(t3, r2, s2).schema;
          const a2 = e3.$_terms.link[0].ref, { perspective: o2, path: i2 } = l.perspective(a2, r2);
          l.assert(o2, "which is outside of schema boundaries", a2, e3, r2, s2);
          try {
            n2 = i2.length ? o2.$_reach(i2) : o2;
          } catch (t4) {
            l.assert(false, "to non-existing schema", a2, e3, r2, s2);
          }
          return l.assert(n2.type !== "link", "which is another link", a2, e3, r2, s2), e3._flags.relative || r2.mainstay.links.set(e3, n2), n2._generate(t3, r2, s2).schema;
        }, l.perspective = function(e3, t3) {
          if (e3.type === "local") {
            for (const { schema: r2, key: s2 } of t3.schemas) {
              if ((r2._flags.id || s2) === e3.path[0])
                return { perspective: r2, path: e3.path.slice(1) };
              if (r2.$_terms.shared) {
                for (const t4 of r2.$_terms.shared)
                  if (t4._flags.id === e3.path[0])
                    return { perspective: t4, path: e3.path.slice(1) };
              }
            }
            return { perspective: null, path: null };
          }
          return e3.ancestor === "root" ? { perspective: t3.schemas[t3.schemas.length - 1].schema, path: e3.path } : { perspective: t3.schemas[e3.ancestor] && t3.schemas[e3.ancestor].schema, path: e3.path };
        }, l.assert = function(e3, t3, r2, n2, a2, o2) {
          e3 || s(false, '"'.concat(i.label(n2._flags, a2, o2), '" contains link reference "').concat(r2.display, '" ').concat(t3));
        };
      }, 3832: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = r(8160), o = { numberRx: /^\s*[+-]?(?:(?:\d+(?:\.\d*)?)|(?:\.\d+))(?:e([+-]?\d+))?\s*$/i, precisionRx: /(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/ };
        e2.exports = n.extend({ type: "number", flags: { unsafe: { default: false } }, coerce: { from: "string", method(e3, { schema: t3, error: r2 }) {
          const s2 = e3.match(o.numberRx);
          if (!s2)
            return;
          e3 = e3.trim();
          const n2 = { value: parseFloat(e3) };
          if (n2.value === 0 && (n2.value = 0), !t3._flags.unsafe)
            if (e3.match(/e/i)) {
              if (o.normalizeExponent("".concat(n2.value / Math.pow(10, s2[1]), "e").concat(s2[1])) !== o.normalizeExponent(e3))
                return n2.errors = r2("number.unsafe"), n2;
            } else {
              const t4 = n2.value.toString();
              if (t4.match(/e/i))
                return n2;
              if (t4 !== o.normalizeDecimal(e3))
                return n2.errors = r2("number.unsafe"), n2;
            }
          return n2;
        } }, validate(e3, { schema: t3, error: r2, prefs: s2 }) {
          if (e3 === 1 / 0 || e3 === -1 / 0)
            return { value: e3, errors: r2("number.infinity") };
          if (!a.isNumber(e3))
            return { value: e3, errors: r2("number.base") };
          const n2 = { value: e3 };
          if (s2.convert) {
            const e4 = t3.$_getRule("precision");
            if (e4) {
              const t4 = Math.pow(10, e4.args.limit);
              n2.value = Math.round(n2.value * t4) / t4;
            }
          }
          return n2.value === 0 && (n2.value = 0), !t3._flags.unsafe && (e3 > Number.MAX_SAFE_INTEGER || e3 < Number.MIN_SAFE_INTEGER) && (n2.errors = r2("number.unsafe")), n2;
        }, rules: { compare: { method: false, validate: (e3, t3, { limit: r2 }, { name: s2, operator: n2, args: o2 }) => a.compare(e3, r2, n2) ? e3 : t3.error("number." + s2, { limit: o2.limit, value: e3 }), args: [{ name: "limit", ref: true, assert: a.isNumber, message: "must be a number" }] }, greater: { method(e3) {
          return this.$_addRule({ name: "greater", method: "compare", args: { limit: e3 }, operator: ">" });
        } }, integer: { method() {
          return this.$_addRule("integer");
        }, validate: (e3, t3) => Math.trunc(e3) - e3 == 0 ? e3 : t3.error("number.integer") }, less: { method(e3) {
          return this.$_addRule({ name: "less", method: "compare", args: { limit: e3 }, operator: "<" });
        } }, max: { method(e3) {
          return this.$_addRule({ name: "max", method: "compare", args: { limit: e3 }, operator: "<=" });
        } }, min: { method(e3) {
          return this.$_addRule({ name: "min", method: "compare", args: { limit: e3 }, operator: ">=" });
        } }, multiple: { method(e3) {
          return this.$_addRule({ name: "multiple", args: { base: e3 } });
        }, validate: (e3, t3, { base: r2 }, s2) => e3 * (1 / r2) % 1 == 0 ? e3 : t3.error("number.multiple", { multiple: s2.args.base, value: e3 }), args: [{ name: "base", ref: true, assert: (e3) => typeof e3 == "number" && isFinite(e3) && e3 > 0, message: "must be a positive number" }], multi: true }, negative: { method() {
          return this.sign("negative");
        } }, port: { method() {
          return this.$_addRule("port");
        }, validate: (e3, t3) => Number.isSafeInteger(e3) && e3 >= 0 && e3 <= 65535 ? e3 : t3.error("number.port") }, positive: { method() {
          return this.sign("positive");
        } }, precision: { method(e3) {
          return s(Number.isSafeInteger(e3), "limit must be an integer"), this.$_addRule({ name: "precision", args: { limit: e3 } });
        }, validate(e3, t3, { limit: r2 }) {
          const s2 = e3.toString().match(o.precisionRx);
          return Math.max((s2[1] ? s2[1].length : 0) - (s2[2] ? parseInt(s2[2], 10) : 0), 0) <= r2 ? e3 : t3.error("number.precision", { limit: r2, value: e3 });
        }, convert: true }, sign: { method(e3) {
          return s(["negative", "positive"].includes(e3), "Invalid sign", e3), this.$_addRule({ name: "sign", args: { sign: e3 } });
        }, validate: (e3, t3, { sign: r2 }) => r2 === "negative" && e3 < 0 || r2 === "positive" && e3 > 0 ? e3 : t3.error("number.".concat(r2)) }, unsafe: { method(e3 = true) {
          return s(typeof e3 == "boolean", "enabled must be a boolean"), this.$_setFlag("unsafe", e3);
        } } }, cast: { string: { from: (e3) => typeof e3 == "number", to: (e3, t3) => e3.toString() } }, messages: { "number.base": "{{#label}} must be a number", "number.greater": "{{#label}} must be greater than {{#limit}}", "number.infinity": "{{#label}} cannot be infinity", "number.integer": "{{#label}} must be an integer", "number.less": "{{#label}} must be less than {{#limit}}", "number.max": "{{#label}} must be less than or equal to {{#limit}}", "number.min": "{{#label}} must be greater than or equal to {{#limit}}", "number.multiple": "{{#label}} must be a multiple of {{#multiple}}", "number.negative": "{{#label}} must be a negative number", "number.port": "{{#label}} must be a valid port", "number.positive": "{{#label}} must be a positive number", "number.precision": "{{#label}} must have no more than {{#limit}} decimal places", "number.unsafe": "{{#label}} must be a safe number" } }), o.normalizeExponent = function(e3) {
          return e3.replace(/E/, "e").replace(/\.(\d*[1-9])?0+e/, ".$1e").replace(/\.e/, "e").replace(/e\+/, "e").replace(/^\+/, "").replace(/^(-?)0+([1-9])/, "$1$2");
        }, o.normalizeDecimal = function(e3) {
          return (e3 = e3.replace(/^\+/, "").replace(/\.0*$/, "").replace(/^(-?)\.([^\.]*)$/, "$10.$2").replace(/^(-?)0+([0-9])/, "$1$2")).includes(".") && e3.endsWith("0") && (e3 = e3.replace(/0+$/, "")), e3 === "-0" ? "0" : e3;
        };
      }, 8966: (e2, t2, r) => {
        "use strict";
        const s = r(7824);
        e2.exports = s.extend({ type: "object", cast: { map: { from: (e3) => e3 && typeof e3 == "object", to: (e3, t3) => new Map(Object.entries(e3)) } } });
      }, 7417: (e2, t2, r) => {
        "use strict";
        function s(e3, t3) {
          var r2 = Object.keys(e3);
          if (Object.getOwnPropertySymbols) {
            var s2 = Object.getOwnPropertySymbols(e3);
            t3 && (s2 = s2.filter(function(t4) {
              return Object.getOwnPropertyDescriptor(e3, t4).enumerable;
            })), r2.push.apply(r2, s2);
          }
          return r2;
        }
        function n(e3) {
          for (var t3 = 1; t3 < arguments.length; t3++) {
            var r2 = arguments[t3] != null ? arguments[t3] : {};
            t3 % 2 ? s(Object(r2), true).forEach(function(t4) {
              a(e3, t4, r2[t4]);
            }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e3, Object.getOwnPropertyDescriptors(r2)) : s(Object(r2)).forEach(function(t4) {
              Object.defineProperty(e3, t4, Object.getOwnPropertyDescriptor(r2, t4));
            });
          }
          return e3;
        }
        function a(e3, t3, r2) {
          return t3 in e3 ? Object.defineProperty(e3, t3, { value: r2, enumerable: true, configurable: true, writable: true }) : e3[t3] = r2, e3;
        }
        const o = r(375), i = r(5380), l = r(1745), c = r(9959), u = r(6064), f = r(9926), m = r(5752), h = r(8068), d = r(8160), p = { tlds: f instanceof Set && { tlds: { allow: f, deny: null } }, base64Regex: { true: { true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}==|[\w\-]{3}=)?$/, false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/ }, false: { true: /^(?:[\w\-]{2}[\w\-]{2})*(?:[\w\-]{2}(==)?|[\w\-]{3}=?)?$/, false: /^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}(==)?|[A-Za-z0-9+\/]{3}=?)?$/ } }, dataUriRegex: /^data:[\w+.-]+\/[\w+.-]+;((charset=[\w-]+|base64),)?(.*)$/, hexRegex: /^[a-f0-9]+$/i, ipRegex: c.regex({ cidr: "forbidden" }).regex, isoDurationRegex: /^P(?!$)(\d+Y)?(\d+M)?(\d+W)?(\d+D)?(T(?=\d)(\d+H)?(\d+M)?(\d+S)?)?$/, guidBrackets: { "{": "}", "[": "]", "(": ")", "": "" }, guidVersions: { uuidv1: "1", uuidv2: "2", uuidv3: "3", uuidv4: "4", uuidv5: "5" }, guidSeparators: new Set([void 0, true, false, "-", ":"]), normalizationForms: ["NFC", "NFD", "NFKC", "NFKD"] };
        e2.exports = h.extend({ type: "string", flags: { insensitive: { default: false }, truncate: { default: false } }, terms: { replacements: { init: null } }, coerce: { from: "string", method(e3, { schema: t3, state: r2, prefs: s2 }) {
          const n2 = t3.$_getRule("normalize");
          n2 && (e3 = e3.normalize(n2.args.form));
          const a2 = t3.$_getRule("case");
          a2 && (e3 = a2.args.direction === "upper" ? e3.toLocaleUpperCase() : e3.toLocaleLowerCase());
          const o2 = t3.$_getRule("trim");
          if (o2 && o2.args.enabled && (e3 = e3.trim()), t3.$_terms.replacements)
            for (const r3 of t3.$_terms.replacements)
              e3 = e3.replace(r3.pattern, r3.replacement);
          const i2 = t3.$_getRule("hex");
          if (i2 && i2.args.options.byteAligned && e3.length % 2 != 0 && (e3 = "0".concat(e3)), t3.$_getRule("isoDate")) {
            const t4 = p.isoDate(e3);
            t4 && (e3 = t4);
          }
          if (t3._flags.truncate) {
            const n3 = t3.$_getRule("max");
            if (n3) {
              let a3 = n3.args.limit;
              if (d.isResolvable(a3) && (a3 = a3.resolve(e3, r2, s2), !d.limit(a3)))
                return { value: e3, errors: t3.$_createError("any.ref", a3, { ref: n3.args.limit, arg: "limit", reason: "must be a positive integer" }, r2, s2) };
              e3 = e3.slice(0, a3);
            }
          }
          return { value: e3 };
        } }, validate(e3, { schema: t3, error: r2 }) {
          if (typeof e3 != "string")
            return { value: e3, errors: r2("string.base") };
          if (e3 === "") {
            const s2 = t3.$_getRule("min");
            if (s2 && s2.args.limit === 0)
              return;
            return { value: e3, errors: r2("string.empty") };
          }
        }, rules: { alphanum: { method() {
          return this.$_addRule("alphanum");
        }, validate: (e3, t3) => /^[a-zA-Z0-9]+$/.test(e3) ? e3 : t3.error("string.alphanum") }, base64: { method(e3 = {}) {
          return d.assertOptions(e3, ["paddingRequired", "urlSafe"]), e3 = n({ urlSafe: false, paddingRequired: true }, e3), o(typeof e3.paddingRequired == "boolean", "paddingRequired must be boolean"), o(typeof e3.urlSafe == "boolean", "urlSafe must be boolean"), this.$_addRule({ name: "base64", args: { options: e3 } });
        }, validate: (e3, t3, { options: r2 }) => p.base64Regex[r2.paddingRequired][r2.urlSafe].test(e3) ? e3 : t3.error("string.base64") }, case: { method(e3) {
          return o(["lower", "upper"].includes(e3), "Invalid case:", e3), this.$_addRule({ name: "case", args: { direction: e3 } });
        }, validate: (e3, t3, { direction: r2 }) => r2 === "lower" && e3 === e3.toLocaleLowerCase() || r2 === "upper" && e3 === e3.toLocaleUpperCase() ? e3 : t3.error("string.".concat(r2, "case")), convert: true }, creditCard: { method() {
          return this.$_addRule("creditCard");
        }, validate(e3, t3) {
          let r2 = e3.length, s2 = 0, n2 = 1;
          for (; r2--; ) {
            const t4 = e3.charAt(r2) * n2;
            s2 += t4 - 9 * (t4 > 9), n2 ^= 3;
          }
          return s2 > 0 && s2 % 10 == 0 ? e3 : t3.error("string.creditCard");
        } }, dataUri: { method(e3 = {}) {
          return d.assertOptions(e3, ["paddingRequired"]), e3 = n({ paddingRequired: true }, e3), o(typeof e3.paddingRequired == "boolean", "paddingRequired must be boolean"), this.$_addRule({ name: "dataUri", args: { options: e3 } });
        }, validate(e3, t3, { options: r2 }) {
          const s2 = e3.match(p.dataUriRegex);
          if (s2) {
            if (!s2[2])
              return e3;
            if (s2[2] !== "base64")
              return e3;
            if (p.base64Regex[r2.paddingRequired].false.test(s2[3]))
              return e3;
          }
          return t3.error("string.dataUri");
        } }, domain: { method(e3) {
          e3 && d.assertOptions(e3, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
          const t3 = p.addressOptions(e3);
          return this.$_addRule({ name: "domain", args: { options: e3 }, address: t3 });
        }, validate: (e3, t3, r2, { address: s2 }) => i.isValid(e3, s2) ? e3 : t3.error("string.domain") }, email: { method(e3 = {}) {
          d.assertOptions(e3, ["allowFullyQualified", "allowUnicode", "ignoreLength", "maxDomainSegments", "minDomainSegments", "multiple", "separator", "tlds"]), o(e3.multiple === void 0 || typeof e3.multiple == "boolean", "multiple option must be an boolean");
          const t3 = p.addressOptions(e3), r2 = new RegExp("\\s*[".concat(e3.separator ? u(e3.separator) : ",", "]\\s*"));
          return this.$_addRule({ name: "email", args: { options: e3 }, regex: r2, address: t3 });
        }, validate(e3, t3, { options: r2 }, { regex: s2, address: n2 }) {
          const a2 = r2.multiple ? e3.split(s2) : [e3], o2 = [];
          for (const e4 of a2)
            l.isValid(e4, n2) || o2.push(e4);
          return o2.length ? t3.error("string.email", { value: e3, invalids: o2 }) : e3;
        } }, guid: { alias: "uuid", method(e3 = {}) {
          d.assertOptions(e3, ["version", "separator"]);
          let t3 = "";
          if (e3.version) {
            const r3 = [].concat(e3.version);
            o(r3.length >= 1, "version must have at least 1 valid version specified");
            const s3 = new Set();
            for (let e4 = 0; e4 < r3.length; ++e4) {
              const n2 = r3[e4];
              o(typeof n2 == "string", "version at position " + e4 + " must be a string");
              const a2 = p.guidVersions[n2.toLowerCase()];
              o(a2, "version at position " + e4 + " must be one of " + Object.keys(p.guidVersions).join(", ")), o(!s3.has(a2), "version at position " + e4 + " must not be a duplicate"), t3 += a2, s3.add(a2);
            }
          }
          o(p.guidSeparators.has(e3.separator), 'separator must be one of true, false, "-", or ":"');
          const r2 = e3.separator === void 0 ? "[:-]?" : e3.separator === true ? "[:-]" : e3.separator === false ? "[]?" : "\\".concat(e3.separator), s2 = new RegExp("^([\\[{\\(]?)[0-9A-F]{8}(".concat(r2, ")[0-9A-F]{4}\\2?[").concat(t3 || "0-9A-F", "][0-9A-F]{3}\\2?[").concat(t3 ? "89AB" : "0-9A-F", "][0-9A-F]{3}\\2?[0-9A-F]{12}([\\]}\\)]?)$"), "i");
          return this.$_addRule({ name: "guid", args: { options: e3 }, regex: s2 });
        }, validate(e3, t3, r2, { regex: s2 }) {
          const n2 = s2.exec(e3);
          return n2 ? p.guidBrackets[n2[1]] !== n2[n2.length - 1] ? t3.error("string.guid") : e3 : t3.error("string.guid");
        } }, hex: { method(e3 = {}) {
          return d.assertOptions(e3, ["byteAligned"]), e3 = n({ byteAligned: false }, e3), o(typeof e3.byteAligned == "boolean", "byteAligned must be boolean"), this.$_addRule({ name: "hex", args: { options: e3 } });
        }, validate: (e3, t3, { options: r2 }) => p.hexRegex.test(e3) ? r2.byteAligned && e3.length % 2 != 0 ? t3.error("string.hexAlign") : e3 : t3.error("string.hex") }, hostname: { method() {
          return this.$_addRule("hostname");
        }, validate: (e3, t3) => i.isValid(e3, { minDomainSegments: 1 }) || p.ipRegex.test(e3) ? e3 : t3.error("string.hostname") }, insensitive: { method() {
          return this.$_setFlag("insensitive", true);
        } }, ip: { method(e3 = {}) {
          d.assertOptions(e3, ["cidr", "version"]);
          const { cidr: t3, versions: r2, regex: s2 } = c.regex(e3), n2 = e3.version ? r2 : void 0;
          return this.$_addRule({ name: "ip", args: { options: { cidr: t3, version: n2 } }, regex: s2 });
        }, validate: (e3, t3, { options: r2 }, { regex: s2 }) => s2.test(e3) ? e3 : r2.version ? t3.error("string.ipVersion", { value: e3, cidr: r2.cidr, version: r2.version }) : t3.error("string.ip", { value: e3, cidr: r2.cidr }) }, isoDate: { method() {
          return this.$_addRule("isoDate");
        }, validate: (e3, { error: t3 }) => p.isoDate(e3) ? e3 : t3("string.isoDate") }, isoDuration: { method() {
          return this.$_addRule("isoDuration");
        }, validate: (e3, t3) => p.isoDurationRegex.test(e3) ? e3 : t3.error("string.isoDuration") }, length: { method(e3, t3) {
          return p.length(this, "length", e3, "=", t3);
        }, validate(e3, t3, { limit: r2, encoding: s2 }, { name: n2, operator: a2, args: o2 }) {
          const i2 = !s2 && e3.length;
          return d.compare(i2, r2, a2) ? e3 : t3.error("string." + n2, { limit: o2.limit, value: e3, encoding: s2 });
        }, args: [{ name: "limit", ref: true, assert: d.limit, message: "must be a positive integer" }, "encoding"] }, lowercase: { method() {
          return this.case("lower");
        } }, max: { method(e3, t3) {
          return p.length(this, "max", e3, "<=", t3);
        }, args: ["limit", "encoding"] }, min: { method(e3, t3) {
          return p.length(this, "min", e3, ">=", t3);
        }, args: ["limit", "encoding"] }, normalize: { method(e3 = "NFC") {
          return o(p.normalizationForms.includes(e3), "normalization form must be one of " + p.normalizationForms.join(", ")), this.$_addRule({ name: "normalize", args: { form: e3 } });
        }, validate: (e3, { error: t3 }, { form: r2 }) => e3 === e3.normalize(r2) ? e3 : t3("string.normalize", { value: e3, form: r2 }), convert: true }, pattern: { alias: "regex", method(e3, t3 = {}) {
          o(e3 instanceof RegExp, "regex must be a RegExp"), o(!e3.flags.includes("g") && !e3.flags.includes("y"), "regex should not use global or sticky mode"), typeof t3 == "string" && (t3 = { name: t3 }), d.assertOptions(t3, ["invert", "name"]);
          const r2 = ["string.pattern", t3.invert ? ".invert" : "", t3.name ? ".name" : ".base"].join("");
          return this.$_addRule({ name: "pattern", args: { regex: e3, options: t3 }, errorCode: r2 });
        }, validate: (e3, t3, { regex: r2, options: s2 }, { errorCode: n2 }) => r2.test(e3) ^ s2.invert ? e3 : t3.error(n2, { name: s2.name, regex: r2, value: e3 }), args: ["regex", "options"], multi: true }, replace: { method(e3, t3) {
          typeof e3 == "string" && (e3 = new RegExp(u(e3), "g")), o(e3 instanceof RegExp, "pattern must be a RegExp"), o(typeof t3 == "string", "replacement must be a String");
          const r2 = this.clone();
          return r2.$_terms.replacements || (r2.$_terms.replacements = []), r2.$_terms.replacements.push({ pattern: e3, replacement: t3 }), r2;
        } }, token: { method() {
          return this.$_addRule("token");
        }, validate: (e3, t3) => /^\w+$/.test(e3) ? e3 : t3.error("string.token") }, trim: { method(e3 = true) {
          return o(typeof e3 == "boolean", "enabled must be a boolean"), this.$_addRule({ name: "trim", args: { enabled: e3 } });
        }, validate: (e3, t3, { enabled: r2 }) => r2 && e3 !== e3.trim() ? t3.error("string.trim") : e3, convert: true }, truncate: { method(e3 = true) {
          return o(typeof e3 == "boolean", "enabled must be a boolean"), this.$_setFlag("truncate", e3);
        } }, uppercase: { method() {
          return this.case("upper");
        } }, uri: { method(e3 = {}) {
          d.assertOptions(e3, ["allowRelative", "allowQuerySquareBrackets", "domain", "relativeOnly", "scheme"]), e3.domain && d.assertOptions(e3.domain, ["allowFullyQualified", "allowUnicode", "maxDomainSegments", "minDomainSegments", "tlds"]);
          const { regex: t3, scheme: r2 } = m.regex(e3), s2 = e3.domain ? p.addressOptions(e3.domain) : null;
          return this.$_addRule({ name: "uri", args: { options: e3 }, regex: t3, domain: s2, scheme: r2 });
        }, validate(e3, t3, { options: r2 }, { regex: s2, domain: n2, scheme: a2 }) {
          if (["http:/", "https:/"].includes(e3))
            return t3.error("string.uri");
          const o2 = s2.exec(e3);
          if (o2) {
            const s3 = o2[1] || o2[2];
            return !n2 || r2.allowRelative && !s3 || i.isValid(s3, n2) ? e3 : t3.error("string.domain", { value: s3 });
          }
          return r2.relativeOnly ? t3.error("string.uriRelativeOnly") : r2.scheme ? t3.error("string.uriCustomScheme", { scheme: a2, value: e3 }) : t3.error("string.uri");
        } } }, manifest: { build(e3, t3) {
          if (t3.replacements)
            for (const { pattern: r2, replacement: s2 } of t3.replacements)
              e3 = e3.replace(r2, s2);
          return e3;
        } }, messages: { "string.alphanum": "{{#label}} must only contain alpha-numeric characters", "string.base": "{{#label}} must be a string", "string.base64": "{{#label}} must be a valid base64 string", "string.creditCard": "{{#label}} must be a credit card", "string.dataUri": "{{#label}} must be a valid dataUri string", "string.domain": "{{#label}} must contain a valid domain name", "string.email": "{{#label}} must be a valid email", "string.empty": "{{#label}} is not allowed to be empty", "string.guid": "{{#label}} must be a valid GUID", "string.hex": "{{#label}} must only contain hexadecimal characters", "string.hexAlign": "{{#label}} hex decoded representation must be byte aligned", "string.hostname": "{{#label}} must be a valid hostname", "string.ip": "{{#label}} must be a valid ip address with a {{#cidr}} CIDR", "string.ipVersion": "{{#label}} must be a valid ip address of one of the following versions {{#version}} with a {{#cidr}} CIDR", "string.isoDate": "{{#label}} must be in iso format", "string.isoDuration": "{{#label}} must be a valid ISO 8601 duration", "string.length": "{{#label}} length must be {{#limit}} characters long", "string.lowercase": "{{#label}} must only contain lowercase characters", "string.max": "{{#label}} length must be less than or equal to {{#limit}} characters long", "string.min": "{{#label}} length must be at least {{#limit}} characters long", "string.normalize": "{{#label}} must be unicode normalized in the {{#form}} form", "string.token": "{{#label}} must only contain alpha-numeric and underscore characters", "string.pattern.base": "{{#label}} with value {:[.]} fails to match the required pattern: {{#regex}}", "string.pattern.name": "{{#label}} with value {:[.]} fails to match the {{#name}} pattern", "string.pattern.invert.base": "{{#label}} with value {:[.]} matches the inverted pattern: {{#regex}}", "string.pattern.invert.name": "{{#label}} with value {:[.]} matches the inverted {{#name}} pattern", "string.trim": "{{#label}} must not have leading or trailing whitespace", "string.uri": "{{#label}} must be a valid uri", "string.uriCustomScheme": "{{#label}} must be a valid uri with a scheme matching the {{#scheme}} pattern", "string.uriRelativeOnly": "{{#label}} must be a valid relative uri", "string.uppercase": "{{#label}} must only contain uppercase characters" } }), p.addressOptions = function(e3) {
          if (!e3)
            return e3;
          if (o(e3.minDomainSegments === void 0 || Number.isSafeInteger(e3.minDomainSegments) && e3.minDomainSegments > 0, "minDomainSegments must be a positive integer"), o(e3.maxDomainSegments === void 0 || Number.isSafeInteger(e3.maxDomainSegments) && e3.maxDomainSegments > 0, "maxDomainSegments must be a positive integer"), e3.tlds === false)
            return e3;
          if (e3.tlds === true || e3.tlds === void 0)
            return o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e3, p.tlds);
          o(typeof e3.tlds == "object", "tlds must be true, false, or an object");
          const t3 = e3.tlds.deny;
          if (t3)
            return Array.isArray(t3) && (e3 = Object.assign({}, e3, { tlds: { deny: new Set(t3) } })), o(e3.tlds.deny instanceof Set, "tlds.deny must be an array, Set, or boolean"), o(!e3.tlds.allow, "Cannot specify both tlds.allow and tlds.deny lists"), p.validateTlds(e3.tlds.deny, "tlds.deny"), e3;
          const r2 = e3.tlds.allow;
          return r2 ? r2 === true ? (o(p.tlds, "Built-in TLD list disabled"), Object.assign({}, e3, p.tlds)) : (Array.isArray(r2) && (e3 = Object.assign({}, e3, { tlds: { allow: new Set(r2) } })), o(e3.tlds.allow instanceof Set, "tlds.allow must be an array, Set, or boolean"), p.validateTlds(e3.tlds.allow, "tlds.allow"), e3) : e3;
        }, p.validateTlds = function(e3, t3) {
          for (const r2 of e3)
            o(i.isValid(r2, { minDomainSegments: 1, maxDomainSegments: 1 }), "".concat(t3, " must contain valid top level domain names"));
        }, p.isoDate = function(e3) {
          if (!d.isIsoDate(e3))
            return null;
          /.*T.*[+-]\d\d$/.test(e3) && (e3 += "00");
          const t3 = new Date(e3);
          return isNaN(t3.getTime()) ? null : t3.toISOString();
        }, p.length = function(e3, t3, r2, s2, n2) {
          return o(!n2 || false, "Invalid encoding:", n2), e3.$_addRule({ name: t3, method: "length", args: { limit: r2, encoding: n2 }, operator: s2 });
        };
      }, 8826: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8068), a = {};
        a.Map = class extends Map {
          slice() {
            return new a.Map(this);
          }
        }, e2.exports = n.extend({ type: "symbol", terms: { map: { init: new a.Map() } }, coerce: { method(e3, { schema: t3, error: r2 }) {
          const s2 = t3.$_terms.map.get(e3);
          return s2 && (e3 = s2), t3._flags.only && typeof e3 != "symbol" ? { value: e3, errors: r2("symbol.map", { map: t3.$_terms.map }) } : { value: e3 };
        } }, validate(e3, { error: t3 }) {
          if (typeof e3 != "symbol")
            return { value: e3, errors: t3("symbol.base") };
        }, rules: { map: { method(e3) {
          e3 && !e3[Symbol.iterator] && typeof e3 == "object" && (e3 = Object.entries(e3)), s(e3 && e3[Symbol.iterator], "Iterable must be an iterable or object");
          const t3 = this.clone(), r2 = [];
          for (const n2 of e3) {
            s(n2 && n2[Symbol.iterator], "Entry must be an iterable");
            const [e4, a2] = n2;
            s(typeof e4 != "object" && typeof e4 != "function" && typeof e4 != "symbol", "Key must not be of type object, function, or Symbol"), s(typeof a2 == "symbol", "Value must be a Symbol"), t3.$_terms.map.set(e4, a2), r2.push(a2);
          }
          return t3.valid(...r2);
        } } }, manifest: { build: (e3, t3) => (t3.map && (e3 = e3.map(t3.map)), e3) }, messages: { "symbol.base": "{{#label}} must be a symbol", "symbol.map": "{{#label}} must be one of {{#map}}" } });
      }, 8863: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(738), o = r(9621), i = r(8160), l = r(6354), c = r(493), u = { result: Symbol("result") };
        t2.entry = function(e3, t3, r2) {
          let n2 = i.defaults;
          r2 && (s(r2.warnings === void 0, "Cannot override warnings preference in synchronous validation"), s(r2.artifacts === void 0, "Cannot override artifacts preference in synchronous validation"), n2 = i.preferences(i.defaults, r2));
          const a2 = u.entry(e3, t3, n2);
          s(!a2.mainstay.externals.length, "Schema with external rules must use validateAsync()");
          const o2 = { value: a2.value };
          return a2.error && (o2.error = a2.error), a2.mainstay.warnings.length && (o2.warning = l.details(a2.mainstay.warnings)), a2.mainstay.debug && (o2.debug = a2.mainstay.debug), a2.mainstay.artifacts && (o2.artifacts = a2.mainstay.artifacts), o2;
        }, t2.entryAsync = async function(e3, t3, r2) {
          let s2 = i.defaults;
          r2 && (s2 = i.preferences(i.defaults, r2));
          const n2 = u.entry(e3, t3, s2), a2 = n2.mainstay;
          if (n2.error)
            throw a2.debug && (n2.error.debug = a2.debug), n2.error;
          if (a2.externals.length) {
            let e4 = n2.value;
            for (const { method: t4, path: n3, label: i2 } of a2.externals) {
              let a3, l2, c3 = e4;
              n3.length && (a3 = n3[n3.length - 1], l2 = o(e4, n3.slice(0, -1)), c3 = l2[a3]);
              try {
                const s3 = await t4(c3, { prefs: r2 });
                if (s3 === void 0 || s3 === c3)
                  continue;
                l2 ? l2[a3] = s3 : e4 = s3;
              } catch (e5) {
                throw s2.errors.label && (e5.message += " (".concat(i2, ")")), e5;
              }
            }
            n2.value = e4;
          }
          if (!s2.warnings && !s2.debug && !s2.artifacts)
            return n2.value;
          const c2 = { value: n2.value };
          return a2.warnings.length && (c2.warning = l.details(a2.warnings)), a2.debug && (c2.debug = a2.debug), a2.artifacts && (c2.artifacts = a2.artifacts), c2;
        }, u.entry = function(e3, r2, s2) {
          const { tracer: n2, cleanup: a2 } = u.tracer(r2, s2), o2 = { externals: [], warnings: [], tracer: n2, debug: s2.debug ? [] : null, links: r2._ids._schemaChain ? new Map() : null }, i2 = r2._ids._schemaChain ? [{ schema: r2 }] : null, f = new c([], [], { mainstay: o2, schemas: i2 }), m = t2.validate(e3, r2, f, s2);
          a2 && r2.$_root.untrace();
          const h = l.process(m.errors, e3, s2);
          return { value: m.value, error: h, mainstay: o2 };
        }, u.tracer = function(e3, t3) {
          return e3.$_root._tracer ? { tracer: e3.$_root._tracer._register(e3) } : t3.debug ? (s(e3.$_root.trace, "Debug mode not supported"), { tracer: e3.$_root.trace()._register(e3), cleanup: true }) : { tracer: u.ignore };
        }, t2.validate = function(e3, t3, r2, s2, n2 = {}) {
          if (t3.$_terms.whens && (t3 = t3._generate(e3, r2, s2).schema), t3._preferences && (s2 = u.prefs(t3, s2)), t3._cache && s2.cache) {
            const s3 = t3._cache.get(e3);
            if (r2.mainstay.tracer.debug(r2, "validate", "cached", !!s3), s3)
              return s3;
          }
          const a2 = (n3, a3, o3) => t3.$_createError(n3, e3, a3, o3 || r2, s2), o2 = { original: e3, prefs: s2, schema: t3, state: r2, error: a2, errorsArray: u.errorsArray, warn: (e4, t4, s3) => r2.mainstay.warnings.push(a2(e4, t4, s3)), message: (n3, a3) => t3.$_createError("custom", e3, a3, r2, s2, { messages: n3 }) };
          r2.mainstay.tracer.entry(t3, r2);
          const l2 = t3._definition;
          if (l2.prepare && e3 !== void 0 && s2.convert) {
            const t4 = l2.prepare(e3, o2);
            if (t4) {
              if (r2.mainstay.tracer.value(r2, "prepare", e3, t4.value), t4.errors)
                return u.finalize(t4.value, [].concat(t4.errors), o2);
              e3 = t4.value;
            }
          }
          if (l2.coerce && e3 !== void 0 && s2.convert && (!l2.coerce.from || l2.coerce.from.includes(typeof e3))) {
            const t4 = l2.coerce.method(e3, o2);
            if (t4) {
              if (r2.mainstay.tracer.value(r2, "coerced", e3, t4.value), t4.errors)
                return u.finalize(t4.value, [].concat(t4.errors), o2);
              e3 = t4.value;
            }
          }
          const c2 = t3._flags.empty;
          c2 && c2.$_match(u.trim(e3, t3), r2.nest(c2), i.defaults) && (r2.mainstay.tracer.value(r2, "empty", e3, void 0), e3 = void 0);
          const f = n2.presence || t3._flags.presence || (t3._flags._endedSwitch ? null : s2.presence);
          if (e3 === void 0) {
            if (f === "forbidden")
              return u.finalize(e3, null, o2);
            if (f === "required")
              return u.finalize(e3, [t3.$_createError("any.required", e3, null, r2, s2)], o2);
            if (f === "optional") {
              if (t3._flags.default !== i.symbols.deepDefault)
                return u.finalize(e3, null, o2);
              r2.mainstay.tracer.value(r2, "default", e3, {}), e3 = {};
            }
          } else if (f === "forbidden")
            return u.finalize(e3, [t3.$_createError("any.unknown", e3, null, r2, s2)], o2);
          const m = [];
          if (t3._valids) {
            const n3 = t3._valids.get(e3, r2, s2, t3._flags.insensitive);
            if (n3)
              return s2.convert && (r2.mainstay.tracer.value(r2, "valids", e3, n3.value), e3 = n3.value), r2.mainstay.tracer.filter(t3, r2, "valid", n3), u.finalize(e3, null, o2);
            if (t3._flags.only) {
              const n4 = t3.$_createError("any.only", e3, { valids: t3._valids.values({ display: true }) }, r2, s2);
              if (s2.abortEarly)
                return u.finalize(e3, [n4], o2);
              m.push(n4);
            }
          }
          if (t3._invalids) {
            const n3 = t3._invalids.get(e3, r2, s2, t3._flags.insensitive);
            if (n3) {
              r2.mainstay.tracer.filter(t3, r2, "invalid", n3);
              const a3 = t3.$_createError("any.invalid", e3, { invalids: t3._invalids.values({ display: true }) }, r2, s2);
              if (s2.abortEarly)
                return u.finalize(e3, [a3], o2);
              m.push(a3);
            }
          }
          if (l2.validate) {
            const t4 = l2.validate(e3, o2);
            if (t4 && (r2.mainstay.tracer.value(r2, "base", e3, t4.value), e3 = t4.value, t4.errors)) {
              if (!Array.isArray(t4.errors))
                return m.push(t4.errors), u.finalize(e3, m, o2);
              if (t4.errors.length)
                return m.push(...t4.errors), u.finalize(e3, m, o2);
            }
          }
          return t3._rules.length ? u.rules(e3, m, o2) : u.finalize(e3, m, o2);
        }, u.rules = function(e3, t3, r2) {
          const { schema: s2, state: n2, prefs: a2 } = r2;
          for (const o2 of s2._rules) {
            const l2 = s2._definition.rules[o2.method];
            if (l2.convert && a2.convert) {
              n2.mainstay.tracer.log(s2, n2, "rule", o2.name, "full");
              continue;
            }
            let c2, f = o2.args;
            if (o2._resolve.length) {
              f = Object.assign({}, f);
              for (const t4 of o2._resolve) {
                const r3 = l2.argsByName.get(t4), o3 = f[t4].resolve(e3, n2, a2), u2 = r3.normalize ? r3.normalize(o3) : o3, m2 = i.validateArg(u2, null, r3);
                if (m2) {
                  c2 = s2.$_createError("any.ref", o3, { arg: t4, ref: f[t4], reason: m2 }, n2, a2);
                  break;
                }
                f[t4] = u2;
              }
            }
            c2 = c2 || l2.validate(e3, r2, f, o2);
            const m = u.rule(c2, o2);
            if (m.errors) {
              if (n2.mainstay.tracer.log(s2, n2, "rule", o2.name, "error"), o2.warn) {
                n2.mainstay.warnings.push(...m.errors);
                continue;
              }
              if (a2.abortEarly)
                return u.finalize(e3, m.errors, r2);
              t3.push(...m.errors);
            } else
              n2.mainstay.tracer.log(s2, n2, "rule", o2.name, "pass"), n2.mainstay.tracer.value(n2, "rule", e3, m.value, o2.name), e3 = m.value;
          }
          return u.finalize(e3, t3, r2);
        }, u.rule = function(e3, t3) {
          return e3 instanceof l.Report ? (u.error(e3, t3), { errors: [e3], value: null }) : Array.isArray(e3) && e3[i.symbols.errors] ? (e3.forEach((e4) => u.error(e4, t3)), { errors: e3, value: null }) : { errors: null, value: e3 };
        }, u.error = function(e3, t3) {
          return t3.message && e3._setTemplate(t3.message), e3;
        }, u.finalize = function(e3, t3, r2) {
          t3 = t3 || [];
          const { schema: n2, state: a2, prefs: o2 } = r2;
          if (t3.length) {
            const s2 = u.default("failover", void 0, t3, r2);
            s2 !== void 0 && (a2.mainstay.tracer.value(a2, "failover", e3, s2), e3 = s2, t3 = []);
          }
          if (t3.length && n2._flags.error)
            if (typeof n2._flags.error == "function") {
              t3 = n2._flags.error(t3), Array.isArray(t3) || (t3 = [t3]);
              for (const e4 of t3)
                s(e4 instanceof Error || e4 instanceof l.Report, "error() must return an Error object");
            } else
              t3 = [n2._flags.error];
          if (e3 === void 0) {
            const s2 = u.default("default", e3, t3, r2);
            a2.mainstay.tracer.value(a2, "default", e3, s2), e3 = s2;
          }
          if (n2._flags.cast && e3 !== void 0) {
            const t4 = n2._definition.cast[n2._flags.cast];
            if (t4.from(e3)) {
              const s2 = t4.to(e3, r2);
              a2.mainstay.tracer.value(a2, "cast", e3, s2, n2._flags.cast), e3 = s2;
            }
          }
          if (n2.$_terms.externals && o2.externals && o2._externals !== false)
            for (const { method: e4 } of n2.$_terms.externals)
              a2.mainstay.externals.push({ method: e4, path: a2.path, label: l.label(n2._flags, a2, o2) });
          const i2 = { value: e3, errors: t3.length ? t3 : null };
          return n2._flags.result && (i2.value = n2._flags.result === "strip" ? void 0 : r2.original, a2.mainstay.tracer.value(a2, n2._flags.result, e3, i2.value), a2.shadow(e3, n2._flags.result)), n2._cache && o2.cache !== false && !n2._refs.length && n2._cache.set(r2.original, i2), e3 === void 0 || i2.errors || n2._flags.artifact === void 0 || (a2.mainstay.artifacts = a2.mainstay.artifacts || new Map(), a2.mainstay.artifacts.has(n2._flags.artifact) || a2.mainstay.artifacts.set(n2._flags.artifact, []), a2.mainstay.artifacts.get(n2._flags.artifact).push(a2.path)), i2;
        }, u.prefs = function(e3, t3) {
          const r2 = t3 === i.defaults;
          return r2 && e3._preferences[i.symbols.prefs] ? e3._preferences[i.symbols.prefs] : (t3 = i.preferences(t3, e3._preferences), r2 && (e3._preferences[i.symbols.prefs] = t3), t3);
        }, u.default = function(e3, t3, r2, s2) {
          const { schema: a2, state: o2, prefs: l2 } = s2, c2 = a2._flags[e3];
          if (l2.noDefaults || c2 === void 0)
            return t3;
          if (o2.mainstay.tracer.log(a2, o2, "rule", e3, "full"), !c2)
            return c2;
          if (typeof c2 == "function") {
            const t4 = c2.length ? [n(o2.ancestors[0]), s2] : [];
            try {
              return c2(...t4);
            } catch (t5) {
              return void r2.push(a2.$_createError("any.".concat(e3), null, { error: t5 }, o2, l2));
            }
          }
          return typeof c2 != "object" ? c2 : c2[i.symbols.literal] ? c2.literal : i.isResolvable(c2) ? c2.resolve(t3, o2, l2) : n(c2);
        }, u.trim = function(e3, t3) {
          if (typeof e3 != "string")
            return e3;
          const r2 = t3.$_getRule("trim");
          return r2 && r2.args.enabled ? e3.trim() : e3;
        }, u.ignore = { active: false, debug: a, entry: a, filter: a, log: a, resolve: a, value: a }, u.errorsArray = function() {
          const e3 = [];
          return e3[i.symbols.errors] = true, e3;
        };
      }, 2036: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(9474), a = r(8160), o = {};
        e2.exports = o.Values = class {
          constructor(e3, t3) {
            this._values = new Set(e3), this._refs = new Set(t3), this._lowercase = o.lowercases(e3), this._override = false;
          }
          get length() {
            return this._values.size + this._refs.size;
          }
          add(e3, t3) {
            a.isResolvable(e3) ? this._refs.has(e3) || (this._refs.add(e3), t3 && t3.register(e3)) : this.has(e3, null, null, false) || (this._values.add(e3), typeof e3 == "string" && this._lowercase.set(e3.toLowerCase(), e3));
          }
          static merge(e3, t3, r2) {
            if (e3 = e3 || new o.Values(), t3) {
              if (t3._override)
                return t3.clone();
              for (const r3 of [...t3._values, ...t3._refs])
                e3.add(r3);
            }
            if (r2)
              for (const t4 of [...r2._values, ...r2._refs])
                e3.remove(t4);
            return e3.length ? e3 : null;
          }
          remove(e3) {
            a.isResolvable(e3) ? this._refs.delete(e3) : (this._values.delete(e3), typeof e3 == "string" && this._lowercase.delete(e3.toLowerCase()));
          }
          has(e3, t3, r2, s2) {
            return !!this.get(e3, t3, r2, s2);
          }
          get(e3, t3, r2, s2) {
            if (!this.length)
              return false;
            if (this._values.has(e3))
              return { value: e3 };
            if (typeof e3 == "string" && e3 && s2) {
              const t4 = this._lowercase.get(e3.toLowerCase());
              if (t4)
                return { value: t4 };
            }
            if (!this._refs.size && typeof e3 != "object")
              return false;
            if (typeof e3 == "object") {
              for (const t4 of this._values)
                if (n(t4, e3))
                  return { value: t4 };
            }
            if (t3)
              for (const a2 of this._refs) {
                const o2 = a2.resolve(e3, t3, r2, null, { in: true });
                if (o2 === void 0)
                  continue;
                const i = a2.in && typeof o2 == "object" ? Array.isArray(o2) ? o2 : Object.keys(o2) : [o2];
                for (const t4 of i)
                  if (typeof t4 == typeof e3) {
                    if (s2 && e3 && typeof e3 == "string") {
                      if (t4.toLowerCase() === e3.toLowerCase())
                        return { value: t4, ref: a2 };
                    } else if (n(t4, e3))
                      return { value: t4, ref: a2 };
                  }
              }
            return false;
          }
          override() {
            this._override = true;
          }
          values(e3) {
            if (e3 && e3.display) {
              const e4 = [];
              for (const t3 of [...this._values, ...this._refs])
                t3 !== void 0 && e4.push(t3);
              return e4;
            }
            return Array.from([...this._values, ...this._refs]);
          }
          clone() {
            const e3 = new o.Values(this._values, this._refs);
            return e3._override = this._override, e3;
          }
          concat(e3) {
            s(!e3._override, "Cannot concat override set of values");
            const t3 = new o.Values([...this._values, ...e3._values], [...this._refs, ...e3._refs]);
            return t3._override = this._override, t3;
          }
          describe() {
            const e3 = [];
            this._override && e3.push({ override: true });
            for (const t3 of this._values.values())
              e3.push(t3 && typeof t3 == "object" ? { value: t3 } : t3);
            for (const t3 of this._refs.values())
              e3.push(t3.describe());
            return e3;
          }
        }, o.Values.prototype[a.symbols.values] = true, o.Values.prototype.slice = o.Values.prototype.clone, o.lowercases = function(e3) {
          const t3 = new Map();
          if (e3)
            for (const r2 of e3)
              typeof r2 == "string" && t3.set(r2.toLowerCase(), r2);
          return t3;
        };
      }, 978: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(1687), o = r(9621), i = {};
        e2.exports = function(e3, t3, r2 = {}) {
          if (s(e3 && typeof e3 == "object", "Invalid defaults value: must be an object"), s(!t3 || t3 === true || typeof t3 == "object", "Invalid source value: must be true, falsy or an object"), s(typeof r2 == "object", "Invalid options: must be an object"), !t3)
            return null;
          if (r2.shallow)
            return i.applyToDefaultsWithShallow(e3, t3, r2);
          const o2 = n(e3);
          if (t3 === true)
            return o2;
          const l = r2.nullOverride !== void 0 && r2.nullOverride;
          return a(o2, t3, { nullOverride: l, mergeArrays: false });
        }, i.applyToDefaultsWithShallow = function(e3, t3, r2) {
          const l = r2.shallow;
          s(Array.isArray(l), "Invalid keys");
          const c = new Map(), u = t3 === true ? null : new Set();
          for (let r3 of l) {
            r3 = Array.isArray(r3) ? r3 : r3.split(".");
            const s2 = o(e3, r3);
            s2 && typeof s2 == "object" ? c.set(s2, u && o(t3, r3) || s2) : u && u.add(r3);
          }
          const f = n(e3, {}, c);
          if (!u)
            return f;
          for (const e4 of u)
            i.reachCopy(f, t3, e4);
          const m = r2.nullOverride !== void 0 && r2.nullOverride;
          return a(f, t3, { nullOverride: m, mergeArrays: false });
        }, i.reachCopy = function(e3, t3, r2) {
          for (const e4 of r2) {
            if (!(e4 in t3))
              return;
            const r3 = t3[e4];
            if (typeof r3 != "object" || r3 === null)
              return;
            t3 = r3;
          }
          const s2 = t3;
          let n2 = e3;
          for (let e4 = 0; e4 < r2.length - 1; ++e4) {
            const t4 = r2[e4];
            typeof n2[t4] != "object" && (n2[t4] = {}), n2 = n2[t4];
          }
          n2[r2[r2.length - 1]] = s2;
        };
      }, 375: (e2, t2, r) => {
        "use strict";
        const s = r(7916);
        e2.exports = function(e3, ...t3) {
          if (!e3) {
            if (t3.length === 1 && t3[0] instanceof Error)
              throw t3[0];
            throw new s(t3);
          }
        };
      }, 8571: (e2, t2, r) => {
        "use strict";
        const s = r(9621), n = r(4277), a = r(7043), o = { needsProtoHack: new Set([n.set, n.map, n.weakSet, n.weakMap]) };
        e2.exports = o.clone = function(e3, t3 = {}, r2 = null) {
          if (typeof e3 != "object" || e3 === null)
            return e3;
          let s2 = o.clone, i = r2;
          if (t3.shallow) {
            if (t3.shallow !== true)
              return o.cloneWithShallow(e3, t3);
            s2 = (e4) => e4;
          } else if (i) {
            const t4 = i.get(e3);
            if (t4)
              return t4;
          } else
            i = new Map();
          const l = n.getInternalProto(e3);
          if (l === n.buffer)
            return false;
          if (l === n.date)
            return new Date(e3.getTime());
          if (l === n.regex)
            return new RegExp(e3);
          const c = o.base(e3, l, t3);
          if (c === e3)
            return e3;
          if (i && i.set(e3, c), l === n.set)
            for (const r3 of e3)
              c.add(s2(r3, t3, i));
          else if (l === n.map)
            for (const [r3, n2] of e3)
              c.set(r3, s2(n2, t3, i));
          const u = a.keys(e3, t3);
          for (const r3 of u) {
            if (r3 === "__proto__")
              continue;
            if (l === n.array && r3 === "length") {
              c.length = e3.length;
              continue;
            }
            const a2 = Object.getOwnPropertyDescriptor(e3, r3);
            a2 ? a2.get || a2.set ? Object.defineProperty(c, r3, a2) : a2.enumerable ? c[r3] = s2(e3[r3], t3, i) : Object.defineProperty(c, r3, { enumerable: false, writable: true, configurable: true, value: s2(e3[r3], t3, i) }) : Object.defineProperty(c, r3, { enumerable: true, writable: true, configurable: true, value: s2(e3[r3], t3, i) });
          }
          return c;
        }, o.cloneWithShallow = function(e3, t3) {
          const r2 = t3.shallow;
          (t3 = Object.assign({}, t3)).shallow = false;
          const n2 = new Map();
          for (const t4 of r2) {
            const r3 = s(e3, t4);
            typeof r3 != "object" && typeof r3 != "function" || n2.set(r3, r3);
          }
          return o.clone(e3, t3, n2);
        }, o.base = function(e3, t3, r2) {
          if (r2.prototype === false)
            return o.needsProtoHack.has(t3) ? new t3.constructor() : t3 === n.array ? [] : {};
          const s2 = Object.getPrototypeOf(e3);
          if (s2 && s2.isImmutable)
            return e3;
          if (t3 === n.array) {
            const e4 = [];
            return s2 !== t3 && Object.setPrototypeOf(e4, s2), e4;
          }
          if (o.needsProtoHack.has(t3)) {
            const e4 = new s2.constructor();
            return s2 !== t3 && Object.setPrototypeOf(e4, s2), e4;
          }
          return Object.create(s2);
        };
      }, 9474: (e2, t2, r) => {
        "use strict";
        const s = r(4277), n = { mismatched: null };
        e2.exports = function(e3, t3, r2) {
          return r2 = Object.assign({ prototype: true }, r2), !!n.isDeepEqual(e3, t3, r2, []);
        }, n.isDeepEqual = function(e3, t3, r2, a) {
          if (e3 === t3)
            return e3 !== 0 || 1 / e3 == 1 / t3;
          const o = typeof e3;
          if (o !== typeof t3)
            return false;
          if (e3 === null || t3 === null)
            return false;
          if (o === "function") {
            if (!r2.deepFunction || e3.toString() !== t3.toString())
              return false;
          } else if (o !== "object")
            return e3 != e3 && t3 != t3;
          const i = n.getSharedType(e3, t3, !!r2.prototype);
          switch (i) {
            case s.buffer:
              return false;
            case s.promise:
              return e3 === t3;
            case s.regex:
              return e3.toString() === t3.toString();
            case n.mismatched:
              return false;
          }
          for (let r3 = a.length - 1; r3 >= 0; --r3)
            if (a[r3].isSame(e3, t3))
              return true;
          a.push(new n.SeenEntry(e3, t3));
          try {
            return !!n.isDeepEqualObj(i, e3, t3, r2, a);
          } finally {
            a.pop();
          }
        }, n.getSharedType = function(e3, t3, r2) {
          if (r2)
            return Object.getPrototypeOf(e3) !== Object.getPrototypeOf(t3) ? n.mismatched : s.getInternalProto(e3);
          const a = s.getInternalProto(e3);
          return a !== s.getInternalProto(t3) ? n.mismatched : a;
        }, n.valueOf = function(e3) {
          const t3 = e3.valueOf;
          if (t3 === void 0)
            return e3;
          try {
            return t3.call(e3);
          } catch (e4) {
            return e4;
          }
        }, n.hasOwnEnumerableProperty = function(e3, t3) {
          return Object.prototype.propertyIsEnumerable.call(e3, t3);
        }, n.isSetSimpleEqual = function(e3, t3) {
          for (const r2 of Set.prototype.values.call(e3))
            if (!Set.prototype.has.call(t3, r2))
              return false;
          return true;
        }, n.isDeepEqualObj = function(e3, t3, r2, a, o) {
          const { isDeepEqual: i, valueOf: l, hasOwnEnumerableProperty: c } = n, { keys: u, getOwnPropertySymbols: f } = Object;
          if (e3 === s.array) {
            if (!a.part) {
              if (t3.length !== r2.length)
                return false;
              for (let e4 = 0; e4 < t3.length; ++e4)
                if (!i(t3[e4], r2[e4], a, o))
                  return false;
              return true;
            }
            for (const e4 of t3)
              for (const t4 of r2)
                if (i(e4, t4, a, o))
                  return true;
          } else if (e3 === s.set) {
            if (t3.size !== r2.size)
              return false;
            if (!n.isSetSimpleEqual(t3, r2)) {
              const e4 = new Set(Set.prototype.values.call(r2));
              for (const r3 of Set.prototype.values.call(t3)) {
                if (e4.delete(r3))
                  continue;
                let t4 = false;
                for (const s2 of e4)
                  if (i(r3, s2, a, o)) {
                    e4.delete(s2), t4 = true;
                    break;
                  }
                if (!t4)
                  return false;
              }
            }
          } else if (e3 === s.map) {
            if (t3.size !== r2.size)
              return false;
            for (const [e4, s2] of Map.prototype.entries.call(t3)) {
              if (s2 === void 0 && !Map.prototype.has.call(r2, e4))
                return false;
              if (!i(s2, Map.prototype.get.call(r2, e4), a, o))
                return false;
            }
          } else if (e3 === s.error && (t3.name !== r2.name || t3.message !== r2.message))
            return false;
          const m = l(t3), h = l(r2);
          if ((t3 !== m || r2 !== h) && !i(m, h, a, o))
            return false;
          const d = u(t3);
          if (!a.part && d.length !== u(r2).length && !a.skip)
            return false;
          let p = 0;
          for (const e4 of d)
            if (a.skip && a.skip.includes(e4))
              r2[e4] === void 0 && ++p;
            else {
              if (!c(r2, e4))
                return false;
              if (!i(t3[e4], r2[e4], a, o))
                return false;
            }
          if (!a.part && d.length - p !== u(r2).length)
            return false;
          if (a.symbols !== false) {
            const e4 = f(t3), s2 = new Set(f(r2));
            for (const n2 of e4) {
              if (!a.skip || !a.skip.includes(n2)) {
                if (c(t3, n2)) {
                  if (!c(r2, n2))
                    return false;
                  if (!i(t3[n2], r2[n2], a, o))
                    return false;
                } else if (c(r2, n2))
                  return false;
              }
              s2.delete(n2);
            }
            for (const e5 of s2)
              if (c(r2, e5))
                return false;
          }
          return true;
        }, n.SeenEntry = class {
          constructor(e3, t3) {
            this.obj = e3, this.ref = t3;
          }
          isSame(e3, t3) {
            return this.obj === e3 && this.ref === t3;
          }
        };
      }, 7916: (e2, t2, r) => {
        "use strict";
        const s = r(8761);
        e2.exports = class extends Error {
          constructor(e3) {
            super(e3.filter((e4) => e4 !== "").map((e4) => typeof e4 == "string" ? e4 : e4 instanceof Error ? e4.message : s(e4)).join(" ") || "Unknown error"), typeof Error.captureStackTrace == "function" && Error.captureStackTrace(this, t2.assert);
          }
        };
      }, 5277: (e2) => {
        "use strict";
        const t2 = {};
        e2.exports = function(e3) {
          if (!e3)
            return "";
          let r = "";
          for (let s = 0; s < e3.length; ++s) {
            const n = e3.charCodeAt(s);
            t2.isSafe(n) ? r += e3[s] : r += t2.escapeHtmlChar(n);
          }
          return r;
        }, t2.escapeHtmlChar = function(e3) {
          const r = t2.namedHtml[e3];
          if (r !== void 0)
            return r;
          if (e3 >= 256)
            return "&#" + e3 + ";";
          const s = e3.toString(16).padStart(2, "0");
          return "&#x".concat(s, ";");
        }, t2.isSafe = function(e3) {
          return t2.safeCharCodes[e3] !== void 0;
        }, t2.namedHtml = { 38: "&amp;", 60: "&lt;", 62: "&gt;", 34: "&quot;", 160: "&nbsp;", 162: "&cent;", 163: "&pound;", 164: "&curren;", 169: "&copy;", 174: "&reg;" }, t2.safeCharCodes = function() {
          const e3 = {};
          for (let t3 = 32; t3 < 123; ++t3)
            (t3 >= 97 || t3 >= 65 && t3 <= 90 || t3 >= 48 && t3 <= 57 || t3 === 32 || t3 === 46 || t3 === 44 || t3 === 45 || t3 === 58 || t3 === 95) && (e3[t3] = null);
          return e3;
        }();
      }, 6064: (e2) => {
        "use strict";
        e2.exports = function(e3) {
          return e3.replace(/[\^\$\.\*\+\-\?\=\!\:\|\\\/\(\)\[\]\{\}\,]/g, "\\$&");
        };
      }, 738: (e2) => {
        "use strict";
        e2.exports = function() {
        };
      }, 1687: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(8571), a = r(7043), o = {};
        e2.exports = o.merge = function(e3, t3, r2) {
          if (s(e3 && typeof e3 == "object", "Invalid target value: must be an object"), s(t3 == null || typeof t3 == "object", "Invalid source value: must be null, undefined, or an object"), !t3)
            return e3;
          if (r2 = Object.assign({ nullOverride: true, mergeArrays: true }, r2), Array.isArray(t3)) {
            s(Array.isArray(e3), "Cannot merge array onto an object"), r2.mergeArrays || (e3.length = 0);
            for (let s2 = 0; s2 < t3.length; ++s2)
              e3.push(n(t3[s2], { symbols: r2.symbols }));
            return e3;
          }
          const i = a.keys(t3, r2);
          for (let s2 = 0; s2 < i.length; ++s2) {
            const a2 = i[s2];
            if (a2 === "__proto__" || !Object.prototype.propertyIsEnumerable.call(t3, a2))
              continue;
            const l = t3[a2];
            if (l && typeof l == "object") {
              if (e3[a2] === l)
                continue;
              !e3[a2] || typeof e3[a2] != "object" || Array.isArray(e3[a2]) !== Array.isArray(l) || l instanceof Date || l instanceof RegExp ? e3[a2] = n(l, { symbols: r2.symbols }) : o.merge(e3[a2], l, r2);
            } else
              (l != null || r2.nullOverride) && (e3[a2] = l);
          }
          return e3;
        };
      }, 9621: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = {};
        e2.exports = function(e3, t3, r2) {
          if (t3 === false || t3 == null)
            return e3;
          typeof (r2 = r2 || {}) == "string" && (r2 = { separator: r2 });
          const a = Array.isArray(t3);
          s(!a || !r2.separator, "Separator option no valid for array-based chain");
          const o = a ? t3 : t3.split(r2.separator || ".");
          let i = e3;
          for (let e4 = 0; e4 < o.length; ++e4) {
            let a2 = o[e4];
            const l = r2.iterables && n.iterables(i);
            if (Array.isArray(i) || l === "set") {
              const e5 = Number(a2);
              Number.isInteger(e5) && (a2 = e5 < 0 ? i.length + e5 : e5);
            }
            if (!i || typeof i == "function" && r2.functions === false || !l && i[a2] === void 0) {
              s(!r2.strict || e4 + 1 === o.length, "Missing segment", a2, "in reach path ", t3), s(typeof i == "object" || r2.functions === true || typeof i != "function", "Invalid segment", a2, "in reach path ", t3), i = r2.default;
              break;
            }
            i = l ? l === "set" ? [...i][a2] : i.get(a2) : i[a2];
          }
          return i;
        }, n.iterables = function(e3) {
          return e3 instanceof Set ? "set" : e3 instanceof Map ? "map" : void 0;
        };
      }, 8761: (e2) => {
        "use strict";
        e2.exports = function(...e3) {
          try {
            return JSON.stringify.apply(null, e3);
          } catch (e4) {
            return "[Cannot display object: " + e4.message + "]";
          }
        };
      }, 4277: (e2, t2) => {
        "use strict";
        const r = {};
        t2 = e2.exports = { array: Array.prototype, buffer: false, date: Date.prototype, error: Error.prototype, generic: Object.prototype, map: Map.prototype, promise: Promise.prototype, regex: RegExp.prototype, set: Set.prototype, weakMap: WeakMap.prototype, weakSet: WeakSet.prototype }, r.typeMap = new Map([["[object Error]", t2.error], ["[object Map]", t2.map], ["[object Promise]", t2.promise], ["[object Set]", t2.set], ["[object WeakMap]", t2.weakMap], ["[object WeakSet]", t2.weakSet]]), t2.getInternalProto = function(e3) {
          if (Array.isArray(e3))
            return t2.array;
          if (e3 instanceof Date)
            return t2.date;
          if (e3 instanceof RegExp)
            return t2.regex;
          if (e3 instanceof Error)
            return t2.error;
          const s = Object.prototype.toString.call(e3);
          return r.typeMap.get(s) || t2.generic;
        };
      }, 7043: (e2, t2) => {
        "use strict";
        t2.keys = function(e3, t3 = {}) {
          return t3.symbols !== false ? Reflect.ownKeys(e3) : Object.getOwnPropertyNames(e3);
        };
      }, 3652: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = {};
        t2.Sorter = class {
          constructor() {
            this._items = [], this.nodes = [];
          }
          add(e3, t3) {
            const r2 = [].concat((t3 = t3 || {}).before || []), n2 = [].concat(t3.after || []), a = t3.group || "?", o = t3.sort || 0;
            s(!r2.includes(a), "Item cannot come before itself: ".concat(a)), s(!r2.includes("?"), "Item cannot come before unassociated items"), s(!n2.includes(a), "Item cannot come after itself: ".concat(a)), s(!n2.includes("?"), "Item cannot come after unassociated items"), Array.isArray(e3) || (e3 = [e3]);
            for (const t4 of e3) {
              const e4 = { seq: this._items.length, sort: o, before: r2, after: n2, group: a, node: t4 };
              this._items.push(e4);
            }
            if (!t3.manual) {
              const e4 = this._sort();
              s(e4, "item", a !== "?" ? "added into group ".concat(a) : "", "created a dependencies error");
            }
            return this.nodes;
          }
          merge(e3) {
            Array.isArray(e3) || (e3 = [e3]);
            for (const t4 of e3)
              if (t4)
                for (const e4 of t4._items)
                  this._items.push(Object.assign({}, e4));
            this._items.sort(n.mergeSort);
            for (let e4 = 0; e4 < this._items.length; ++e4)
              this._items[e4].seq = e4;
            const t3 = this._sort();
            return s(t3, "merge created a dependencies error"), this.nodes;
          }
          sort() {
            const e3 = this._sort();
            return s(e3, "sort created a dependencies error"), this.nodes;
          }
          _sort() {
            const e3 = {}, t3 = Object.create(null), r2 = Object.create(null);
            for (const s3 of this._items) {
              const n3 = s3.seq, a2 = s3.group;
              r2[a2] = r2[a2] || [], r2[a2].push(n3), e3[n3] = s3.before;
              for (const e4 of s3.after)
                t3[e4] = t3[e4] || [], t3[e4].push(n3);
            }
            for (const t4 in e3) {
              const s3 = [];
              for (const n3 in e3[t4]) {
                const a2 = e3[t4][n3];
                r2[a2] = r2[a2] || [], s3.push(...r2[a2]);
              }
              e3[t4] = s3;
            }
            for (const s3 in t3)
              if (r2[s3])
                for (const n3 of r2[s3])
                  e3[n3].push(...t3[s3]);
            const s2 = {};
            for (const t4 in e3) {
              const r3 = e3[t4];
              for (const e4 of r3)
                s2[e4] = s2[e4] || [], s2[e4].push(t4);
            }
            const n2 = {}, a = [];
            for (let e4 = 0; e4 < this._items.length; ++e4) {
              let t4 = e4;
              if (s2[e4]) {
                t4 = null;
                for (let e5 = 0; e5 < this._items.length; ++e5) {
                  if (n2[e5] === true)
                    continue;
                  s2[e5] || (s2[e5] = []);
                  const r3 = s2[e5].length;
                  let a2 = 0;
                  for (let t5 = 0; t5 < r3; ++t5)
                    n2[s2[e5][t5]] && ++a2;
                  if (a2 === r3) {
                    t4 = e5;
                    break;
                  }
                }
              }
              t4 !== null && (n2[t4] = true, a.push(t4));
            }
            if (a.length !== this._items.length)
              return false;
            const o = {};
            for (const e4 of this._items)
              o[e4.seq] = e4;
            this._items = [], this.nodes = [];
            for (const e4 of a) {
              const t4 = o[e4];
              this.nodes.push(t4.node), this._items.push(t4);
            }
            return true;
          }
        }, n.mergeSort = (e3, t3) => e3.sort === t3.sort ? 0 : e3.sort < t3.sort ? -1 : 1;
      }, 5380: (e2, t2, r) => {
        "use strict";
        const s = r(443), n = r(2178), a = { minDomainSegments: 2, nonAsciiRx: /[^\x00-\x7f]/, domainControlRx: /[\x00-\x20@\:\/\\#!\$&\'\(\)\*\+,;=\?]/, tldSegmentRx: /^[a-zA-Z](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/, domainSegmentRx: /^[a-zA-Z0-9](?:[a-zA-Z0-9\-]*[a-zA-Z0-9])?$/, URL: s.URL || URL };
        t2.analyze = function(e3, t3 = {}) {
          if (!e3)
            return n.code("DOMAIN_NON_EMPTY_STRING");
          if (typeof e3 != "string")
            throw new Error("Invalid input: domain must be a string");
          if (e3.length > 256)
            return n.code("DOMAIN_TOO_LONG");
          if (a.nonAsciiRx.test(e3)) {
            if (t3.allowUnicode === false)
              return n.code("DOMAIN_INVALID_UNICODE_CHARS");
            e3 = e3.normalize("NFC");
          }
          if (a.domainControlRx.test(e3))
            return n.code("DOMAIN_INVALID_CHARS");
          e3 = a.punycode(e3), t3.allowFullyQualified && e3[e3.length - 1] === "." && (e3 = e3.slice(0, -1));
          const r2 = t3.minDomainSegments || a.minDomainSegments, s2 = e3.split(".");
          if (s2.length < r2)
            return n.code("DOMAIN_SEGMENTS_COUNT");
          if (t3.maxDomainSegments && s2.length > t3.maxDomainSegments)
            return n.code("DOMAIN_SEGMENTS_COUNT_MAX");
          const o = t3.tlds;
          if (o) {
            const e4 = s2[s2.length - 1].toLowerCase();
            if (o.deny && o.deny.has(e4) || o.allow && !o.allow.has(e4))
              return n.code("DOMAIN_FORBIDDEN_TLDS");
          }
          for (let e4 = 0; e4 < s2.length; ++e4) {
            const t4 = s2[e4];
            if (!t4.length)
              return n.code("DOMAIN_EMPTY_SEGMENT");
            if (t4.length > 63)
              return n.code("DOMAIN_LONG_SEGMENT");
            if (e4 < s2.length - 1) {
              if (!a.domainSegmentRx.test(t4))
                return n.code("DOMAIN_INVALID_CHARS");
            } else if (!a.tldSegmentRx.test(t4))
              return n.code("DOMAIN_INVALID_TLDS_CHARS");
          }
          return null;
        }, t2.isValid = function(e3, r2) {
          return !t2.analyze(e3, r2);
        }, a.punycode = function(e3) {
          e3.includes("%") && (e3 = e3.replace(/%/g, "%25"));
          try {
            return new a.URL("http://".concat(e3)).host;
          } catch (t3) {
            return e3;
          }
        };
      }, 1745: (e2, t2, r) => {
        "use strict";
        const s = r(9848), n = r(5380), a = r(2178), o = { nonAsciiRx: /[^\x00-\x7f]/, encoder: new (s.TextEncoder || TextEncoder)() };
        t2.analyze = function(e3, t3) {
          return o.email(e3, t3);
        }, t2.isValid = function(e3, t3) {
          return !o.email(e3, t3);
        }, o.email = function(e3, t3 = {}) {
          if (typeof e3 != "string")
            throw new Error("Invalid input: email must be a string");
          if (!e3)
            return a.code("EMPTY_STRING");
          const r2 = !o.nonAsciiRx.test(e3);
          if (!r2) {
            if (t3.allowUnicode === false)
              return a.code("FORBIDDEN_UNICODE");
            e3 = e3.normalize("NFC");
          }
          const s2 = e3.split("@");
          if (s2.length !== 2)
            return s2.length > 2 ? a.code("MULTIPLE_AT_CHAR") : a.code("MISSING_AT_CHAR");
          const [i, l] = s2;
          if (!i)
            return a.code("EMPTY_LOCAL");
          if (!t3.ignoreLength) {
            if (e3.length > 254)
              return a.code("ADDRESS_TOO_LONG");
            if (o.encoder.encode(i).length > 64)
              return a.code("LOCAL_TOO_LONG");
          }
          return o.local(i, r2) || n.analyze(l, t3);
        }, o.local = function(e3, t3) {
          const r2 = e3.split(".");
          for (const e4 of r2) {
            if (!e4.length)
              return a.code("EMPTY_LOCAL_SEGMENT");
            if (t3) {
              if (!o.atextRx.test(e4))
                return a.code("INVALID_LOCAL_CHARS");
            } else
              for (const t4 of e4) {
                if (o.atextRx.test(t4))
                  continue;
                const e5 = o.binary(t4);
                if (!o.atomRx.test(e5))
                  return a.code("INVALID_LOCAL_CHARS");
              }
          }
        }, o.binary = function(e3) {
          return Array.from(o.encoder.encode(e3)).map((e4) => String.fromCharCode(e4)).join("");
        }, o.atextRx = /^[\w!#\$%&'\*\+\-/=\?\^`\{\|\}~]+$/, o.atomRx = new RegExp(["(?:[\\xc2-\\xdf][\\x80-\\xbf])", "(?:\\xe0[\\xa0-\\xbf][\\x80-\\xbf])|(?:[\\xe1-\\xec][\\x80-\\xbf]{2})|(?:\\xed[\\x80-\\x9f][\\x80-\\xbf])|(?:[\\xee-\\xef][\\x80-\\xbf]{2})", "(?:\\xf0[\\x90-\\xbf][\\x80-\\xbf]{2})|(?:[\\xf1-\\xf3][\\x80-\\xbf]{3})|(?:\\xf4[\\x80-\\x8f][\\x80-\\xbf]{2})"].join("|"));
      }, 2178: (e2, t2) => {
        "use strict";
        t2.codes = { EMPTY_STRING: "Address must be a non-empty string", FORBIDDEN_UNICODE: "Address contains forbidden Unicode characters", MULTIPLE_AT_CHAR: "Address cannot contain more than one @ character", MISSING_AT_CHAR: "Address must contain one @ character", EMPTY_LOCAL: "Address local part cannot be empty", ADDRESS_TOO_LONG: "Address too long", LOCAL_TOO_LONG: "Address local part too long", EMPTY_LOCAL_SEGMENT: "Address local part contains empty dot-separated segment", INVALID_LOCAL_CHARS: "Address local part contains invalid character", DOMAIN_NON_EMPTY_STRING: "Domain must be a non-empty string", DOMAIN_TOO_LONG: "Domain too long", DOMAIN_INVALID_UNICODE_CHARS: "Domain contains forbidden Unicode characters", DOMAIN_INVALID_CHARS: "Domain contains invalid character", DOMAIN_INVALID_TLDS_CHARS: "Domain contains invalid tld character", DOMAIN_SEGMENTS_COUNT: "Domain lacks the minimum required number of segments", DOMAIN_SEGMENTS_COUNT_MAX: "Domain contains too many segments", DOMAIN_FORBIDDEN_TLDS: "Domain uses forbidden TLD", DOMAIN_EMPTY_SEGMENT: "Domain contains empty dot-separated segment", DOMAIN_LONG_SEGMENT: "Domain contains dot-separated segment that is too long" }, t2.code = function(e3) {
          return { code: e3, error: t2.codes[e3] };
        };
      }, 9959: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(5752);
        t2.regex = function(e3 = {}) {
          s(e3.cidr === void 0 || typeof e3.cidr == "string", "options.cidr must be a string");
          const t3 = e3.cidr ? e3.cidr.toLowerCase() : "optional";
          s(["required", "optional", "forbidden"].includes(t3), "options.cidr must be one of required, optional, forbidden"), s(e3.version === void 0 || typeof e3.version == "string" || Array.isArray(e3.version), "options.version must be a string or an array of string");
          let r2 = e3.version || ["ipv4", "ipv6", "ipvfuture"];
          Array.isArray(r2) || (r2 = [r2]), s(r2.length >= 1, "options.version must have at least 1 version specified");
          for (let e4 = 0; e4 < r2.length; ++e4)
            s(typeof r2[e4] == "string", "options.version must only contain strings"), r2[e4] = r2[e4].toLowerCase(), s(["ipv4", "ipv6", "ipvfuture"].includes(r2[e4]), "options.version contains unknown version " + r2[e4] + " - must be one of ipv4, ipv6, ipvfuture");
          r2 = Array.from(new Set(r2));
          const a = r2.map((e4) => {
            if (t3 === "forbidden")
              return n.ip[e4];
            const r3 = "\\/".concat(e4 === "ipv4" ? n.ip.v4Cidr : n.ip.v6Cidr);
            return t3 === "required" ? "".concat(n.ip[e4]).concat(r3) : "".concat(n.ip[e4], "(?:").concat(r3, ")?");
          }), o = "(?:".concat(a.join("|"), ")"), i = new RegExp("^".concat(o, "$"));
          return { cidr: t3, versions: r2, regex: i, raw: o };
        };
      }, 5752: (e2, t2, r) => {
        "use strict";
        const s = r(375), n = r(6064), a = { generate: function() {
          const e3 = {}, t3 = "!\\$&'\\(\\)\\*\\+,;=", r2 = "\\w-\\.~%\\dA-Fa-f" + t3 + ":@", s2 = "[" + r2 + "]", n2 = "(?:0{0,2}\\d|0?[1-9]\\d|1\\d\\d|2[0-4]\\d|25[0-5])";
          e3.ipv4address = "(?:" + n2 + "\\.){3}" + n2;
          const a2 = "[\\dA-Fa-f]{1,4}", o = "(?:" + a2 + ":" + a2 + "|" + e3.ipv4address + ")", i = "(?:" + a2 + ":){6}" + o, l = "::(?:" + a2 + ":){5}" + o, c = "(?:" + a2 + ")?::(?:" + a2 + ":){4}" + o, u = "(?:(?:" + a2 + ":){0,1}" + a2 + ")?::(?:" + a2 + ":){3}" + o, f = "(?:(?:" + a2 + ":){0,2}" + a2 + ")?::(?:" + a2 + ":){2}" + o, m = "(?:(?:" + a2 + ":){0,3}" + a2 + ")?::" + a2 + ":" + o, h = "(?:(?:" + a2 + ":){0,4}" + a2 + ")?::" + o;
          e3.ipv4Cidr = "(?:\\d|[1-2]\\d|3[0-2])", e3.ipv6Cidr = "(?:0{0,2}\\d|0?[1-9]\\d|1[01]\\d|12[0-8])", e3.ipv6address = "(?:" + i + "|" + l + "|" + c + "|" + u + "|" + f + "|" + m + "|" + h + "|(?:(?:[\\dA-Fa-f]{1,4}:){0,5}[\\dA-Fa-f]{1,4})?::[\\dA-Fa-f]{1,4}|(?:(?:[\\dA-Fa-f]{1,4}:){0,6}[\\dA-Fa-f]{1,4})?::)", e3.ipvFuture = "v[\\dA-Fa-f]+\\.[\\w-\\.~" + t3 + ":]+", e3.scheme = "[a-zA-Z][a-zA-Z\\d+-\\.]*", e3.schemeRegex = new RegExp(e3.scheme);
          const d = "[\\w-\\.~%\\dA-Fa-f" + t3 + ":]*", p = "(?:\\[(?:" + e3.ipv6address + "|" + e3.ipvFuture + ")\\]|" + e3.ipv4address + "|[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=]{1,255})", g = "(?:" + d + "@)?" + p + "(?::\\d*)?", y = "(?:" + d + "@)?(" + p + ")(?::\\d*)?", b = s2 + "+", v = "(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*", _ = "\\/(?:" + b + v + ")?", w = b + v, $ = "[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=@]+" + v;
          return e3.hierPart = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + w + "|(?:\\/\\/\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*(?:\\/[\\w-\\.~%\\dA-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))", e3.hierPartCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + w + ")", e3.relativeRef = "(?:(?:\\/\\/" + g + v + ")|" + _ + "|" + $ + "|)", e3.relativeRefCapture = "(?:(?:\\/\\/" + y + v + ")|" + _ + "|" + $ + "|)", e3.query = "[" + r2 + "\\/\\?]*(?=#|$)", e3.queryWithSquareBrackets = "[" + r2 + "\\[\\]\\/\\?]*(?=#|$)", e3.fragment = "[" + r2 + "\\/\\?]*", e3;
        } };
        a.rfc3986 = a.generate(), t2.ip = { v4Cidr: a.rfc3986.ipv4Cidr, v6Cidr: a.rfc3986.ipv6Cidr, ipv4: a.rfc3986.ipv4address, ipv6: a.rfc3986.ipv6address, ipvfuture: a.rfc3986.ipvFuture }, a.createRegex = function(e3) {
          const t3 = a.rfc3986, r2 = "(?:\\?" + (e3.allowQuerySquareBrackets ? t3.queryWithSquareBrackets : t3.query) + ")?(?:#" + t3.fragment + ")?", o = e3.domain ? t3.relativeRefCapture : t3.relativeRef;
          if (e3.relativeOnly)
            return a.wrap(o + r2);
          let i = "";
          if (e3.scheme) {
            s(e3.scheme instanceof RegExp || typeof e3.scheme == "string" || Array.isArray(e3.scheme), "scheme must be a RegExp, String, or Array");
            const r3 = [].concat(e3.scheme);
            s(r3.length >= 1, "scheme must have at least 1 scheme specified");
            const a2 = [];
            for (let e4 = 0; e4 < r3.length; ++e4) {
              const o2 = r3[e4];
              s(o2 instanceof RegExp || typeof o2 == "string", "scheme at position " + e4 + " must be a RegExp or String"), o2 instanceof RegExp ? a2.push(o2.source.toString()) : (s(t3.schemeRegex.test(o2), "scheme at position " + e4 + " must be a valid scheme"), a2.push(n(o2)));
            }
            i = a2.join("|");
          }
          const l = "(?:" + (i ? "(?:" + i + ")" : t3.scheme) + ":" + (e3.domain ? t3.hierPartCapture : t3.hierPart) + ")", c = e3.allowRelative ? "(?:" + l + "|" + o + ")" : l;
          return a.wrap(c + r2, i);
        }, a.wrap = function(e3, t3) {
          return { raw: e3 = "(?=.)(?!https?:/(?:$|[^/]))(?!https?:///)(?!https?:[^/])".concat(e3), regex: new RegExp("^".concat(e3, "$")), scheme: t3 };
        }, a.uriRegex = a.createRegex({}), t2.regex = function(e3 = {}) {
          return e3.scheme || e3.allowRelative || e3.relativeOnly || e3.allowQuerySquareBrackets || e3.domain ? a.createRegex(e3) : a.uriRegex;
        };
      }, 1447: (e2, t2) => {
        "use strict";
        const r = { operators: ["!", "^", "*", "/", "%", "+", "-", "<", "<=", ">", ">=", "==", "!=", "&&", "||", "??"], operatorCharacters: ["!", "^", "*", "/", "%", "+", "-", "<", "=", ">", "&", "|", "?"], operatorsOrder: [["^"], ["*", "/", "%"], ["+", "-"], ["<", "<=", ">", ">="], ["==", "!="], ["&&"], ["||", "??"]], operatorsPrefix: ["!", "n"], literals: { '"': '"', "`": "`", "'": "'", "[": "]" }, numberRx: /^(?:[0-9]*\.?[0-9]*){1}$/, tokenRx: /^[\w\$\#\.\@\:\{\}]+$/, symbol: Symbol("formula"), settings: Symbol("settings") };
        t2.Parser = class {
          constructor(e3, t3 = {}) {
            if (!t3[r.settings] && t3.constants)
              for (const e4 in t3.constants) {
                const r2 = t3.constants[e4];
                if (r2 !== null && !["boolean", "number", "string"].includes(typeof r2))
                  throw new Error("Formula constant ".concat(e4, " contains invalid ").concat(typeof r2, " value type"));
              }
            this.settings = t3[r.settings] ? t3 : Object.assign({ [r.settings]: true, constants: {}, functions: {} }, t3), this.single = null, this._parts = null, this._parse(e3);
          }
          _parse(e3) {
            let s = [], n = "", a = 0, o = false;
            const i = (e4) => {
              if (a)
                throw new Error("Formula missing closing parenthesis");
              const i2 = s.length ? s[s.length - 1] : null;
              if (o || n || e4) {
                if (i2 && i2.type === "reference" && e4 === ")")
                  return i2.type = "function", i2.value = this._subFormula(n, i2.value), void (n = "");
                if (e4 === ")") {
                  const e5 = new t2.Parser(n, this.settings);
                  s.push({ type: "segment", value: e5 });
                } else if (o) {
                  if (o === "]")
                    return s.push({ type: "reference", value: n }), void (n = "");
                  s.push({ type: "literal", value: n });
                } else if (r.operatorCharacters.includes(n))
                  i2 && i2.type === "operator" && r.operators.includes(i2.value + n) ? i2.value += n : s.push({ type: "operator", value: n });
                else if (n.match(r.numberRx))
                  s.push({ type: "constant", value: parseFloat(n) });
                else if (this.settings.constants[n] !== void 0)
                  s.push({ type: "constant", value: this.settings.constants[n] });
                else {
                  if (!n.match(r.tokenRx))
                    throw new Error("Formula contains invalid token: ".concat(n));
                  s.push({ type: "reference", value: n });
                }
                n = "";
              }
            };
            for (const t3 of e3)
              o ? t3 === o ? (i(), o = false) : n += t3 : a ? t3 === "(" ? (n += t3, ++a) : t3 === ")" ? (--a, a ? n += t3 : i(t3)) : n += t3 : t3 in r.literals ? o = r.literals[t3] : t3 === "(" ? (i(), ++a) : r.operatorCharacters.includes(t3) ? (i(), n = t3, i()) : t3 !== " " ? n += t3 : i();
            i(), s = s.map((e4, t3) => e4.type !== "operator" || e4.value !== "-" || t3 && s[t3 - 1].type !== "operator" ? e4 : { type: "operator", value: "n" });
            let l = false;
            for (const e4 of s) {
              if (e4.type === "operator") {
                if (r.operatorsPrefix.includes(e4.value))
                  continue;
                if (!l)
                  throw new Error("Formula contains an operator in invalid position");
                if (!r.operators.includes(e4.value))
                  throw new Error("Formula contains an unknown operator ".concat(e4.value));
              } else if (l)
                throw new Error("Formula missing expected operator");
              l = !l;
            }
            if (!l)
              throw new Error("Formula contains invalid trailing operator");
            s.length === 1 && ["reference", "literal", "constant"].includes(s[0].type) && (this.single = { type: s[0].type === "reference" ? "reference" : "value", value: s[0].value }), this._parts = s.map((e4) => {
              if (e4.type === "operator")
                return r.operatorsPrefix.includes(e4.value) ? e4 : e4.value;
              if (e4.type !== "reference")
                return e4.value;
              if (this.settings.tokenRx && !this.settings.tokenRx.test(e4.value))
                throw new Error("Formula contains invalid reference ".concat(e4.value));
              return this.settings.reference ? this.settings.reference(e4.value) : r.reference(e4.value);
            });
          }
          _subFormula(e3, s) {
            const n = this.settings.functions[s];
            if (typeof n != "function")
              throw new Error("Formula contains unknown function ".concat(s));
            let a = [];
            if (e3) {
              let t3 = "", n2 = 0, o = false;
              const i = () => {
                if (!t3)
                  throw new Error("Formula contains function ".concat(s, " with invalid arguments ").concat(e3));
                a.push(t3), t3 = "";
              };
              for (let s2 = 0; s2 < e3.length; ++s2) {
                const a2 = e3[s2];
                o ? (t3 += a2, a2 === o && (o = false)) : a2 in r.literals && !n2 ? (t3 += a2, o = r.literals[a2]) : a2 !== "," || n2 ? (t3 += a2, a2 === "(" ? ++n2 : a2 === ")" && --n2) : i();
              }
              i();
            }
            return a = a.map((e4) => new t2.Parser(e4, this.settings)), function(e4) {
              const t3 = [];
              for (const r2 of a)
                t3.push(r2.evaluate(e4));
              return n.call(e4, ...t3);
            };
          }
          evaluate(e3) {
            const t3 = this._parts.slice();
            for (let s = t3.length - 2; s >= 0; --s) {
              const n = t3[s];
              if (n && n.type === "operator") {
                const a = t3[s + 1];
                t3.splice(s + 1, 1);
                const o = r.evaluate(a, e3);
                t3[s] = r.single(n.value, o);
              }
            }
            return r.operatorsOrder.forEach((s) => {
              for (let n = 1; n < t3.length - 1; )
                if (s.includes(t3[n])) {
                  const s2 = t3[n], a = r.evaluate(t3[n - 1], e3), o = r.evaluate(t3[n + 1], e3);
                  t3.splice(n, 2);
                  const i = r.calculate(s2, a, o);
                  t3[n - 1] = i === 0 ? 0 : i;
                } else
                  n += 2;
            }), r.evaluate(t3[0], e3);
          }
        }, t2.Parser.prototype[r.symbol] = true, r.reference = function(e3) {
          return function(t3) {
            return t3 && t3[e3] !== void 0 ? t3[e3] : null;
          };
        }, r.evaluate = function(e3, t3) {
          return e3 === null ? null : typeof e3 == "function" ? e3(t3) : e3[r.symbol] ? e3.evaluate(t3) : e3;
        }, r.single = function(e3, t3) {
          if (e3 === "!")
            return !t3;
          const r2 = -t3;
          return r2 === 0 ? 0 : r2;
        }, r.calculate = function(e3, t3, s) {
          if (e3 === "??")
            return r.exists(t3) ? t3 : s;
          if (typeof t3 == "string" || typeof s == "string") {
            if (e3 === "+")
              return (t3 = r.exists(t3) ? t3 : "") + (r.exists(s) ? s : "");
          } else
            switch (e3) {
              case "^":
                return Math.pow(t3, s);
              case "*":
                return t3 * s;
              case "/":
                return t3 / s;
              case "%":
                return t3 % s;
              case "+":
                return t3 + s;
              case "-":
                return t3 - s;
            }
          switch (e3) {
            case "<":
              return t3 < s;
            case "<=":
              return t3 <= s;
            case ">":
              return t3 > s;
            case ">=":
              return t3 >= s;
            case "==":
              return t3 === s;
            case "!=":
              return t3 !== s;
            case "&&":
              return t3 && s;
            case "||":
              return t3 || s;
          }
          return null;
        }, r.exists = function(e3) {
          return e3 != null;
        };
      }, 9926: () => {
      }, 5688: () => {
      }, 9708: () => {
      }, 1152: () => {
      }, 443: () => {
      }, 9848: () => {
      } }, t = {}, function r(s) {
        var n = t[s];
        if (n !== void 0)
          return n.exports;
        var a = t[s] = { exports: {} };
        return e[s](a, a.exports, r), a.exports;
      }(5107);
      var e, t;
    });
  }
});

// node_modules/@web3-onboard/common/dist/index.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/index.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Observable.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscriber.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/tslib/tslib.es6.js
init_virtual_process_polyfill();
init_buffer();
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (Object.prototype.hasOwnProperty.call(b2, p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isFunction.js
init_virtual_process_polyfill();
init_buffer();
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscription.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/createErrorClass.js
init_virtual_process_polyfill();
init_buffer();
function createErrorClass(createImpl) {
  var _super = function(instance) {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  var ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass(function(_super) {
  return function UnsubscriptionErrorImpl(errors) {
    _super(this);
    this.message = errors ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function(err, i) {
      return i + 1 + ") " + err.toString();
    }).join("\n  ") : "";
    this.name = "UnsubscriptionError";
    this.errors = errors;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/arrRemove.js
init_virtual_process_polyfill();
init_buffer();
function arrRemove(arr, item) {
  if (arr) {
    var index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscription.js
var Subscription = function() {
  function Subscription2(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  Subscription2.prototype.unsubscribe = function() {
    var e_1, _a, e_2, _b;
    var errors;
    if (!this.closed) {
      this.closed = true;
      var _parentage = this._parentage;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          try {
            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
              var parent_1 = _parentage_1_1.value;
              parent_1.remove(this);
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return))
                _a.call(_parentage_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
        } else {
          _parentage.remove(this);
        }
      }
      var initialFinalizer = this.initialTeardown;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      var _finalizers = this._finalizers;
      if (_finalizers) {
        this._finalizers = null;
        try {
          for (var _finalizers_1 = __values(_finalizers), _finalizers_1_1 = _finalizers_1.next(); !_finalizers_1_1.done; _finalizers_1_1 = _finalizers_1.next()) {
            var finalizer = _finalizers_1_1.value;
            try {
              execFinalizer(finalizer);
            } catch (err) {
              errors = errors !== null && errors !== void 0 ? errors : [];
              if (err instanceof UnsubscriptionError) {
                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
              } else {
                errors.push(err);
              }
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_finalizers_1_1 && !_finalizers_1_1.done && (_b = _finalizers_1.return))
              _b.call(_finalizers_1);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  };
  Subscription2.prototype.add = function(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof Subscription2) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  };
  Subscription2.prototype._hasParent = function(parent) {
    var _parentage = this._parentage;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  };
  Subscription2.prototype._addParent = function(parent) {
    var _parentage = this._parentage;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  };
  Subscription2.prototype._removeParent = function(parent) {
    var _parentage = this._parentage;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  };
  Subscription2.prototype.remove = function(teardown) {
    var _finalizers = this._finalizers;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof Subscription2) {
      teardown._removeParent(this);
    }
  };
  Subscription2.EMPTY = function() {
    var empty2 = new Subscription2();
    empty2.closed = true;
    return empty2;
  }();
  return Subscription2;
}();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/config.js
init_virtual_process_polyfill();
init_buffer();
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/timeoutProvider.js
init_virtual_process_polyfill();
init_buffer();
var timeoutProvider = {
  setTimeout: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = timeoutProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setTimeout.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearTimeout: function(handle) {
    var delegate = timeoutProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(function() {
    var onUnhandledError = config.onUnhandledError;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/noop.js
init_virtual_process_polyfill();
init_buffer();
function noop() {
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/NotificationFactories.js
init_virtual_process_polyfill();
init_buffer();
var COMPLETE_NOTIFICATION = function() {
  return createNotification("C", void 0, void 0);
}();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/errorContext.js
init_virtual_process_polyfill();
init_buffer();
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    var isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      var _a = context, errorThrown = _a.errorThrown, error = _a.error;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subscriber.js
var Subscriber = function(_super) {
  __extends(Subscriber2, _super);
  function Subscriber2(destination) {
    var _this = _super.call(this) || this;
    _this.isStopped = false;
    if (destination) {
      _this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(_this);
      }
    } else {
      _this.destination = EMPTY_OBSERVER;
    }
    return _this;
  }
  Subscriber2.create = function(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  };
  Subscriber2.prototype.next = function(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  };
  Subscriber2.prototype.error = function(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  };
  Subscriber2.prototype.complete = function() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  };
  Subscriber2.prototype.unsubscribe = function() {
    if (!this.closed) {
      this.isStopped = true;
      _super.prototype.unsubscribe.call(this);
      this.destination = null;
    }
  };
  Subscriber2.prototype._next = function(value) {
    this.destination.next(value);
  };
  Subscriber2.prototype._error = function(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  };
  Subscriber2.prototype._complete = function() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  };
  return Subscriber2;
}(Subscription);
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = function() {
  function ConsumerObserver2(partialObserver) {
    this.partialObserver = partialObserver;
  }
  ConsumerObserver2.prototype.next = function(value) {
    var partialObserver = this.partialObserver;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  ConsumerObserver2.prototype.error = function(err) {
    var partialObserver = this.partialObserver;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  };
  ConsumerObserver2.prototype.complete = function() {
    var partialObserver = this.partialObserver;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  };
  return ConsumerObserver2;
}();
var SafeSubscriber = function(_super) {
  __extends(SafeSubscriber2, _super);
  function SafeSubscriber2(observerOrNext, error, complete) {
    var _this = _super.call(this) || this;
    var partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      var context_1;
      if (_this && config.useDeprecatedNextContext) {
        context_1 = Object.create(observerOrNext);
        context_1.unsubscribe = function() {
          return _this.unsubscribe();
        };
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context_1),
          error: observerOrNext.error && bind(observerOrNext.error, context_1),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context_1)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    _this.destination = new ConsumerObserver(partialObserver);
    return _this;
  }
  return SafeSubscriber2;
}(Subscriber);
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  var onStoppedNotification = config.onStoppedNotification;
  onStoppedNotification && timeoutProvider.setTimeout(function() {
    return onStoppedNotification(notification, subscriber);
  });
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/symbol/observable.js
init_virtual_process_polyfill();
init_buffer();
var observable = function() {
  return typeof Symbol === "function" && Symbol.observable || "@@observable";
}();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/pipe.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/identity.js
init_virtual_process_polyfill();
init_buffer();
function identity(x) {
  return x;
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/pipe.js
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce(function(prev, fn) {
      return fn(prev);
    }, input);
  };
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Observable.js
var Observable = function() {
  function Observable2(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  Observable2.prototype.lift = function(operator) {
    var observable2 = new Observable2();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  };
  Observable2.prototype.subscribe = function(observerOrNext, error, complete) {
    var _this = this;
    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(function() {
      var _a = _this, operator = _a.operator, source = _a.source;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));
    });
    return subscriber;
  };
  Observable2.prototype._trySubscribe = function(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  };
  Observable2.prototype.forEach = function(next, promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var subscriber = new SafeSubscriber({
        next: function(value) {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      _this.subscribe(subscriber);
    });
  };
  Observable2.prototype._subscribe = function(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  };
  Observable2.prototype[observable] = function() {
    return this;
  };
  Observable2.prototype.pipe = function() {
    var operations = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      operations[_i] = arguments[_i];
    }
    return pipeFromArray(operations)(this);
  };
  Observable2.prototype.toPromise = function(promiseCtor) {
    var _this = this;
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor(function(resolve, reject) {
      var value;
      _this.subscribe(function(x) {
        return value = x;
      }, function(err) {
        return reject(err);
      }, function() {
        return resolve(value);
      });
    });
  };
  Observable2.create = function(subscribe) {
    return new Observable2(subscribe);
  };
  return Observable2;
}();
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/refCount.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/lift.js
init_virtual_process_polyfill();
init_buffer();
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return function(source) {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/OperatorSubscriber.js
init_virtual_process_polyfill();
init_buffer();
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = function(_super) {
  __extends(OperatorSubscriber2, _super);
  function OperatorSubscriber2(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    var _this = _super.call(this, destination) || this;
    _this.onFinalize = onFinalize;
    _this.shouldUnsubscribe = shouldUnsubscribe;
    _this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : _super.prototype._next;
    _this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._error;
    _this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : _super.prototype._complete;
    return _this;
  }
  OperatorSubscriber2.prototype.unsubscribe = function() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      var closed_1 = this.closed;
      _super.prototype.unsubscribe.call(this);
      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  };
  return OperatorSubscriber2;
}(Subscriber);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/refCount.js
function refCount() {
  return operate(function(source, subscriber) {
    var connection = null;
    source._refCount++;
    var refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, function() {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      var sharedConnection = source._connection;
      var conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/ConnectableObservable.js
var ConnectableObservable = function(_super) {
  __extends(ConnectableObservable2, _super);
  function ConnectableObservable2(source, subjectFactory) {
    var _this = _super.call(this) || this;
    _this.source = source;
    _this.subjectFactory = subjectFactory;
    _this._subject = null;
    _this._refCount = 0;
    _this._connection = null;
    if (hasLift(source)) {
      _this.lift = source.lift;
    }
    return _this;
  }
  ConnectableObservable2.prototype._subscribe = function(subscriber) {
    return this.getSubject().subscribe(subscriber);
  };
  ConnectableObservable2.prototype.getSubject = function() {
    var subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  };
  ConnectableObservable2.prototype._teardown = function() {
    this._refCount = 0;
    var _connection = this._connection;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  };
  ConnectableObservable2.prototype.connect = function() {
    var _this = this;
    var connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      var subject_1 = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, void 0, function() {
        _this._teardown();
        subject_1.complete();
      }, function(err) {
        _this._teardown();
        subject_1.error(err);
      }, function() {
        return _this._teardown();
      })));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  };
  ConnectableObservable2.prototype.refCount = function() {
    return refCount()(this);
  };
  return ConnectableObservable2;
}(Observable);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/performanceTimestampProvider.js
init_virtual_process_polyfill();
init_buffer();
var performanceTimestampProvider = {
  now: function() {
    return (performanceTimestampProvider.delegate || performance).now();
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrameProvider.js
init_virtual_process_polyfill();
init_buffer();
var animationFrameProvider = {
  schedule: function(callback) {
    var request = requestAnimationFrame;
    var cancel = cancelAnimationFrame;
    var delegate = animationFrameProvider.delegate;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    var handle = request(function(timestamp2) {
      cancel = void 0;
      callback(timestamp2);
    });
    return new Subscription(function() {
      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);
    });
  },
  requestAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  cancelAnimationFrame: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = animationFrameProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/dom/animationFrames.js
function animationFramesFactory(timestampProvider) {
  var schedule = animationFrameProvider.schedule;
  return new Observable(function(subscriber) {
    var subscription = new Subscription();
    var provider = timestampProvider || performanceTimestampProvider;
    var start = provider.now();
    var run = function(timestamp2) {
      var now = provider.now();
      subscriber.next({
        timestamp: timestampProvider ? now : timestamp2,
        elapsed: now - start
      });
      if (!subscriber.closed) {
        subscription.add(schedule(run));
      }
    };
    subscription.add(schedule(run));
    return subscription;
  });
}
var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subject.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/ObjectUnsubscribedError.js
init_virtual_process_polyfill();
init_buffer();
var ObjectUnsubscribedError = createErrorClass(function(_super) {
  return function ObjectUnsubscribedErrorImpl() {
    _super(this);
    this.name = "ObjectUnsubscribedError";
    this.message = "object unsubscribed";
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Subject.js
var Subject = function(_super) {
  __extends(Subject2, _super);
  function Subject2() {
    var _this = _super.call(this) || this;
    _this.closed = false;
    _this.currentObservers = null;
    _this.observers = [];
    _this.isStopped = false;
    _this.hasError = false;
    _this.thrownError = null;
    return _this;
  }
  Subject2.prototype.lift = function(operator) {
    var subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  };
  Subject2.prototype._throwIfClosed = function() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  };
  Subject2.prototype.next = function(value) {
    var _this = this;
    errorContext(function() {
      var e_1, _a;
      _this._throwIfClosed();
      if (!_this.isStopped) {
        if (!_this.currentObservers) {
          _this.currentObservers = Array.from(_this.observers);
        }
        try {
          for (var _b = __values(_this.currentObservers), _c = _b.next(); !_c.done; _c = _b.next()) {
            var observer = _c.value;
            observer.next(value);
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      }
    });
  };
  Subject2.prototype.error = function(err) {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.hasError = _this.isStopped = true;
        _this.thrownError = err;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  };
  Subject2.prototype.complete = function() {
    var _this = this;
    errorContext(function() {
      _this._throwIfClosed();
      if (!_this.isStopped) {
        _this.isStopped = true;
        var observers = _this.observers;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  };
  Subject2.prototype.unsubscribe = function() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  };
  Object.defineProperty(Subject2.prototype, "observed", {
    get: function() {
      var _a;
      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
    },
    enumerable: false,
    configurable: true
  });
  Subject2.prototype._trySubscribe = function(subscriber) {
    this._throwIfClosed();
    return _super.prototype._trySubscribe.call(this, subscriber);
  };
  Subject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  };
  Subject2.prototype._innerSubscribe = function(subscriber) {
    var _this = this;
    var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(function() {
      _this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  };
  Subject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  };
  Subject2.prototype.asObservable = function() {
    var observable2 = new Observable();
    observable2.source = this;
    return observable2;
  };
  Subject2.create = function(destination, source) {
    return new AnonymousSubject(destination, source);
  };
  return Subject2;
}(Observable);
var AnonymousSubject = function(_super) {
  __extends(AnonymousSubject2, _super);
  function AnonymousSubject2(destination, source) {
    var _this = _super.call(this) || this;
    _this.destination = destination;
    _this.source = source;
    return _this;
  }
  AnonymousSubject2.prototype.next = function(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  };
  AnonymousSubject2.prototype.error = function(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  };
  AnonymousSubject2.prototype.complete = function() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  AnonymousSubject2.prototype._subscribe = function(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  };
  return AnonymousSubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js
init_virtual_process_polyfill();
init_buffer();
var BehaviorSubject = function(_super) {
  __extends(BehaviorSubject2, _super);
  function BehaviorSubject2(_value) {
    var _this = _super.call(this) || this;
    _this._value = _value;
    return _this;
  }
  Object.defineProperty(BehaviorSubject2.prototype, "value", {
    get: function() {
      return this.getValue();
    },
    enumerable: false,
    configurable: true
  });
  BehaviorSubject2.prototype._subscribe = function(subscriber) {
    var subscription = _super.prototype._subscribe.call(this, subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  };
  BehaviorSubject2.prototype.getValue = function() {
    var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  };
  BehaviorSubject2.prototype.next = function(value) {
    _super.prototype.next.call(this, this._value = value);
  };
  return BehaviorSubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/dateTimestampProvider.js
init_virtual_process_polyfill();
init_buffer();
var dateTimestampProvider = {
  now: function() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/ReplaySubject.js
var ReplaySubject = function(_super) {
  __extends(ReplaySubject2, _super);
  function ReplaySubject2(_bufferSize, _windowTime, _timestampProvider) {
    if (_bufferSize === void 0) {
      _bufferSize = Infinity;
    }
    if (_windowTime === void 0) {
      _windowTime = Infinity;
    }
    if (_timestampProvider === void 0) {
      _timestampProvider = dateTimestampProvider;
    }
    var _this = _super.call(this) || this;
    _this._bufferSize = _bufferSize;
    _this._windowTime = _windowTime;
    _this._timestampProvider = _timestampProvider;
    _this._buffer = [];
    _this._infiniteTimeWindow = true;
    _this._infiniteTimeWindow = _windowTime === Infinity;
    _this._bufferSize = Math.max(1, _bufferSize);
    _this._windowTime = Math.max(1, _windowTime);
    return _this;
  }
  ReplaySubject2.prototype.next = function(value) {
    var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    _super.prototype.next.call(this, value);
  };
  ReplaySubject2.prototype._subscribe = function(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    var subscription = this._innerSubscribe(subscriber);
    var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
    var copy = _buffer.slice();
    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  };
  ReplaySubject2.prototype._trimBuffer = function() {
    var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      var now = _timestampProvider.now();
      var last3 = 0;
      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last3 = i;
      }
      last3 && _buffer.splice(0, last3 + 1);
    }
  };
  return ReplaySubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/AsyncSubject.js
init_virtual_process_polyfill();
init_buffer();
var AsyncSubject = function(_super) {
  __extends(AsyncSubject2, _super);
  function AsyncSubject2() {
    var _this = _super !== null && _super.apply(this, arguments) || this;
    _this._value = null;
    _this._hasValue = false;
    _this._isComplete = false;
    return _this;
  }
  AsyncSubject2.prototype._checkFinalizedStatuses = function(subscriber) {
    var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped || _isComplete) {
      _hasValue && subscriber.next(_value);
      subscriber.complete();
    }
  };
  AsyncSubject2.prototype.next = function(value) {
    if (!this.isStopped) {
      this._value = value;
      this._hasValue = true;
    }
  };
  AsyncSubject2.prototype.complete = function() {
    var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
    if (!_isComplete) {
      this._isComplete = true;
      _hasValue && _super.prototype.next.call(this, _value);
      _super.prototype.complete.call(this);
    }
  };
  return AsyncSubject2;
}(Subject);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/Action.js
init_virtual_process_polyfill();
init_buffer();
var Action = function(_super) {
  __extends(Action2, _super);
  function Action2(scheduler, work) {
    return _super.call(this) || this;
  }
  Action2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return this;
  };
  return Action2;
}(Subscription);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/intervalProvider.js
init_virtual_process_polyfill();
init_buffer();
var intervalProvider = {
  setInterval: function(handler, timeout2) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
      args[_i - 2] = arguments[_i];
    }
    var delegate = intervalProvider.delegate;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval.apply(delegate, __spreadArray([handler, timeout2], __read(args)));
    }
    return setInterval.apply(void 0, __spreadArray([handler, timeout2], __read(args)));
  },
  clearInterval: function(handle) {
    var delegate = intervalProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncAction.js
var AsyncAction = function(_super) {
  __extends(AsyncAction2, _super);
  function AsyncAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.pending = false;
    return _this;
  }
  AsyncAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (this.closed) {
      return this;
    }
    this.state = state;
    var id = this.id;
    var scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay2);
    }
    this.pending = true;
    this.delay = delay2;
    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay2);
    return this;
  };
  AsyncAction2.prototype.requestAsyncId = function(scheduler, _id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay2);
  };
  AsyncAction2.prototype.recycleAsyncId = function(_scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && this.delay === delay2 && this.pending === false) {
      return id;
    }
    intervalProvider.clearInterval(id);
    return void 0;
  };
  AsyncAction2.prototype.execute = function(state, delay2) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    var error = this._execute(state, delay2);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  };
  AsyncAction2.prototype._execute = function(state, _delay) {
    var errored = false;
    var errorValue;
    try {
      this.work(state);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  };
  AsyncAction2.prototype.unsubscribe = function() {
    if (!this.closed) {
      var _a = this, id = _a.id, scheduler = _a.scheduler;
      var actions = scheduler.actions;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      _super.prototype.unsubscribe.call(this);
    }
  };
  return AsyncAction2;
}(Action);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/Immediate.js
init_virtual_process_polyfill();
init_buffer();
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate: function(cb) {
    var handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(function() {
      return findAndClearHandle(handle) && cb();
    });
    return handle;
  },
  clearImmediate: function(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/immediateProvider.js
var setImmediate = Immediate.setImmediate;
var clearImmediate = Immediate.clearImmediate;
var immediateProvider = {
  setImmediate: function() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));
  },
  clearImmediate: function(handle) {
    var delegate = immediateProvider.delegate;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapAction.js
var AsapAction = function(_super) {
  __extends(AsapAction2, _super);
  function AsapAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AsapAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  };
  AsapAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    if (!scheduler.actions.some(function(action) {
      return action.id === id;
    })) {
      immediateProvider.clearImmediate(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AsapAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Scheduler.js
init_virtual_process_polyfill();
init_buffer();
var Scheduler = function() {
  function Scheduler2(schedulerActionCtor, now) {
    if (now === void 0) {
      now = Scheduler2.now;
    }
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  Scheduler2.prototype.schedule = function(work, delay2, state) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return new this.schedulerActionCtor(this, work).schedule(state, delay2);
  };
  Scheduler2.now = dateTimestampProvider.now;
  return Scheduler2;
}();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = function(_super) {
  __extends(AsyncScheduler2, _super);
  function AsyncScheduler2(SchedulerAction, now) {
    if (now === void 0) {
      now = Scheduler.now;
    }
    var _this = _super.call(this, SchedulerAction, now) || this;
    _this.actions = [];
    _this._active = false;
    _this._scheduled = void 0;
    return _this;
  }
  AsyncScheduler2.prototype.flush = function(action) {
    var actions = this.actions;
    if (this._active) {
      actions.push(action);
      return;
    }
    var error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsyncScheduler2;
}(Scheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AsapScheduler.js
var AsapScheduler = function(_super) {
  __extends(AsapScheduler2, _super);
  function AsapScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AsapScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AsapScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/async.js
init_virtual_process_polyfill();
init_buffer();
var asyncScheduler = new AsyncScheduler(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/QueueAction.js
init_virtual_process_polyfill();
init_buffer();
var QueueAction = function(_super) {
  __extends(QueueAction2, _super);
  function QueueAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  QueueAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 > 0) {
      return _super.prototype.schedule.call(this, state, delay2);
    }
    this.delay = delay2;
    this.state = state;
    this.scheduler.flush(this);
    return this;
  };
  QueueAction2.prototype.execute = function(state, delay2) {
    return delay2 > 0 || this.closed ? _super.prototype.execute.call(this, state, delay2) : this._execute(state, delay2);
  };
  QueueAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    return scheduler.flush(this);
  };
  return QueueAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/QueueScheduler.js
init_virtual_process_polyfill();
init_buffer();
var QueueScheduler = function(_super) {
  __extends(QueueScheduler2, _super);
  function QueueScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return QueueScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/queue.js
var queueScheduler = new QueueScheduler(QueueAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameAction.js
init_virtual_process_polyfill();
init_buffer();
var AnimationFrameAction = function(_super) {
  __extends(AnimationFrameAction2, _super);
  function AnimationFrameAction2(scheduler, work) {
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    return _this;
  }
  AnimationFrameAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 !== null && delay2 > 0) {
      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay2);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function() {
      return scheduler.flush(void 0);
    }));
  };
  AnimationFrameAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (delay2 != null && delay2 > 0 || delay2 == null && this.delay > 0) {
      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay2);
    }
    if (!scheduler.actions.some(function(action) {
      return action.id === id;
    })) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  };
  return AnimationFrameAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/AnimationFrameScheduler.js
init_virtual_process_polyfill();
init_buffer();
var AnimationFrameScheduler = function(_super) {
  __extends(AnimationFrameScheduler2, _super);
  function AnimationFrameScheduler2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  AnimationFrameScheduler2.prototype.flush = function(action) {
    this._active = true;
    var flushId = this._scheduled;
    this._scheduled = void 0;
    var actions = this.actions;
    var error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  return AnimationFrameScheduler2;
}(AsyncScheduler);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduler/VirtualTimeScheduler.js
init_virtual_process_polyfill();
init_buffer();
var VirtualTimeScheduler = function(_super) {
  __extends(VirtualTimeScheduler2, _super);
  function VirtualTimeScheduler2(schedulerActionCtor, maxFrames) {
    if (schedulerActionCtor === void 0) {
      schedulerActionCtor = VirtualAction;
    }
    if (maxFrames === void 0) {
      maxFrames = Infinity;
    }
    var _this = _super.call(this, schedulerActionCtor, function() {
      return _this.frame;
    }) || this;
    _this.maxFrames = maxFrames;
    _this.frame = 0;
    _this.index = -1;
    return _this;
  }
  VirtualTimeScheduler2.prototype.flush = function() {
    var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
    var error;
    var action;
    while ((action = actions[0]) && action.delay <= maxFrames) {
      actions.shift();
      this.frame = action.delay;
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    }
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  };
  VirtualTimeScheduler2.frameTimeFactor = 10;
  return VirtualTimeScheduler2;
}(AsyncScheduler);
var VirtualAction = function(_super) {
  __extends(VirtualAction2, _super);
  function VirtualAction2(scheduler, work, index) {
    if (index === void 0) {
      index = scheduler.index += 1;
    }
    var _this = _super.call(this, scheduler, work) || this;
    _this.scheduler = scheduler;
    _this.work = work;
    _this.index = index;
    _this.active = true;
    _this.index = scheduler.index = index;
    return _this;
  }
  VirtualAction2.prototype.schedule = function(state, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    if (Number.isFinite(delay2)) {
      if (!this.id) {
        return _super.prototype.schedule.call(this, state, delay2);
      }
      this.active = false;
      var action = new VirtualAction2(this.scheduler, this.work);
      this.add(action);
      return action.schedule(state, delay2);
    } else {
      return Subscription.EMPTY;
    }
  };
  VirtualAction2.prototype.requestAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    this.delay = scheduler.frame + delay2;
    var actions = scheduler.actions;
    actions.push(this);
    actions.sort(VirtualAction2.sortActions);
    return true;
  };
  VirtualAction2.prototype.recycleAsyncId = function(scheduler, id, delay2) {
    if (delay2 === void 0) {
      delay2 = 0;
    }
    return void 0;
  };
  VirtualAction2.prototype._execute = function(state, delay2) {
    if (this.active === true) {
      return _super.prototype._execute.call(this, state, delay2);
    }
  };
  VirtualAction2.sortActions = function(a, b) {
    if (a.delay === b.delay) {
      if (a.index === b.index) {
        return 0;
      } else if (a.index > b.index) {
        return 1;
      } else {
        return -1;
      }
    } else if (a.delay > b.delay) {
      return 1;
    } else {
      return -1;
    }
  };
  return VirtualAction2;
}(AsyncAction);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Notification.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/empty.js
init_virtual_process_polyfill();
init_buffer();
var EMPTY = new Observable(function(subscriber) {
  return subscriber.complete();
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/of.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/args.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isScheduler.js
init_virtual_process_polyfill();
init_buffer();
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/from.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isArrayLike.js
init_virtual_process_polyfill();
init_buffer();
var isArrayLike = function(x) {
  return x && typeof x.length === "number" && typeof x !== "function";
};

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isPromise.js
init_virtual_process_polyfill();
init_buffer();
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isInteropObservable.js
init_virtual_process_polyfill();
init_buffer();
function isInteropObservable(input) {
  return isFunction(input[observable]);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isAsyncIterable.js
init_virtual_process_polyfill();
init_buffer();
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/throwUnobservableError.js
init_virtual_process_polyfill();
init_buffer();
function createInvalidObservableTypeError(input) {
  return new TypeError("You provided " + (input !== null && typeof input === "object" ? "an invalid object" : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isIterable.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/symbol/iterator.js
init_virtual_process_polyfill();
init_buffer();
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isIterable.js
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isReadableStreamLike.js
init_virtual_process_polyfill();
init_buffer();
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
    var reader, _a, value, done;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          reader = readableStream.getReader();
          _b.label = 1;
        case 1:
          _b.trys.push([1, , 9, 10]);
          _b.label = 2;
        case 2:
          if (false)
            return [3, 8];
          return [4, __await(reader.read())];
        case 3:
          _a = _b.sent(), value = _a.value, done = _a.done;
          if (!done)
            return [3, 5];
          return [4, __await(void 0)];
        case 4:
          return [2, _b.sent()];
        case 5:
          return [4, __await(value)];
        case 6:
          return [4, _b.sent()];
        case 7:
          _b.sent();
          return [3, 2];
        case 8:
          return [3, 10];
        case 9:
          reader.releaseLock();
          return [7];
        case 10:
          return [2];
      }
    });
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable(function(subscriber) {
    var obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable(function(subscriber) {
    for (var i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable(function(subscriber) {
    promise.then(function(value) {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, function(err) {
      return subscriber.error(err);
    }).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable(function(subscriber) {
    var e_1, _a;
    try {
      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
        var value = iterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return))
          _a.call(iterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable(function(subscriber) {
    process(asyncIterable, subscriber).catch(function(err) {
      return subscriber.error(err);
    });
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_2, _a;
  return __awaiter(this, void 0, void 0, function() {
    var value, e_2_1;
    return __generator(this, function(_b) {
      switch (_b.label) {
        case 0:
          _b.trys.push([0, 5, 6, 11]);
          asyncIterable_1 = __asyncValues(asyncIterable);
          _b.label = 1;
        case 1:
          return [4, asyncIterable_1.next()];
        case 2:
          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done))
            return [3, 4];
          value = asyncIterable_1_1.value;
          subscriber.next(value);
          if (subscriber.closed) {
            return [2];
          }
          _b.label = 3;
        case 3:
          return [3, 1];
        case 4:
          return [3, 11];
        case 5:
          e_2_1 = _b.sent();
          e_2 = { error: e_2_1 };
          return [3, 11];
        case 6:
          _b.trys.push([6, , 9, 10]);
          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return)))
            return [3, 8];
          return [4, _a.call(asyncIterable_1)];
        case 7:
          _b.sent();
          _b.label = 8;
        case 8:
          return [3, 10];
        case 9:
          if (e_2)
            throw e_2.error;
          return [7];
        case 10:
          return [7];
        case 11:
          subscriber.complete();
          return [2];
      }
    });
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/executeSchedule.js
init_virtual_process_polyfill();
init_buffer();
function executeSchedule(parentSubscription, scheduler, work, delay2, repeat2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  if (repeat2 === void 0) {
    repeat2 = false;
  }
  var scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat2) {
      parentSubscription.add(this.schedule(null, delay2));
    } else {
      this.unsubscribe();
    }
  }, delay2);
  parentSubscription.add(scheduleSubscription);
  if (!repeat2) {
    return scheduleSubscription;
  }
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/observeOn.js
function observeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    source.subscribe(createOperatorSubscriber(subscriber, function(value) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.next(value);
      }, delay2);
    }, function() {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.complete();
      }, delay2);
    }, function(err) {
      return executeSchedule(subscriber, scheduler, function() {
        return subscriber.error(err);
      }, delay2);
    }));
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/subscribeOn.js
init_virtual_process_polyfill();
init_buffer();
function subscribeOn(scheduler, delay2) {
  if (delay2 === void 0) {
    delay2 = 0;
  }
  return operate(function(source, subscriber) {
    subscriber.add(scheduler.schedule(function() {
      return source.subscribe(subscriber);
    }, delay2));
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/schedulePromise.js
init_virtual_process_polyfill();
init_buffer();
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleArray.js
init_virtual_process_polyfill();
init_buffer();
function scheduleArray(input, scheduler) {
  return new Observable(function(subscriber) {
    var i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleIterable.js
init_virtual_process_polyfill();
init_buffer();
function scheduleIterable(input, scheduler) {
  return new Observable(function(subscriber) {
    var iterator2;
    executeSchedule(subscriber, scheduler, function() {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, function() {
        var _a;
        var value;
        var done;
        try {
          _a = iterator2.next(), value = _a.value, done = _a.done;
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return function() {
      return isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
    };
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleAsyncIterable.js
init_virtual_process_polyfill();
init_buffer();
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable(function(subscriber) {
    executeSchedule(subscriber, scheduler, function() {
      var iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, function() {
        iterator2.next().then(function(result) {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduleReadableStreamLike.js
init_virtual_process_polyfill();
init_buffer();
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/of.js
function of() {
  var args = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    args[_i] = arguments[_i];
  }
  var scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/throwError.js
init_virtual_process_polyfill();
init_buffer();
function throwError(errorOrErrorFactory, scheduler) {
  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function() {
    return errorOrErrorFactory;
  };
  var init = function(subscriber) {
    return subscriber.error(errorFactory());
  };
  return new Observable(scheduler ? function(subscriber) {
    return scheduler.schedule(init, 0, subscriber);
  } : init);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/Notification.js
var NotificationKind;
(function(NotificationKind2) {
  NotificationKind2["NEXT"] = "N";
  NotificationKind2["ERROR"] = "E";
  NotificationKind2["COMPLETE"] = "C";
})(NotificationKind || (NotificationKind = {}));
var Notification = function() {
  function Notification2(kind, value, error) {
    this.kind = kind;
    this.value = value;
    this.error = error;
    this.hasValue = kind === "N";
  }
  Notification2.prototype.observe = function(observer) {
    return observeNotification(this, observer);
  };
  Notification2.prototype.do = function(nextHandler, errorHandler, completeHandler) {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    return kind === "N" ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === "E" ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
  };
  Notification2.prototype.accept = function(nextOrObserver, error, complete) {
    var _a;
    return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);
  };
  Notification2.prototype.toObservable = function() {
    var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
    var result = kind === "N" ? of(value) : kind === "E" ? throwError(function() {
      return error;
    }) : kind === "C" ? EMPTY : 0;
    if (!result) {
      throw new TypeError("Unexpected notification kind " + kind);
    }
    return result;
  };
  Notification2.createNext = function(value) {
    return new Notification2("N", value);
  };
  Notification2.createError = function(err) {
    return new Notification2("E", void 0, err);
  };
  Notification2.createComplete = function() {
    return Notification2.completeNotification;
  };
  Notification2.completeNotification = new Notification2("C");
  return Notification2;
}();
function observeNotification(notification, observer) {
  var _a, _b, _c;
  var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
  if (typeof kind !== "string") {
    throw new TypeError('Invalid notification, missing "kind"');
  }
  kind === "N" ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === "E" ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
}

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isObservable.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/lastValueFrom.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/EmptyError.js
init_virtual_process_polyfill();
init_buffer();
var EmptyError = createErrorClass(function(_super) {
  return function EmptyErrorImpl() {
    _super(this);
    this.name = "EmptyError";
    this.message = "no elements in sequence";
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/firstValueFrom.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/ArgumentOutOfRangeError.js
init_virtual_process_polyfill();
init_buffer();
var ArgumentOutOfRangeError = createErrorClass(function(_super) {
  return function ArgumentOutOfRangeErrorImpl() {
    _super(this);
    this.name = "ArgumentOutOfRangeError";
    this.message = "argument out of range";
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/NotFoundError.js
init_virtual_process_polyfill();
init_buffer();
var NotFoundError = createErrorClass(function(_super) {
  return function NotFoundErrorImpl(message) {
    _super(this);
    this.name = "NotFoundError";
    this.message = message;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/SequenceError.js
init_virtual_process_polyfill();
init_buffer();
var SequenceError = createErrorClass(function(_super) {
  return function SequenceErrorImpl(message) {
    _super(this);
    this.name = "SequenceError";
    this.message = message;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeout.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/isDate.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeout.js
var TimeoutError = createErrorClass(function(_super) {
  return function TimeoutErrorImpl(info) {
    if (info === void 0) {
      info = null;
    }
    _super(this);
    this.message = "Timeout has occurred";
    this.name = "TimeoutError";
    this.info = info;
  };
});

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/bindCallback.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/bindCallbackInternals.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/map.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/mapOneOrManyArgs.js
var isArray = Array.isArray;

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/bindNodeCallback.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/combineLatest.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/argsArgArrayOrObject.js
init_virtual_process_polyfill();
init_buffer();
var isArray2 = Array.isArray;
var objectProto = Object.prototype;

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/createObject.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/concat.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatAll.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeAll.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeMap.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeInternals.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/connectable.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/defer.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/forkJoin.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/fromEvent.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/generate.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/iif.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/interval.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/timer.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/merge.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/never.js
init_virtual_process_polyfill();
init_buffer();
var NEVER = new Observable(noop);

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/onErrorResumeNext.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/onErrorResumeNext.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/argsOrArgArray.js
init_virtual_process_polyfill();
init_buffer();
var isArray3 = Array.isArray;

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/pairs.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/partition.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/util/not.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/filter.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/race.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/range.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/using.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/zip.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/types.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/audit.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/auditTime.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/buffer.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferCount.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferTime.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferToggle.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/bufferWhen.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/catchError.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineAll.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineLatestAll.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/joinAllInternals.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/toArray.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/reduce.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/scanInternals.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineLatestWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/combineLatest.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatMap.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatMapTo.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concatWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/concat.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/connect.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/observable/fromSubscribable.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/count.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/debounce.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/debounceTime.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/defaultIfEmpty.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/delay.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/delayWhen.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/take.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/ignoreElements.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mapTo.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/dematerialize.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/distinct.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilChanged.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/distinctUntilKeyChanged.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/elementAt.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/throwIfEmpty.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/endWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/every.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/exhaust.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/exhaustAll.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/exhaustMap.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/expand.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/finalize.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/find.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/findIndex.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/first.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/groupBy.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/isEmpty.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/last.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/takeLast.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/materialize.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/max.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/flatMap.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeMapTo.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeScan.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/mergeWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/merge.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/min.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/multicast.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/pairwise.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/pluck.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publish.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publishBehavior.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publishLast.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/publishReplay.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/raceWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/repeat.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/repeatWhen.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/retry.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/retryWhen.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/sample.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/sampleTime.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/scan.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/sequenceEqual.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/share.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/shareReplay.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/single.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skip.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skipLast.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skipUntil.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/skipWhile.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/startWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchAll.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchMap.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchMapTo.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/switchScan.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/takeWhile.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/tap.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/throttle.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/throttleTime.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeInterval.js
init_virtual_process_polyfill();
init_buffer();
var TimeInterval = function() {
  function TimeInterval2(value, interval2) {
    this.value = value;
    this.interval = interval2;
  }
  return TimeInterval2;
}();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timeoutWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/timestamp.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/window.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowCount.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowTime.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowToggle.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/windowWhen.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/withLatestFrom.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/zipAll.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/zipWith.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/node_modules/rxjs/dist/esm5/internal/operators/zip.js
init_virtual_process_polyfill();
init_buffer();

// node_modules/@web3-onboard/common/dist/index.js
var import_joi = __toModule(require_joi_browser_min());
var ProviderRpcErrorCode;
(function(ProviderRpcErrorCode2) {
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["ACCOUNT_ACCESS_REJECTED"] = 4001] = "ACCOUNT_ACCESS_REJECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["ACCOUNT_ACCESS_ALREADY_REQUESTED"] = -32002] = "ACCOUNT_ACCESS_ALREADY_REQUESTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["UNAUTHORIZED"] = 4100] = "UNAUTHORIZED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["INVALID_PARAMS"] = -32602] = "INVALID_PARAMS";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["UNSUPPORTED_METHOD"] = 4200] = "UNSUPPORTED_METHOD";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["DISCONNECTED"] = 4900] = "DISCONNECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["CHAIN_DISCONNECTED"] = 4901] = "CHAIN_DISCONNECTED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["CHAIN_NOT_ADDED"] = 4902] = "CHAIN_NOT_ADDED";
  ProviderRpcErrorCode2[ProviderRpcErrorCode2["DOES_NOT_EXIST"] = -32601] = "DOES_NOT_EXIST";
})(ProviderRpcErrorCode || (ProviderRpcErrorCode = {}));
var ProviderRpcError = class extends Error {
  constructor(error) {
    super(error.message);
    this.message = error.message;
    this.code = error.code;
    this.data = error.data;
  }
};
var createEIP1193Provider = (provider, requestPatch) => {
  let baseRequest;
  if (provider.request) {
    baseRequest = provider.request.bind(provider);
  } else if (provider.sendAsync) {
    baseRequest = createRequest(provider);
  }
  const request = async ({ method, params }) => {
    const key = method;
    if (requestPatch && requestPatch[key] === null) {
      throw new ProviderRpcError({
        code: 4200,
        message: `The Provider does not support the requested method: ${method}`
      });
    }
    if (requestPatch && requestPatch[key]) {
      return requestPatch[key]({ baseRequest, params });
    } else if (baseRequest) {
      return baseRequest({ method, params });
    } else {
      throw new ProviderRpcError({
        code: 4200,
        message: `The Provider does not support the requested method: ${method}`
      });
    }
  };
  provider.request = request;
  return provider;
};
var createRequest = (provider) => ({ method, params }) => new Promise((resolve, reject) => {
  provider.sendAsync({
    id: 0,
    jsonrpc: "2.0",
    method,
    params
  }, (error, { result }) => {
    if (error) {
      reject(JSON.parse(error));
    } else {
      resolve(result == void 0 ? null : result);
    }
  });
});
var tasks = new Set();
var managed_styles = new Map();
var resolved_promise = Promise.resolve();
var seen_callbacks = new Set();
var outroing = new Set();
var accounts$ = new Subject();
var basePath = import_joi.default.object({
  label: import_joi.default.string().required(),
  value: import_joi.default.string().required()
});
var basePaths = import_joi.default.array().items(basePath);
var chain = import_joi.default.object({
  namespace: import_joi.default.string(),
  id: import_joi.default.string().required(),
  label: import_joi.default.string(),
  token: import_joi.default.string().required(),
  rpcUrl: import_joi.default.string()
});
var chains = import_joi.default.array().items(chain);
var asset = import_joi.default.object({
  label: import_joi.default.string().required(),
  address: import_joi.default.string()
});
var assets = import_joi.default.array().items(asset);
var selectAccountOptions = import_joi.default.object({
  basePaths,
  assets,
  chains,
  scanAccounts: import_joi.default.function().arity(1).required(),
  supportsCustomPath: import_joi.default.bool()
});
var SofiaProRegular = `
  @font-face {
    font-family: Sofia Pro;
    src: url(data:application/font-woff2;charset=utf-8;base64,) format('woff2'),
        url(data:application/font-woff;charset=utf-8;base64,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) format('woff'),
        url('sofiapro-regular.ttf') format('truetype');
    font-weight: normal;
    font-style: normal;

  }
`;
var HANDLE_PIN_PRESS = "handlePinPress";
var BUTTON_COLOR = `#EBEBED`;
var BUTTON_DOT_COLOR = `#33394B`;
var pinButton = (value, slot, width = "64px", height = "64px") => `
  <button
    class="pin-button"
    style="width: ${width}; height: ${height};"
    type="button"
    onclick="window.${HANDLE_PIN_PRESS}(${value})">
      ${slot || `<svg class="pin-button-dot" viewBox="0 0 18 18" width="18" height="18">
          <circle cx="9" cy="9" r="9" ></circle>
        </svg>`}
      <div class="pin-button-bg">
  </button>
`;
var pinButtons = `
  <div class="pin-pad-buttons">
    ${[7, 8, 9, 4, 5, 6, 1, 2, 3].map((val) => pinButton(val)).join("")}
  </div>
`;
var delButtonIcon = `<svg class="del-button-icon" viewBox="0 0 24 24" focusable="false" class="chakra-icon css-onkibi" aria-hidden="true"><path fill="currentColor" d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"></path></svg>`;
var pinPhraseInput = (modalType) => `
<form id="pin-phrase-form" class="pin-phrase-input-container">
  <input
    id="pin-phrase-input"
    placeholder="${modalType === "pin" ? "PIN" : ""}"
    type="password"
    autocomplete="current-password"
  />
  ${modalType === "pin" ? ` <div class="del-button-wrapper">
            ${pinButton(-1, delButtonIcon, "38px", "38px")}
          </div>` : ""}
</form>
`;
var baseStyles = `
  .keepkey-modal {
    max-width: 22rem;
    padding: 20px 10px;
  }
  .pin-phrase-input-container {
    display: flex;
    position: relative;
    align-items: center;
    margin: 20px 0;
    width: 100%;
  }
  #pin-phrase-input {
    background: inherit;
    font-size: 0.889em;
    font-family: inherit;
    border-width: 1px;
    border-style: solid;
    border-color: #242835;
    border-radius: 4px;
    padding-left: 0.5rem;
    padding-right: 4.1rem;
    transition: opacity 150ms ease-in-out;
    height: 42px;
    width: 100%;
    opacity: 0.6;
    outline: none;
  }
  #pin-phrase-input:hover, #pin-phrase-input:focus {
    opacity: 1;
  }
  .unlock-button {
    height: 26px;
    display: flex;
    align-items: center;
    width: 100%;
    justify-content: center;
  }
  
  /* Overrides the branding on the modal*/
  .keepkey-modal + .bn-branding { visibility: hidden !important; }
  .keepkey-modal .bn-onboard-prepare-button {
    width: 100%;
  }
`;
var pinModalStyles = `
  #entry {
    align-items: center;
    display: flex;
    flex-flow: column;
    padding: 20px;
  }
  .pin-pad-buttons {
    display: grid;
    grid-template-columns: repeat(3, 75px);
    grid-template-rows: repeat(3, 75px);
    align-items: center;
    justify-items: center;
    margin-bottom: 15px;
  }
  .pin-button {
    align-items: center;
    border-radius: 6px;
    border: 1px solid ${BUTTON_COLOR};
    cursor: pointer;
    display: flex;
    justify-content: center;
    font-size: 18px;
    overflow: hidden;
    padding: 0;
    background-color: unset;
    overflow: hidden;
  }
  .pin-button-bg {
    width: 100%;
    height: 100%;
    display: flex;
    overflow: hidden;
    background-color: ${BUTTON_COLOR};
    transition: opacity 100ms ease-in;
  }
  .pin-button-bg:hover {
    opacity: .2;
  }
  .pin-button-dot {
    fill: ${BUTTON_DOT_COLOR};
    position: absolute;
    pointer-events: none;
    z-index: 2;
  }
  .del-button-wrapper {
    position: absolute;
    height: 42px;
    width: 42px;
    right: 2px;
    display: flex;
    align-items: center;
    justify-content: center;
  }
  .del-button-wrapper > .pin-button {
    border: none;
  }
  .del-button-icon {
    position: absolute;
    width: 20px;
    z-index: 2;
    pointer-events: none;
  }
  .del-button-icon + div {
    opacity: .5;
  }
  .del-button-icon + div:hover {
    opacity: 1;
  }
`;
var passphraseModalStyles = `
  .keepkey-modal {
    padding: 40px 30px;
  }
`;
var pinHTML = `
    <style>${baseStyles}${pinModalStyles}</style>
    <h2>Enter Your Pin</h2>
    <p>
      Use PIN layout shown on your device to find the location to press on this pin pad.
    </p>
    <div id="entry" class="bn-onboard-custom">
      ${pinButtons}
      ${pinPhraseInput("pin")}
    </div>
  `;
var passphraseHTML = `
  <style>${baseStyles}${passphraseModalStyles}</style>
  <h2 style="margin-bottom: 35px">Enter Your Passphrase</h2>
  <div id="entry" class="bn-onboard-custom">
    ${pinPhraseInput("passphrase")}
  </div>
`;

export {
  require_joi_browser_min,
  ProviderRpcErrorCode,
  ProviderRpcError,
  createEIP1193Provider,
  SofiaProRegular
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=chunk-QMB77UJZ.js.map
