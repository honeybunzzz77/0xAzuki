{
  "version": 3,
  "sources": ["dep:@web3-onboard_walletconnect", "../@web3-onboard/walletconnect/dist/index.js"],
  "sourcesContent": ["import d from \"./node_modules/@web3-onboard/walletconnect/dist/index.js\";export default d;", "import { StaticJsonRpcProvider } from '@ethersproject/providers';\nimport { ProviderRpcError, ProviderRpcErrorCode } from '@web3-onboard/common';\nfunction walletConnect(options) {\n    const { bridge = 'https://bridge.walletconnect.org', qrcodeModalOptions } = options || {};\n    return () => {\n        return {\n            label: 'WalletConnect',\n            getIcon: async () => (await import('./icon.js')).default,\n            getInterface: async ({ chains, EventEmitter }) => {\n                const { default: WalletConnect } = await import('@walletconnect/client');\n                const { default: QRCodeModal } = await import('@walletconnect/qrcode-modal');\n                const { Subject, fromEvent } = await import('rxjs');\n                const { takeUntil, take } = await import('rxjs/operators');\n                const connector = new WalletConnect({\n                    bridge\n                });\n                const emitter = new EventEmitter();\n                class EthProvider {\n                    constructor({ connector, chains }) {\n                        this.emit = emitter.emit.bind(emitter);\n                        this.on = emitter.on.bind(emitter);\n                        this.removeListener = emitter.removeListener.bind(emitter);\n                        this.connector = connector;\n                        this.chains = chains;\n                        this.disconnected$ = new Subject();\n                        this.providers = {};\n                        // listen for session updates\n                        fromEvent(this.connector, 'session_update', (error, payload) => {\n                            if (error) {\n                                throw error;\n                            }\n                            return payload;\n                        })\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: ({ params }) => {\n                                const [{ accounts, chainId }] = params;\n                                this.emit('accountsChanged', accounts);\n                                this.emit('chainChanged', `0x${chainId.toString(16)}`);\n                            },\n                            error: console.warn\n                        });\n                        // listen for disconnect event\n                        fromEvent(this.connector, 'disconnect', (error, payload) => {\n                            if (error) {\n                                throw error;\n                            }\n                            return payload;\n                        })\n                            .pipe(takeUntil(this.disconnected$))\n                            .subscribe({\n                            next: () => {\n                                this.emit('accountsChanged', []);\n                                this.disconnected$.next(true);\n                                typeof localStorage !== 'undefined' &&\n                                    localStorage.removeItem('walletconnect');\n                            },\n                            error: console.warn\n                        });\n                        this.disconnect = () => this.connector.killSession();\n                        this.request = async ({ method, params }) => {\n                            if (method === 'eth_chainId') {\n                                return `0x${this.connector.chainId.toString(16)}`;\n                            }\n                            if (method === 'eth_requestAccounts') {\n                                return new Promise((resolve, reject) => {\n                                    // Check if connection is already established\n                                    if (!this.connector.connected) {\n                                        // create new session\n                                        this.connector.createSession().then(() => {\n                                            QRCodeModal.open(this.connector.uri, () => reject(new ProviderRpcError({\n                                                code: 4001,\n                                                message: 'User rejected the request.'\n                                            })), qrcodeModalOptions);\n                                        });\n                                    }\n                                    else {\n                                        const { accounts, chainId } = this.connector.session;\n                                        this.emit('chainChanged', `0x${chainId.toString(16)}`);\n                                        return resolve(accounts);\n                                    }\n                                    // Subscribe to connection events\n                                    fromEvent(this.connector, 'connect', (error, payload) => {\n                                        if (error) {\n                                            throw error;\n                                        }\n                                        return payload;\n                                    })\n                                        .pipe(take(1))\n                                        .subscribe({\n                                        next: ({ params }) => {\n                                            const [{ accounts, chainId }] = params;\n                                            this.emit('accountsChanged', accounts);\n                                            this.emit('chainChanged', `0x${chainId.toString(16)}`);\n                                            QRCodeModal.close();\n                                            resolve(accounts);\n                                        },\n                                        error: reject\n                                    });\n                                });\n                            }\n                            if (method === 'wallet_switchEthereumChain' ||\n                                method === 'eth_selectAccounts') {\n                                throw new ProviderRpcError({\n                                    code: ProviderRpcErrorCode.UNSUPPORTED_METHOD,\n                                    message: `The Provider does not support the requested method: ${method}`\n                                });\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_sendTransaction') {\n                                // @ts-ignore\n                                return this.connector.sendTransaction(params[0]);\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_signTransaction') {\n                                // @ts-ignore\n                                return this.connector.signTransaction(params[0]);\n                            }\n                            // @ts-ignore\n                            if (method === 'personal_sign') {\n                                // @ts-ignore\n                                return this.connector.signPersonalMessage(params);\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_sign') {\n                                // @ts-ignore\n                                return this.connector.signMessage(params);\n                            }\n                            // @ts-ignore\n                            if (method === 'eth_signTypedData') {\n                                // @ts-ignore\n                                return this.connector.signTypedData(params);\n                            }\n                            if (method === 'eth_accounts') {\n                                return this.connector.sendCustomRequest({\n                                    id: 1337,\n                                    jsonrpc: '2.0',\n                                    method,\n                                    params\n                                });\n                            }\n                            const chainId = await this.request({ method: 'eth_chainId' });\n                            if (!this.providers[chainId]) {\n                                const currentChain = chains.find(({ id }) => id === chainId);\n                                if (!currentChain) {\n                                    throw new ProviderRpcError({\n                                        code: ProviderRpcErrorCode.CHAIN_NOT_ADDED,\n                                        message: `The Provider does not have a rpcUrl to make a request for the requested method: ${method}`\n                                    });\n                                }\n                                this.providers[chainId] = new StaticJsonRpcProvider(currentChain.rpcUrl);\n                            }\n                            return this.providers[chainId].send(method, params);\n                        };\n                    }\n                }\n                return {\n                    provider: new EthProvider({ chains, connector })\n                };\n            }\n        };\n    };\n}\nexport default walletConnect;\n"],
  "mappings": "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",
  "names": []
}
